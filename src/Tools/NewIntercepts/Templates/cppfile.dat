//*************************************************************************
// $PROJECT_NAME$.cpp
//
// Generated by Holodeck Add New Intercepts Generator
//*************************************************************************

#include "$PROJECT_NAME$.h"
#include "$HOLODECK_INSTALL_PATH$\Dependencies\CLRIntercept.h"

ReplacementLibrary *library = NULL;
LogSender *logSender = NULL;
Mutex *createProcessMutex = NULL;
Event *childProcessCreatedEvent = NULL;
Event *holodeckAttachedToChildProcessEvent = NULL;
MemoryMappedFile *childProcessDataFile = NULL;


//*************************************************************************
// Method: ReplacementLibraryAttach
// Description: Called when HEAT is attaching
// Parameters: None
// Return Value: None
//*************************************************************************
void ReplacementLibraryAttach()
{
	ReplacementLibrary::DisableInterception();
	if (library == NULL)
	{
		library = new ReplacementLibrary("$ORIGINAL_DLL_NAME$");
		logSender = &commonLogSender;

		if (!logSender->GetIsSendLogThreadRunning())
			logSender->StartSendLogThread();
	}
	ReplacementLibrary::EnableInterception();
}

//*************************************************************************
// Method:		ReplacementLibraryDetach
// Description: Called when HEAT is detaching
// Parameters: None
// Return Value: None
//*************************************************************************
void ReplacementLibraryDetach()
{
	ReplacementLibrary::DisableInterception();
	if (library != NULL)
	{
		if ((logSender != NULL) && (logSender->GetIsSendLogThreadRunning()))
		{
			logSender->StopSendLogThread();
			logSender = NULL;
		}
	}
	ReplacementLibrary::EnableInterception();
}

//*************************************************************************
// Method:		DllMain
// Description: Entry point to this dll
// Parameters: See MSDN DllMain function parameters
// Return Value: See MSDN DllMain return value
//*************************************************************************
BOOL APIENTRY DllMain(HANDLE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)
{
	ReplacementLibrary::DisableInterception();
	switch (ul_reason_for_call)
	{
	case DLL_PROCESS_ATTACH:
		break;
	case DLL_PROCESS_DETACH:
		ReplacementLibraryDetach();
		delete library;
		library = NULL;
		return TRUE; // Don't re-enable intercepts, as we are detaching
	default:
		break;
	}
	ReplacementLibrary::EnableInterception();

	return TRUE;
}
