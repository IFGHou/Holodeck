// This file was automatically generated by GenerateReplacementLibrary.  Do not modify.

using Replacement;
using System;


namespace Replacement
{
	public class SystemServiceProcessReplacementLibrary35
	{
		public static DotNetReplacementLibrary ReplacementLibrary = new DotNetReplacementLibrary("System.ServiceProcess.dll");
	};
}


namespace HeatInterceptHandlers
{
	[HeatDotNet.InterceptTypeName("System.ServiceProcess.ServiceBase")]
	public class HandlerClass1
	{
		// System.ServiceProcess.ServiceBase.RequestAdditionalTime
		private static bool CallerMethod1(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase.get_AutoLog
		private static bool CallerMethod2(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase.set_AutoLog
		private static bool CallerMethod3(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase.get_ExitCode
		private static bool CallerMethod4(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase.set_ExitCode
		private static bool CallerMethod5(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase.get_CanHandlePowerEvent
		private static bool CallerMethod6(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase.set_CanHandlePowerEvent
		private static bool CallerMethod7(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase.get_CanHandleSessionChangeEvent
		private static bool CallerMethod8(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase.set_CanHandleSessionChangeEvent
		private static bool CallerMethod9(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase.get_CanPauseAndContinue
		private static bool CallerMethod10(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase.set_CanPauseAndContinue
		private static bool CallerMethod11(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase.get_CanShutdown
		private static bool CallerMethod12(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase.set_CanShutdown
		private static bool CallerMethod13(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase.get_CanStop
		private static bool CallerMethod14(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase.set_CanStop
		private static bool CallerMethod15(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase.get_EventLog
		private static bool CallerMethod16(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase.get_ServiceName
		private static bool CallerMethod17(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase.set_ServiceName
		private static bool CallerMethod18(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase.Stop
		private static bool CallerMethod19(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase.ServiceMainCallback
		private static bool CallerMethod20(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase.Run
		private static bool CallerMethod21(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase.Run
		private static bool CallerMethod22(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceBase..ctor
		private static bool CallerMethod23(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void RequestAdditionalTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 milliseconds)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = milliseconds;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1), "PROCESS", "System.ServiceProcess.ServiceBase.RequestAdditionalTime(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_AutoLog(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2), "PROCESS", "System.ServiceProcess.ServiceBase.get_AutoLog()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_AutoLog(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod3), "PROCESS", "System.ServiceProcess.ServiceBase.set_AutoLog(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_ExitCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod4), "PROCESS", "System.ServiceProcess.ServiceBase.get_ExitCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_ExitCode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod5), "PROCESS", "System.ServiceProcess.ServiceBase.set_ExitCode(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_CanHandlePowerEvent(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod6), "PROCESS", "System.ServiceProcess.ServiceBase.get_CanHandlePowerEvent()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_CanHandlePowerEvent(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod7), "PROCESS", "System.ServiceProcess.ServiceBase.set_CanHandlePowerEvent(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_CanHandleSessionChangeEvent(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod8), "PROCESS", "System.ServiceProcess.ServiceBase.get_CanHandleSessionChangeEvent()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_CanHandleSessionChangeEvent(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod9), "PROCESS", "System.ServiceProcess.ServiceBase.set_CanHandleSessionChangeEvent(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_CanPauseAndContinue(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod10), "PROCESS", "System.ServiceProcess.ServiceBase.get_CanPauseAndContinue()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_CanPauseAndContinue(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod11), "PROCESS", "System.ServiceProcess.ServiceBase.set_CanPauseAndContinue(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_CanShutdown(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod12), "PROCESS", "System.ServiceProcess.ServiceBase.get_CanShutdown()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_CanShutdown(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod13), "PROCESS", "System.ServiceProcess.ServiceBase.set_CanShutdown(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_CanStop(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod14), "PROCESS", "System.ServiceProcess.ServiceBase.get_CanStop()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_CanStop(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod15), "PROCESS", "System.ServiceProcess.ServiceBase.set_CanStop(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Diagnostics.EventLog get_EventLog(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod16), "PROCESS", "System.ServiceProcess.ServiceBase.get_EventLog()", paramObjs, typeof(System.Diagnostics.EventLog), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.EventLog)retValue;
		}

		public static System.String get_ServiceName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod17), "PROCESS", "System.ServiceProcess.ServiceBase.get_ServiceName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_ServiceName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod18), "PROCESS", "System.ServiceProcess.ServiceBase.set_ServiceName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Stop(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod19), "PROCESS", "System.ServiceProcess.ServiceBase.Stop()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ServiceMainCallback(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 argCount, System.IntPtr argPointer)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = argCount;
			paramObjs[2] = argPointer;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod20), "PROCESS", "System.ServiceProcess.ServiceBase.ServiceMainCallback(Int32, IntPtr)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Run(HeatDotNet.MethodInterceptInfo methodIntercept, System.ServiceProcess.ServiceBase[] services)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = services;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod21), "PROCESS", "System.ServiceProcess.ServiceBase.Run(ServiceBase[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Run(HeatDotNet.MethodInterceptInfo methodIntercept, System.ServiceProcess.ServiceBase service)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = service;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod22), "PROCESS", "System.ServiceProcess.ServiceBase.Run(ServiceBase)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod23), "PROCESS", "System.ServiceProcess.ServiceBase.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ServiceProcess.ServiceController")]
	public class HandlerClass2
	{
		// System.ServiceProcess.ServiceController.get_CanPauseAndContinue
		private static bool CallerMethod24(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.get_CanShutdown
		private static bool CallerMethod25(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.get_CanStop
		private static bool CallerMethod26(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.get_DisplayName
		private static bool CallerMethod27(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.set_DisplayName
		private static bool CallerMethod28(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.get_DependentServices
		private static bool CallerMethod29(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.get_MachineName
		private static bool CallerMethod30(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.set_MachineName
		private static bool CallerMethod31(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.get_ServiceName
		private static bool CallerMethod32(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.set_ServiceName
		private static bool CallerMethod33(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.get_ServicesDependedOn
		private static bool CallerMethod34(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.get_ServiceHandle
		private static bool CallerMethod35(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.get_Status
		private static bool CallerMethod36(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.get_ServiceType
		private static bool CallerMethod37(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.Close
		private static bool CallerMethod38(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.Pause
		private static bool CallerMethod39(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.Continue
		private static bool CallerMethod40(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.ExecuteCommand
		private static bool CallerMethod41(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.Refresh
		private static bool CallerMethod42(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.Start
		private static bool CallerMethod43(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.Start
		private static bool CallerMethod44(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.Stop
		private static bool CallerMethod45(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.WaitForStatus
		private static bool CallerMethod46(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.WaitForStatus
		private static bool CallerMethod47(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.GetDevices
		private static bool CallerMethod48(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.GetDevices
		private static bool CallerMethod49(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.GetServices
		private static bool CallerMethod50(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController.GetServices
		private static bool CallerMethod51(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController..ctor
		private static bool CallerMethod52(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController..ctor
		private static bool CallerMethod53(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceController..ctor
		private static bool CallerMethod54(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean get_CanPauseAndContinue(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod24), "PROCESS", "System.ServiceProcess.ServiceController.get_CanPauseAndContinue()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_CanShutdown(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod25), "PROCESS", "System.ServiceProcess.ServiceController.get_CanShutdown()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_CanStop(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod26), "PROCESS", "System.ServiceProcess.ServiceController.get_CanStop()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_DisplayName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod27), "PROCESS", "System.ServiceProcess.ServiceController.get_DisplayName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_DisplayName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod28), "PROCESS", "System.ServiceProcess.ServiceController.set_DisplayName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.ServiceProcess.ServiceController[] get_DependentServices(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod29), "PROCESS", "System.ServiceProcess.ServiceController.get_DependentServices()", paramObjs, typeof(System.ServiceProcess.ServiceController[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ServiceProcess.ServiceController[])retValue;
		}

		public static System.String get_MachineName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod30), "PROCESS", "System.ServiceProcess.ServiceController.get_MachineName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_MachineName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod31), "PROCESS", "System.ServiceProcess.ServiceController.set_MachineName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_ServiceName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod32), "PROCESS", "System.ServiceProcess.ServiceController.get_ServiceName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_ServiceName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod33), "PROCESS", "System.ServiceProcess.ServiceController.set_ServiceName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.ServiceProcess.ServiceController[] get_ServicesDependedOn(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod34), "PROCESS", "System.ServiceProcess.ServiceController.get_ServicesDependedOn()", paramObjs, typeof(System.ServiceProcess.ServiceController[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ServiceProcess.ServiceController[])retValue;
		}

		public static System.Runtime.InteropServices.SafeHandle get_ServiceHandle(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod35), "PROCESS", "System.ServiceProcess.ServiceController.get_ServiceHandle()", paramObjs, typeof(System.Runtime.InteropServices.SafeHandle), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Runtime.InteropServices.SafeHandle)retValue;
		}

		public static System.ServiceProcess.ServiceControllerStatus get_Status(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod36), "PROCESS", "System.ServiceProcess.ServiceController.get_Status()", paramObjs, typeof(System.ServiceProcess.ServiceControllerStatus), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ServiceProcess.ServiceControllerStatus)retValue;
		}

		public static System.ServiceProcess.ServiceType get_ServiceType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod37), "PROCESS", "System.ServiceProcess.ServiceController.get_ServiceType()", paramObjs, typeof(System.ServiceProcess.ServiceType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ServiceProcess.ServiceType)retValue;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod38), "PROCESS", "System.ServiceProcess.ServiceController.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Pause(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod39), "PROCESS", "System.ServiceProcess.ServiceController.Pause()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Continue(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod40), "PROCESS", "System.ServiceProcess.ServiceController.Continue()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ExecuteCommand(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 command)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = command;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod41), "PROCESS", "System.ServiceProcess.ServiceController.ExecuteCommand(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Refresh(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod42), "PROCESS", "System.ServiceProcess.ServiceController.Refresh()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Start(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod43), "PROCESS", "System.ServiceProcess.ServiceController.Start()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Start(HeatDotNet.MethodInterceptInfo methodIntercept, System.String[] args)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = args;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod44), "PROCESS", "System.ServiceProcess.ServiceController.Start(String[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Stop(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod45), "PROCESS", "System.ServiceProcess.ServiceController.Stop()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WaitForStatus(HeatDotNet.MethodInterceptInfo methodIntercept, System.ServiceProcess.ServiceControllerStatus desiredStatus)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = desiredStatus;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod46), "PROCESS", "System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WaitForStatus(HeatDotNet.MethodInterceptInfo methodIntercept, System.ServiceProcess.ServiceControllerStatus desiredStatus, System.TimeSpan timeout)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = desiredStatus;
			paramObjs[2] = timeout;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod47), "PROCESS", "System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus, TimeSpan)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.ServiceProcess.ServiceController[] GetDevices(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod48), "PROCESS", "System.ServiceProcess.ServiceController.GetDevices()", paramObjs, typeof(System.ServiceProcess.ServiceController[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ServiceProcess.ServiceController[])retValue;
		}

		public static System.ServiceProcess.ServiceController[] GetDevices(HeatDotNet.MethodInterceptInfo methodIntercept, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = machineName;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod49), "PROCESS", "System.ServiceProcess.ServiceController.GetDevices(String)", paramObjs, typeof(System.ServiceProcess.ServiceController[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ServiceProcess.ServiceController[])retValue;
		}

		public static System.ServiceProcess.ServiceController[] GetServices(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod50), "PROCESS", "System.ServiceProcess.ServiceController.GetServices()", paramObjs, typeof(System.ServiceProcess.ServiceController[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ServiceProcess.ServiceController[])retValue;
		}

		public static System.ServiceProcess.ServiceController[] GetServices(HeatDotNet.MethodInterceptInfo methodIntercept, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = machineName;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod51), "PROCESS", "System.ServiceProcess.ServiceController.GetServices(String)", paramObjs, typeof(System.ServiceProcess.ServiceController[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ServiceProcess.ServiceController[])retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod52), "PROCESS", "System.ServiceProcess.ServiceController.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = name;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod53), "PROCESS", "System.ServiceProcess.ServiceController.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String name, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = name;
			paramObjs[2] = machineName;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod54), "PROCESS", "System.ServiceProcess.ServiceController.ctor(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ServiceProcess.ServiceInstaller")]
	public class HandlerClass3
	{
		// System.ServiceProcess.ServiceInstaller.get_DisplayName
		private static bool CallerMethod55(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceInstaller.set_DisplayName
		private static bool CallerMethod56(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceInstaller.get_Description
		private static bool CallerMethod57(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceInstaller.set_Description
		private static bool CallerMethod58(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceInstaller.get_ServicesDependedOn
		private static bool CallerMethod59(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceInstaller.set_ServicesDependedOn
		private static bool CallerMethod60(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceInstaller.get_ServiceName
		private static bool CallerMethod61(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceInstaller.set_ServiceName
		private static bool CallerMethod62(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceInstaller.get_StartType
		private static bool CallerMethod63(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceInstaller.set_StartType
		private static bool CallerMethod64(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceInstaller.CopyFromComponent
		private static bool CallerMethod65(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceInstaller.Install
		private static bool CallerMethod66(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller
		private static bool CallerMethod67(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceInstaller.Rollback
		private static bool CallerMethod68(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceInstaller.Uninstall
		private static bool CallerMethod69(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceInstaller..ctor
		private static bool CallerMethod70(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_DisplayName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod55), "PROCESS", "System.ServiceProcess.ServiceInstaller.get_DisplayName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_DisplayName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod56), "PROCESS", "System.ServiceProcess.ServiceInstaller.set_DisplayName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Description(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod57), "PROCESS", "System.ServiceProcess.ServiceInstaller.get_Description()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Description(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod58), "PROCESS", "System.ServiceProcess.ServiceInstaller.set_Description(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String[] get_ServicesDependedOn(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod59), "PROCESS", "System.ServiceProcess.ServiceInstaller.get_ServicesDependedOn()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static void set_ServicesDependedOn(HeatDotNet.MethodInterceptInfo methodIntercept, System.String[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod60), "PROCESS", "System.ServiceProcess.ServiceInstaller.set_ServicesDependedOn(String[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_ServiceName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod61), "PROCESS", "System.ServiceProcess.ServiceInstaller.get_ServiceName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_ServiceName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod62), "PROCESS", "System.ServiceProcess.ServiceInstaller.set_ServiceName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.ServiceProcess.ServiceStartMode get_StartType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod63), "PROCESS", "System.ServiceProcess.ServiceInstaller.get_StartType()", paramObjs, typeof(System.ServiceProcess.ServiceStartMode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ServiceProcess.ServiceStartMode)retValue;
		}

		public static void set_StartType(HeatDotNet.MethodInterceptInfo methodIntercept, System.ServiceProcess.ServiceStartMode value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod64), "PROCESS", "System.ServiceProcess.ServiceInstaller.set_StartType(ServiceStartMode)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void CopyFromComponent(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.IComponent component)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod65), "PROCESS", "System.ServiceProcess.ServiceInstaller.CopyFromComponent(IComponent)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Install(HeatDotNet.MethodInterceptInfo methodIntercept, System.Collections.IDictionary stateSaver)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = stateSaver;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod66), "PROCESS", "System.ServiceProcess.ServiceInstaller.Install(IDictionary)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean IsEquivalentInstaller(HeatDotNet.MethodInterceptInfo methodIntercept, System.Configuration.Install.ComponentInstaller otherInstaller)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = otherInstaller;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod67), "PROCESS", "System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void Rollback(HeatDotNet.MethodInterceptInfo methodIntercept, System.Collections.IDictionary savedState)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = savedState;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod68), "PROCESS", "System.ServiceProcess.ServiceInstaller.Rollback(IDictionary)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Uninstall(HeatDotNet.MethodInterceptInfo methodIntercept, System.Collections.IDictionary savedState)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = savedState;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod69), "PROCESS", "System.ServiceProcess.ServiceInstaller.Uninstall(IDictionary)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod70), "PROCESS", "System.ServiceProcess.ServiceInstaller.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ServiceProcess.ServiceProcessInstaller")]
	public class HandlerClass4
	{
		// System.ServiceProcess.ServiceProcessInstaller.get_HelpText
		private static bool CallerMethod71(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceProcessInstaller.get_Password
		private static bool CallerMethod72(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceProcessInstaller.set_Password
		private static bool CallerMethod73(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceProcessInstaller.get_Account
		private static bool CallerMethod74(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceProcessInstaller.set_Account
		private static bool CallerMethod75(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceProcessInstaller.get_Username
		private static bool CallerMethod76(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceProcessInstaller.set_Username
		private static bool CallerMethod77(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent
		private static bool CallerMethod78(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceProcessInstaller.Install
		private static bool CallerMethod79(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceProcessInstaller.Rollback
		private static bool CallerMethod80(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ServiceProcess.ServiceProcessInstaller..ctor
		private static bool CallerMethod81(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_HelpText(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod71), "PROCESS", "System.ServiceProcess.ServiceProcessInstaller.get_HelpText()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Password(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod72), "PROCESS", "System.ServiceProcess.ServiceProcessInstaller.get_Password()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Password(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod73), "PROCESS", "System.ServiceProcess.ServiceProcessInstaller.set_Password(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.ServiceProcess.ServiceAccount get_Account(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod74), "PROCESS", "System.ServiceProcess.ServiceProcessInstaller.get_Account()", paramObjs, typeof(System.ServiceProcess.ServiceAccount), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ServiceProcess.ServiceAccount)retValue;
		}

		public static void set_Account(HeatDotNet.MethodInterceptInfo methodIntercept, System.ServiceProcess.ServiceAccount value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod75), "PROCESS", "System.ServiceProcess.ServiceProcessInstaller.set_Account(ServiceAccount)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Username(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod76), "PROCESS", "System.ServiceProcess.ServiceProcessInstaller.get_Username()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Username(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod77), "PROCESS", "System.ServiceProcess.ServiceProcessInstaller.set_Username(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void CopyFromComponent(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.IComponent comp)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = comp;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod78), "PROCESS", "System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(IComponent)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Install(HeatDotNet.MethodInterceptInfo methodIntercept, System.Collections.IDictionary stateSaver)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = stateSaver;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod79), "PROCESS", "System.ServiceProcess.ServiceProcessInstaller.Install(IDictionary)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Rollback(HeatDotNet.MethodInterceptInfo methodIntercept, System.Collections.IDictionary savedState)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = savedState;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod80), "PROCESS", "System.ServiceProcess.ServiceProcessInstaller.Rollback(IDictionary)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemServiceProcessReplacementLibrary35.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod81), "PROCESS", "System.ServiceProcess.ServiceProcessInstaller.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

}
