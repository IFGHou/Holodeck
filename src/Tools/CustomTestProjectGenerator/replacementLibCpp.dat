/*
	$USER_PROJECT_NAME$Dll.cpp
	Code file for the Replacement Library
	Generated by Holodeck Custom Test Project Generator

	Important information:

	There are certain things one should avoid doing inside an interception function:
	1) Calling MessageBox: Do not call any variation of a message box.

*/

#include "$USER_PROJECT_NAME$Dll.h"

BOOL APIENTRY DllMain( HANDLE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved )
{
	switch (ul_reason_for_call)
	{
	case DLL_PROCESS_ATTACH:
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
    return TRUE;
}

//*************************************************************************
// Method:		ReplacementLibraryAttach
// Description: Called when HEAT is attaching
// Parameters: None
// Return Value: None
//*************************************************************************
void ReplacementLibraryAttach()
{
	@CALL_ATTACH_IN_LIBS
}

//*************************************************************************
// Method:		ReplacementLibraryDetach
// Description: Called when HEAT is detaching
// Parameters: None
// Return Value: None
//*************************************************************************
void ReplacementLibraryDetach()
{
	@CALL_DETACH_IN_LIBS
}


//*************************************************************************
// Method:		GetHolodeckFunction
// Description: Returns a pointer to a replacement function from the Holodeck
//				libraries which are capable of handling injects faults and tests
//
// Parameters:
//				hModule - the loaded module which contains the function
//				lpFunctionName - the name of the target function
//
// Return Value: A pointer to the requested function, NULL if not found
//*************************************************************************
VOID * GetHolodeckFunction (HMODULE hModule, LPCSTR lpFunctionName)
{
	if (hModule == NULL)
		return NULL;
	
	return GetProcAddress (hModule, lpFunctionName);
}