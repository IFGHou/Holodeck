// This file was automatically generated by GenerateReplacementLibrary.  Do not modify.

using Replacement;
using System;


namespace Replacement
{
	public class SystemXMLReplacementLibrary
	{
		public static DotNetReplacementLibrary ReplacementLibrary = new DotNetReplacementLibrary("System.XML.dll");
	};
}


namespace HeatInterceptHandlers
{
	[HeatDotNet.InterceptTypeName("System.Xml.XmlNode")]
	public class HandlerClass1
	{
		// System.Xml.XmlNode.CreateNavigator
		private static bool CallerMethod1(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.get_Item
		private static bool CallerMethod2(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.get_Item
		private static bool CallerMethod3(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.GetPrefixOfNamespace
		private static bool CallerMethod4(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.GetNamespaceOfPrefix
		private static bool CallerMethod5(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.RemoveAll
		private static bool CallerMethod6(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.get_BaseURI
		private static bool CallerMethod7(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.set_InnerXml
		private static bool CallerMethod8(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.get_InnerXml
		private static bool CallerMethod9(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.get_OuterXml
		private static bool CallerMethod10(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.set_InnerText
		private static bool CallerMethod11(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.get_InnerText
		private static bool CallerMethod12(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.Clone
		private static bool CallerMethod13(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.get_IsReadOnly
		private static bool CallerMethod14(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.set_Prefix
		private static bool CallerMethod15(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.get_Prefix
		private static bool CallerMethod16(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.get_NamespaceURI
		private static bool CallerMethod17(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.Supports
		private static bool CallerMethod18(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.Normalize
		private static bool CallerMethod19(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.get_HasChildNodes
		private static bool CallerMethod20(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.AppendChild
		private static bool CallerMethod21(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.PrependChild
		private static bool CallerMethod22(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.RemoveChild
		private static bool CallerMethod23(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.ReplaceChild
		private static bool CallerMethod24(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.InsertAfter
		private static bool CallerMethod25(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.InsertBefore
		private static bool CallerMethod26(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.get_LastChild
		private static bool CallerMethod27(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.get_FirstChild
		private static bool CallerMethod28(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.get_OwnerDocument
		private static bool CallerMethod29(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.get_Attributes
		private static bool CallerMethod30(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.get_NextSibling
		private static bool CallerMethod31(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.get_PreviousSibling
		private static bool CallerMethod32(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.get_ChildNodes
		private static bool CallerMethod33(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.get_ParentNode
		private static bool CallerMethod34(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.set_Value
		private static bool CallerMethod35(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.get_Value
		private static bool CallerMethod36(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.SelectSingleNode
		private static bool CallerMethod37(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.SelectSingleNode
		private static bool CallerMethod38(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.SelectNodes
		private static bool CallerMethod39(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.SelectNodes
		private static bool CallerMethod40(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNode.GetEnumerator
		private static bool CallerMethod41(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Xml.XPath.XPathNavigator CreateNavigator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1), "FILE", "System.Xml.XmlNode.CreateNavigator()", paramObjs, typeof(System.Xml.XPath.XPathNavigator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XPath.XPathNavigator)retValue;
		}

		public static System.Xml.XmlElement get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localname, System.String ns)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localname;
			paramObjs[2] = ns;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2), "FILE", "System.Xml.XmlNode.get_Item(String, String)", paramObjs, typeof(System.Xml.XmlElement), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlElement)retValue;
		}

		public static System.Xml.XmlElement get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod3), "FILE", "System.Xml.XmlNode.get_Item(String)", paramObjs, typeof(System.Xml.XmlElement), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlElement)retValue;
		}

		public static System.String GetPrefixOfNamespace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod4), "FILE", "System.Xml.XmlNode.GetPrefixOfNamespace(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetNamespaceOfPrefix(HeatDotNet.MethodInterceptInfo methodIntercept, System.String prefix)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = prefix;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod5), "FILE", "System.Xml.XmlNode.GetNamespaceOfPrefix(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void RemoveAll(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod6), "FILE", "System.Xml.XmlNode.RemoveAll()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_BaseURI(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod7), "FILE", "System.Xml.XmlNode.get_BaseURI()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_InnerXml(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod8), "FILE", "System.Xml.XmlNode.set_InnerXml(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_InnerXml(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod9), "FILE", "System.Xml.XmlNode.get_InnerXml()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_OuterXml(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod10), "FILE", "System.Xml.XmlNode.get_OuterXml()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_InnerText(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod11), "FILE", "System.Xml.XmlNode.set_InnerText(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_InnerText(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod12), "FILE", "System.Xml.XmlNode.get_InnerText()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNode Clone(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod13), "FILE", "System.Xml.XmlNode.Clone()", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Boolean get_IsReadOnly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod14), "FILE", "System.Xml.XmlNode.get_IsReadOnly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_Prefix(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod15), "FILE", "System.Xml.XmlNode.set_Prefix(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Prefix(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod16), "FILE", "System.Xml.XmlNode.get_Prefix()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_NamespaceURI(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod17), "FILE", "System.Xml.XmlNode.get_NamespaceURI()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean Supports(HeatDotNet.MethodInterceptInfo methodIntercept, System.String feature, System.String version)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = feature;
			paramObjs[2] = version;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod18), "FILE", "System.Xml.XmlNode.Supports(String, String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void Normalize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod19), "FILE", "System.Xml.XmlNode.Normalize()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_HasChildNodes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod20), "FILE", "System.Xml.XmlNode.get_HasChildNodes()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Xml.XmlNode AppendChild(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNode newChild)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = newChild;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod21), "FILE", "System.Xml.XmlNode.AppendChild(XmlNode)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNode PrependChild(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNode newChild)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = newChild;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod22), "FILE", "System.Xml.XmlNode.PrependChild(XmlNode)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNode RemoveChild(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNode oldChild)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = oldChild;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod23), "FILE", "System.Xml.XmlNode.RemoveChild(XmlNode)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNode ReplaceChild(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNode newChild, System.Xml.XmlNode oldChild)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = newChild;
			paramObjs[2] = oldChild;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod24), "FILE", "System.Xml.XmlNode.ReplaceChild(XmlNode, XmlNode)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNode InsertAfter(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNode newChild, System.Xml.XmlNode refChild)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = newChild;
			paramObjs[2] = refChild;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod25), "FILE", "System.Xml.XmlNode.InsertAfter(XmlNode, XmlNode)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNode InsertBefore(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNode newChild, System.Xml.XmlNode refChild)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = newChild;
			paramObjs[2] = refChild;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod26), "FILE", "System.Xml.XmlNode.InsertBefore(XmlNode, XmlNode)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNode get_LastChild(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod27), "FILE", "System.Xml.XmlNode.get_LastChild()", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNode get_FirstChild(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod28), "FILE", "System.Xml.XmlNode.get_FirstChild()", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlDocument get_OwnerDocument(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod29), "FILE", "System.Xml.XmlNode.get_OwnerDocument()", paramObjs, typeof(System.Xml.XmlDocument), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlDocument)retValue;
		}

		public static System.Xml.XmlAttributeCollection get_Attributes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod30), "FILE", "System.Xml.XmlNode.get_Attributes()", paramObjs, typeof(System.Xml.XmlAttributeCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlAttributeCollection)retValue;
		}

		public static System.Xml.XmlNode get_NextSibling(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod31), "FILE", "System.Xml.XmlNode.get_NextSibling()", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNode get_PreviousSibling(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod32), "FILE", "System.Xml.XmlNode.get_PreviousSibling()", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNodeList get_ChildNodes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod33), "FILE", "System.Xml.XmlNode.get_ChildNodes()", paramObjs, typeof(System.Xml.XmlNodeList), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeList)retValue;
		}

		public static System.Xml.XmlNode get_ParentNode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod34), "FILE", "System.Xml.XmlNode.get_ParentNode()", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static void set_Value(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod35), "FILE", "System.Xml.XmlNode.set_Value(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Value(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod36), "FILE", "System.Xml.XmlNode.get_Value()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNode SelectSingleNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.String xpath)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = xpath;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod37), "FILE", "System.Xml.XmlNode.SelectSingleNode(String)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNode SelectSingleNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.String xpath, System.Xml.XmlNamespaceManager nsmgr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = xpath;
			paramObjs[2] = nsmgr;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod38), "FILE", "System.Xml.XmlNode.SelectSingleNode(String, XmlNamespaceManager)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNodeList SelectNodes(HeatDotNet.MethodInterceptInfo methodIntercept, System.String xpath)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = xpath;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod39), "FILE", "System.Xml.XmlNode.SelectNodes(String)", paramObjs, typeof(System.Xml.XmlNodeList), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeList)retValue;
		}

		public static System.Xml.XmlNodeList SelectNodes(HeatDotNet.MethodInterceptInfo methodIntercept, System.String xpath, System.Xml.XmlNamespaceManager nsmgr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = xpath;
			paramObjs[2] = nsmgr;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod40), "FILE", "System.Xml.XmlNode.SelectNodes(String, XmlNamespaceManager)", paramObjs, typeof(System.Xml.XmlNodeList), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeList)retValue;
		}

		public static System.Collections.IEnumerator GetEnumerator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod41), "FILE", "System.Xml.XmlNode.GetEnumerator()", paramObjs, typeof(System.Collections.IEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IEnumerator)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlAttribute")]
	public class HandlerClass2
	{
		// System.Xml.XmlAttribute.get_OwnerElement
		private static bool CallerMethod42(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttribute.get_Specified
		private static bool CallerMethod43(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttribute.WriteContentTo
		private static bool CallerMethod44(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttribute.WriteTo
		private static bool CallerMethod45(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttribute.get_BaseURI
		private static bool CallerMethod46(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttribute.set_InnerXml
		private static bool CallerMethod47(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttribute.get_InnerXml
		private static bool CallerMethod48(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttribute.set_InnerText
		private static bool CallerMethod49(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttribute.get_InnerText
		private static bool CallerMethod50(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttribute.get_LocalName
		private static bool CallerMethod51(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttribute.set_Prefix
		private static bool CallerMethod52(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttribute.get_Prefix
		private static bool CallerMethod53(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttribute.get_NamespaceURI
		private static bool CallerMethod54(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttribute.CloneNode
		private static bool CallerMethod55(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttribute.get_OwnerDocument
		private static bool CallerMethod56(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttribute.get_ParentNode
		private static bool CallerMethod57(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttribute.get_NodeType
		private static bool CallerMethod58(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttribute.set_Value
		private static bool CallerMethod59(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttribute.get_Value
		private static bool CallerMethod60(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttribute.get_Name
		private static bool CallerMethod61(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Xml.XmlElement get_OwnerElement(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod42), "FILE", "System.Xml.XmlAttribute.get_OwnerElement()", paramObjs, typeof(System.Xml.XmlElement), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlElement)retValue;
		}

		public static System.Boolean get_Specified(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod43), "FILE", "System.Xml.XmlAttribute.get_Specified()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void WriteContentTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod44), "FILE", "System.Xml.XmlAttribute.WriteContentTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod45), "FILE", "System.Xml.XmlAttribute.WriteTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_BaseURI(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod46), "FILE", "System.Xml.XmlAttribute.get_BaseURI()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_InnerXml(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod47), "FILE", "System.Xml.XmlAttribute.set_InnerXml(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_InnerXml(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod48), "FILE", "System.Xml.XmlAttribute.get_InnerXml()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_InnerText(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod49), "FILE", "System.Xml.XmlAttribute.set_InnerText(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_InnerText(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod50), "FILE", "System.Xml.XmlAttribute.get_InnerText()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_LocalName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod51), "FILE", "System.Xml.XmlAttribute.get_LocalName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Prefix(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod52), "FILE", "System.Xml.XmlAttribute.set_Prefix(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Prefix(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod53), "FILE", "System.Xml.XmlAttribute.get_Prefix()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_NamespaceURI(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod54), "FILE", "System.Xml.XmlAttribute.get_NamespaceURI()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNode CloneNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean deep)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = deep;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod55), "FILE", "System.Xml.XmlAttribute.CloneNode(Boolean)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlDocument get_OwnerDocument(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod56), "FILE", "System.Xml.XmlAttribute.get_OwnerDocument()", paramObjs, typeof(System.Xml.XmlDocument), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlDocument)retValue;
		}

		public static System.Xml.XmlNode get_ParentNode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod57), "FILE", "System.Xml.XmlAttribute.get_ParentNode()", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNodeType get_NodeType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod58), "FILE", "System.Xml.XmlAttribute.get_NodeType()", paramObjs, typeof(System.Xml.XmlNodeType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeType)retValue;
		}

		public static void set_Value(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod59), "FILE", "System.Xml.XmlAttribute.set_Value(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Value(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod60), "FILE", "System.Xml.XmlAttribute.get_Value()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod61), "FILE", "System.Xml.XmlAttribute.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlNamedNodeMap")]
	public class HandlerClass3
	{
		// System.Xml.XmlNamedNodeMap.GetEnumerator
		private static bool CallerMethod62(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNamedNodeMap.RemoveNamedItem
		private static bool CallerMethod63(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNamedNodeMap.GetNamedItem
		private static bool CallerMethod64(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNamedNodeMap.Item
		private static bool CallerMethod65(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNamedNodeMap.get_Count
		private static bool CallerMethod66(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNamedNodeMap.RemoveNamedItem
		private static bool CallerMethod67(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNamedNodeMap.SetNamedItem
		private static bool CallerMethod68(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNamedNodeMap.GetNamedItem
		private static bool CallerMethod69(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Collections.IEnumerator GetEnumerator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod62), "FILE", "System.Xml.XmlNamedNodeMap.GetEnumerator()", paramObjs, typeof(System.Collections.IEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IEnumerator)retValue;
		}

		public static System.Xml.XmlNode RemoveNamedItem(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod63), "FILE", "System.Xml.XmlNamedNodeMap.RemoveNamedItem(String, String)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNode GetNamedItem(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod64), "FILE", "System.Xml.XmlNamedNodeMap.GetNamedItem(String, String)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNode Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod65), "FILE", "System.Xml.XmlNamedNodeMap.Item(Int32)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Int32 get_Count(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod66), "FILE", "System.Xml.XmlNamedNodeMap.get_Count()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Xml.XmlNode RemoveNamedItem(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod67), "FILE", "System.Xml.XmlNamedNodeMap.RemoveNamedItem(String)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNode SetNamedItem(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNode node)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = node;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod68), "FILE", "System.Xml.XmlNamedNodeMap.SetNamedItem(XmlNode)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNode GetNamedItem(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod69), "FILE", "System.Xml.XmlNamedNodeMap.GetNamedItem(String)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlAttributeCollection")]
	public class HandlerClass4
	{
		// System.Xml.XmlAttributeCollection.RemoveAll
		private static bool CallerMethod70(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttributeCollection.RemoveAt
		private static bool CallerMethod71(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttributeCollection.Remove
		private static bool CallerMethod72(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttributeCollection.InsertAfter
		private static bool CallerMethod73(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttributeCollection.InsertBefore
		private static bool CallerMethod74(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttributeCollection.Append
		private static bool CallerMethod75(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttributeCollection.Prepend
		private static bool CallerMethod76(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttributeCollection.get_ItemOf
		private static bool CallerMethod77(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttributeCollection.get_ItemOf
		private static bool CallerMethod78(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttributeCollection.get_ItemOf
		private static bool CallerMethod79(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttributeCollection.SetNamedItem
		private static bool CallerMethod80(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlAttributeCollection.CopyTo
		private static bool CallerMethod81(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void RemoveAll(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod70), "FILE", "System.Xml.XmlAttributeCollection.RemoveAll()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Xml.XmlAttribute RemoveAt(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 i)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = i;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod71), "FILE", "System.Xml.XmlAttributeCollection.RemoveAt(Int32)", paramObjs, typeof(System.Xml.XmlAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlAttribute)retValue;
		}

		public static System.Xml.XmlAttribute Remove(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlAttribute node)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = node;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod72), "FILE", "System.Xml.XmlAttributeCollection.Remove(XmlAttribute)", paramObjs, typeof(System.Xml.XmlAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlAttribute)retValue;
		}

		public static System.Xml.XmlAttribute InsertAfter(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlAttribute newNode, System.Xml.XmlAttribute refNode)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = newNode;
			paramObjs[2] = refNode;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod73), "FILE", "System.Xml.XmlAttributeCollection.InsertAfter(XmlAttribute, XmlAttribute)", paramObjs, typeof(System.Xml.XmlAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlAttribute)retValue;
		}

		public static System.Xml.XmlAttribute InsertBefore(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlAttribute newNode, System.Xml.XmlAttribute refNode)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = newNode;
			paramObjs[2] = refNode;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod74), "FILE", "System.Xml.XmlAttributeCollection.InsertBefore(XmlAttribute, XmlAttribute)", paramObjs, typeof(System.Xml.XmlAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlAttribute)retValue;
		}

		public static System.Xml.XmlAttribute Append(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlAttribute node)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = node;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod75), "FILE", "System.Xml.XmlAttributeCollection.Append(XmlAttribute)", paramObjs, typeof(System.Xml.XmlAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlAttribute)retValue;
		}

		public static System.Xml.XmlAttribute Prepend(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlAttribute node)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = node;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod76), "FILE", "System.Xml.XmlAttributeCollection.Prepend(XmlAttribute)", paramObjs, typeof(System.Xml.XmlAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlAttribute)retValue;
		}

		public static System.Xml.XmlAttribute get_ItemOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod77), "FILE", "System.Xml.XmlAttributeCollection.get_ItemOf(String, String)", paramObjs, typeof(System.Xml.XmlAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlAttribute)retValue;
		}

		public static System.Xml.XmlAttribute get_ItemOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod78), "FILE", "System.Xml.XmlAttributeCollection.get_ItemOf(String)", paramObjs, typeof(System.Xml.XmlAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlAttribute)retValue;
		}

		public static System.Xml.XmlAttribute get_ItemOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 i)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = i;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod79), "FILE", "System.Xml.XmlAttributeCollection.get_ItemOf(Int32)", paramObjs, typeof(System.Xml.XmlAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlAttribute)retValue;
		}

		public static System.Xml.XmlNode SetNamedItem(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNode node)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = node;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod80), "FILE", "System.Xml.XmlAttributeCollection.SetNamedItem(XmlNode)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static void CopyTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlAttribute[] array, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = index;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod81), "FILE", "System.Xml.XmlAttributeCollection.CopyTo(XmlAttribute[], Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlLinkedNode")]
	public class HandlerClass5
	{
		// System.Xml.XmlLinkedNode.get_NextSibling
		private static bool CallerMethod82(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlLinkedNode.get_PreviousSibling
		private static bool CallerMethod83(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Xml.XmlNode get_NextSibling(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod82), "FILE", "System.Xml.XmlLinkedNode.get_NextSibling()", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNode get_PreviousSibling(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod83), "FILE", "System.Xml.XmlLinkedNode.get_PreviousSibling()", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlCharacterData")]
	public class HandlerClass6
	{
		// System.Xml.XmlCharacterData.ReplaceData
		private static bool CallerMethod84(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlCharacterData.DeleteData
		private static bool CallerMethod85(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlCharacterData.InsertData
		private static bool CallerMethod86(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlCharacterData.AppendData
		private static bool CallerMethod87(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlCharacterData.Substring
		private static bool CallerMethod88(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlCharacterData.get_Length
		private static bool CallerMethod89(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlCharacterData.set_Data
		private static bool CallerMethod90(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlCharacterData.get_Data
		private static bool CallerMethod91(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlCharacterData.set_InnerText
		private static bool CallerMethod92(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlCharacterData.get_InnerText
		private static bool CallerMethod93(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlCharacterData.set_Value
		private static bool CallerMethod94(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlCharacterData.get_Value
		private static bool CallerMethod95(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void ReplaceData(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 offset, System.Int32 count, System.String strData)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = offset;
			paramObjs[2] = count;
			paramObjs[3] = strData;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod84), "FILE", "System.Xml.XmlCharacterData.ReplaceData(Int32, Int32, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void DeleteData(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 offset, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = offset;
			paramObjs[2] = count;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod85), "FILE", "System.Xml.XmlCharacterData.DeleteData(Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void InsertData(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 offset, System.String strData)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = offset;
			paramObjs[2] = strData;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod86), "FILE", "System.Xml.XmlCharacterData.InsertData(Int32, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AppendData(HeatDotNet.MethodInterceptInfo methodIntercept, System.String strData)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = strData;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod87), "FILE", "System.Xml.XmlCharacterData.AppendData(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String Substring(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 offset, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = offset;
			paramObjs[2] = count;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod88), "FILE", "System.Xml.XmlCharacterData.Substring(Int32, Int32)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_Length(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod89), "FILE", "System.Xml.XmlCharacterData.get_Length()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_Data(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod90), "FILE", "System.Xml.XmlCharacterData.set_Data(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Data(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod91), "FILE", "System.Xml.XmlCharacterData.get_Data()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_InnerText(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod92), "FILE", "System.Xml.XmlCharacterData.set_InnerText(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_InnerText(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod93), "FILE", "System.Xml.XmlCharacterData.get_InnerText()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Value(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod94), "FILE", "System.Xml.XmlCharacterData.set_Value(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Value(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod95), "FILE", "System.Xml.XmlCharacterData.get_Value()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlCDataSection")]
	public class HandlerClass7
	{
		// System.Xml.XmlCDataSection.WriteContentTo
		private static bool CallerMethod96(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlCDataSection.WriteTo
		private static bool CallerMethod97(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlCDataSection.get_LocalName
		private static bool CallerMethod98(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlCDataSection.CloneNode
		private static bool CallerMethod99(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlCDataSection.get_NodeType
		private static bool CallerMethod100(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlCDataSection.get_Name
		private static bool CallerMethod101(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void WriteContentTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod96), "FILE", "System.Xml.XmlCDataSection.WriteContentTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod97), "FILE", "System.Xml.XmlCDataSection.WriteTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_LocalName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod98), "FILE", "System.Xml.XmlCDataSection.get_LocalName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNode CloneNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean deep)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = deep;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod99), "FILE", "System.Xml.XmlCDataSection.CloneNode(Boolean)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNodeType get_NodeType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod100), "FILE", "System.Xml.XmlCDataSection.get_NodeType()", paramObjs, typeof(System.Xml.XmlNodeType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeType)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod101), "FILE", "System.Xml.XmlCDataSection.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlNodeList")]
	public class HandlerClass8
	{
		// System.Xml.XmlNodeList.get_ItemOf
		private static bool CallerMethod102(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Xml.XmlNode get_ItemOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 i)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = i;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod102), "FILE", "System.Xml.XmlNodeList.get_ItemOf(Int32)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlComment")]
	public class HandlerClass9
	{
		// System.Xml.XmlComment.WriteContentTo
		private static bool CallerMethod103(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlComment.WriteTo
		private static bool CallerMethod104(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlComment.get_LocalName
		private static bool CallerMethod105(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlComment.CloneNode
		private static bool CallerMethod106(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlComment.get_NodeType
		private static bool CallerMethod107(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlComment.get_Name
		private static bool CallerMethod108(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void WriteContentTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod103), "FILE", "System.Xml.XmlComment.WriteContentTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod104), "FILE", "System.Xml.XmlComment.WriteTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_LocalName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod105), "FILE", "System.Xml.XmlComment.get_LocalName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNode CloneNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean deep)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = deep;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod106), "FILE", "System.Xml.XmlComment.CloneNode(Boolean)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNodeType get_NodeType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod107), "FILE", "System.Xml.XmlComment.get_NodeType()", paramObjs, typeof(System.Xml.XmlNodeType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeType)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod108), "FILE", "System.Xml.XmlComment.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlConvert")]
	public class HandlerClass10
	{
		// System.Xml.XmlConvert.EncodeName
		private static bool CallerMethod109(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.EncodeNmToken
		private static bool CallerMethod110(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.EncodeLocalName
		private static bool CallerMethod111(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.DecodeName
		private static bool CallerMethod112(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.VerifyName
		private static bool CallerMethod113(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.VerifyNCName
		private static bool CallerMethod114(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToString
		private static bool CallerMethod115(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToString
		private static bool CallerMethod116(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToString
		private static bool CallerMethod117(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToString
		private static bool CallerMethod118(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToString
		private static bool CallerMethod119(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToString
		private static bool CallerMethod120(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToString
		private static bool CallerMethod121(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToString
		private static bool CallerMethod122(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToString
		private static bool CallerMethod123(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToString
		private static bool CallerMethod124(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToString
		private static bool CallerMethod125(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToString
		private static bool CallerMethod126(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToString
		private static bool CallerMethod127(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToString
		private static bool CallerMethod128(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToString
		private static bool CallerMethod129(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToString
		private static bool CallerMethod130(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToString
		private static bool CallerMethod131(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToBoolean
		private static bool CallerMethod132(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToChar
		private static bool CallerMethod133(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToDecimal
		private static bool CallerMethod134(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToSByte
		private static bool CallerMethod135(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToInt16
		private static bool CallerMethod136(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToInt32
		private static bool CallerMethod137(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToInt64
		private static bool CallerMethod138(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToByte
		private static bool CallerMethod139(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToUInt16
		private static bool CallerMethod140(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToUInt32
		private static bool CallerMethod141(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToUInt64
		private static bool CallerMethod142(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToSingle
		private static bool CallerMethod143(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToDouble
		private static bool CallerMethod144(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToTimeSpan
		private static bool CallerMethod145(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToDateTime
		private static bool CallerMethod146(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToDateTime
		private static bool CallerMethod147(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToDateTime
		private static bool CallerMethod148(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert.ToGuid
		private static bool CallerMethod149(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlConvert..ctor
		private static bool CallerMethod150(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String EncodeName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod109), "FILE", "System.Xml.XmlConvert.EncodeName(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String EncodeNmToken(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod110), "FILE", "System.Xml.XmlConvert.EncodeNmToken(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String EncodeLocalName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod111), "FILE", "System.Xml.XmlConvert.EncodeLocalName(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String DecodeName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod112), "FILE", "System.Xml.XmlConvert.DecodeName(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String VerifyName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod113), "FILE", "System.Xml.XmlConvert.VerifyName(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String VerifyNCName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod114), "FILE", "System.Xml.XmlConvert.VerifyNCName(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod115), "FILE", "System.Xml.XmlConvert.ToString(Boolean)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod116), "FILE", "System.Xml.XmlConvert.ToString(Char)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.Decimal value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod117), "FILE", "System.Xml.XmlConvert.ToString(Decimal)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.SByte value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod118), "FILE", "System.Xml.XmlConvert.ToString(SByte)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int16 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod119), "FILE", "System.Xml.XmlConvert.ToString(Int16)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod120), "FILE", "System.Xml.XmlConvert.ToString(Int32)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod121), "FILE", "System.Xml.XmlConvert.ToString(Int64)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod122), "FILE", "System.Xml.XmlConvert.ToString(Byte)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.UInt16 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod123), "FILE", "System.Xml.XmlConvert.ToString(UInt16)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.UInt32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod124), "FILE", "System.Xml.XmlConvert.ToString(UInt32)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.UInt64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod125), "FILE", "System.Xml.XmlConvert.ToString(UInt64)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.Single value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod126), "FILE", "System.Xml.XmlConvert.ToString(Single)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.Double value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod127), "FILE", "System.Xml.XmlConvert.ToString(Double)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.TimeSpan value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod128), "FILE", "System.Xml.XmlConvert.ToString(TimeSpan)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod129), "FILE", "System.Xml.XmlConvert.ToString(DateTime)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime value, System.String format)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			paramObjs[2] = format;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod130), "FILE", "System.Xml.XmlConvert.ToString(DateTime, String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.Guid value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod131), "FILE", "System.Xml.XmlConvert.ToString(Guid)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean ToBoolean(HeatDotNet.MethodInterceptInfo methodIntercept, System.String s)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = s;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod132), "FILE", "System.Xml.XmlConvert.ToBoolean(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Char ToChar(HeatDotNet.MethodInterceptInfo methodIntercept, System.String s)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = s;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod133), "FILE", "System.Xml.XmlConvert.ToChar(String)", paramObjs, typeof(System.Char), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Char)retValue;
		}

		public static System.Decimal ToDecimal(HeatDotNet.MethodInterceptInfo methodIntercept, System.String s)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = s;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod134), "FILE", "System.Xml.XmlConvert.ToDecimal(String)", paramObjs, typeof(System.Decimal), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Decimal)retValue;
		}

		public static System.SByte ToSByte(HeatDotNet.MethodInterceptInfo methodIntercept, System.String s)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = s;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod135), "FILE", "System.Xml.XmlConvert.ToSByte(String)", paramObjs, typeof(System.SByte), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.SByte)retValue;
		}

		public static System.Int16 ToInt16(HeatDotNet.MethodInterceptInfo methodIntercept, System.String s)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = s;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod136), "FILE", "System.Xml.XmlConvert.ToInt16(String)", paramObjs, typeof(System.Int16), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int16)retValue;
		}

		public static System.Int32 ToInt32(HeatDotNet.MethodInterceptInfo methodIntercept, System.String s)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = s;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod137), "FILE", "System.Xml.XmlConvert.ToInt32(String)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int64 ToInt64(HeatDotNet.MethodInterceptInfo methodIntercept, System.String s)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = s;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod138), "FILE", "System.Xml.XmlConvert.ToInt64(String)", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.Byte ToByte(HeatDotNet.MethodInterceptInfo methodIntercept, System.String s)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = s;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod139), "FILE", "System.Xml.XmlConvert.ToByte(String)", paramObjs, typeof(System.Byte), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte)retValue;
		}

		public static System.UInt16 ToUInt16(HeatDotNet.MethodInterceptInfo methodIntercept, System.String s)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = s;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod140), "FILE", "System.Xml.XmlConvert.ToUInt16(String)", paramObjs, typeof(System.UInt16), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.UInt16)retValue;
		}

		public static System.UInt32 ToUInt32(HeatDotNet.MethodInterceptInfo methodIntercept, System.String s)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = s;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod141), "FILE", "System.Xml.XmlConvert.ToUInt32(String)", paramObjs, typeof(System.UInt32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.UInt32)retValue;
		}

		public static System.UInt64 ToUInt64(HeatDotNet.MethodInterceptInfo methodIntercept, System.String s)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = s;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod142), "FILE", "System.Xml.XmlConvert.ToUInt64(String)", paramObjs, typeof(System.UInt64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.UInt64)retValue;
		}

		public static System.Single ToSingle(HeatDotNet.MethodInterceptInfo methodIntercept, System.String s)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = s;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod143), "FILE", "System.Xml.XmlConvert.ToSingle(String)", paramObjs, typeof(System.Single), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Single)retValue;
		}

		public static System.Double ToDouble(HeatDotNet.MethodInterceptInfo methodIntercept, System.String s)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = s;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod144), "FILE", "System.Xml.XmlConvert.ToDouble(String)", paramObjs, typeof(System.Double), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Double)retValue;
		}

		public static System.TimeSpan ToTimeSpan(HeatDotNet.MethodInterceptInfo methodIntercept, System.String s)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = s;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod145), "FILE", "System.Xml.XmlConvert.ToTimeSpan(String)", paramObjs, typeof(System.TimeSpan), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.TimeSpan)retValue;
		}

		public static System.DateTime ToDateTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.String s)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = s;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod146), "FILE", "System.Xml.XmlConvert.ToDateTime(String)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime ToDateTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.String s, System.String format)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = s;
			paramObjs[2] = format;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod147), "FILE", "System.Xml.XmlConvert.ToDateTime(String, String)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime ToDateTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.String s, System.String[] formats)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = s;
			paramObjs[2] = formats;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod148), "FILE", "System.Xml.XmlConvert.ToDateTime(String, String[])", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.Guid ToGuid(HeatDotNet.MethodInterceptInfo methodIntercept, System.String s)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = s;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod149), "FILE", "System.Xml.XmlConvert.ToGuid(String)", paramObjs, typeof(System.Guid), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Guid)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod150), "FILE", "System.Xml.XmlConvert.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlDeclaration")]
	public class HandlerClass11
	{
		// System.Xml.XmlDeclaration.WriteContentTo
		private static bool CallerMethod151(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDeclaration.WriteTo
		private static bool CallerMethod152(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDeclaration.set_InnerText
		private static bool CallerMethod153(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDeclaration.get_InnerText
		private static bool CallerMethod154(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDeclaration.get_LocalName
		private static bool CallerMethod155(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDeclaration.CloneNode
		private static bool CallerMethod156(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDeclaration.get_NodeType
		private static bool CallerMethod157(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDeclaration.set_Value
		private static bool CallerMethod158(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDeclaration.get_Value
		private static bool CallerMethod159(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDeclaration.get_Name
		private static bool CallerMethod160(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDeclaration.get_Version
		private static bool CallerMethod161(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDeclaration.get_Encoding
		private static bool CallerMethod162(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDeclaration.set_Encoding
		private static bool CallerMethod163(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDeclaration.get_Standalone
		private static bool CallerMethod164(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDeclaration.set_Standalone
		private static bool CallerMethod165(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void WriteContentTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod151), "FILE", "System.Xml.XmlDeclaration.WriteContentTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod152), "FILE", "System.Xml.XmlDeclaration.WriteTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_InnerText(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod153), "FILE", "System.Xml.XmlDeclaration.set_InnerText(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_InnerText(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod154), "FILE", "System.Xml.XmlDeclaration.get_InnerText()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_LocalName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod155), "FILE", "System.Xml.XmlDeclaration.get_LocalName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNode CloneNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean deep)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = deep;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod156), "FILE", "System.Xml.XmlDeclaration.CloneNode(Boolean)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNodeType get_NodeType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod157), "FILE", "System.Xml.XmlDeclaration.get_NodeType()", paramObjs, typeof(System.Xml.XmlNodeType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeType)retValue;
		}

		public static void set_Value(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod158), "FILE", "System.Xml.XmlDeclaration.set_Value(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Value(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod159), "FILE", "System.Xml.XmlDeclaration.get_Value()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod160), "FILE", "System.Xml.XmlDeclaration.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Version(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod161), "FILE", "System.Xml.XmlDeclaration.get_Version()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Encoding(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod162), "FILE", "System.Xml.XmlDeclaration.get_Encoding()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Encoding(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod163), "FILE", "System.Xml.XmlDeclaration.set_Encoding(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Standalone(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod164), "FILE", "System.Xml.XmlDeclaration.get_Standalone()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Standalone(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod165), "FILE", "System.Xml.XmlDeclaration.set_Standalone(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlDocument")]
	public class HandlerClass12
	{
		// System.Xml.XmlDocument.Save
		private static bool CallerMethod166(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.Save
		private static bool CallerMethod167(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.Save
		private static bool CallerMethod168(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.Save
		private static bool CallerMethod169(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.LoadXml
		private static bool CallerMethod170(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.Load
		private static bool CallerMethod171(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.Load
		private static bool CallerMethod172(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.Load
		private static bool CallerMethod173(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.Load
		private static bool CallerMethod174(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.ReadNode
		private static bool CallerMethod175(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.CreateNode
		private static bool CallerMethod176(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.CreateNode
		private static bool CallerMethod177(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.CreateNode
		private static bool CallerMethod178(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.CreateElement
		private static bool CallerMethod179(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.CreateAttribute
		private static bool CallerMethod180(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.ImportNode
		private static bool CallerMethod181(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.GetElementById
		private static bool CallerMethod182(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.GetElementsByTagName
		private static bool CallerMethod183(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.GetElementsByTagName
		private static bool CallerMethod184(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.CreateWhitespace
		private static bool CallerMethod185(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.CreateSignificantWhitespace
		private static bool CallerMethod186(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.CreateTextNode
		private static bool CallerMethod187(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.CreateXmlDeclaration
		private static bool CallerMethod188(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.CreateProcessingInstruction
		private static bool CallerMethod189(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.CreateEntityReference
		private static bool CallerMethod190(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.CreateDocumentFragment
		private static bool CallerMethod191(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.CreateDocumentType
		private static bool CallerMethod192(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.CreateComment
		private static bool CallerMethod193(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.CreateCDataSection
		private static bool CallerMethod194(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.set_XmlResolver
		private static bool CallerMethod195(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.get_DocumentType
		private static bool CallerMethod196(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.WriteContentTo
		private static bool CallerMethod197(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.WriteTo
		private static bool CallerMethod198(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.get_BaseURI
		private static bool CallerMethod199(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.set_InnerXml
		private static bool CallerMethod200(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.get_InnerXml
		private static bool CallerMethod201(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.get_IsReadOnly
		private static bool CallerMethod202(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.get_LocalName
		private static bool CallerMethod203(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.CloneNode
		private static bool CallerMethod204(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.get_OwnerDocument
		private static bool CallerMethod205(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.get_NodeType
		private static bool CallerMethod206(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.get_Name
		private static bool CallerMethod207(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.get_Implementation
		private static bool CallerMethod208(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.get_DocumentElement
		private static bool CallerMethod209(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.CreateAttribute
		private static bool CallerMethod210(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.CreateElement
		private static bool CallerMethod211(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.CreateAttribute
		private static bool CallerMethod212(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.CreateElement
		private static bool CallerMethod213(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.get_NameTable
		private static bool CallerMethod214(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.get_PreserveWhitespace
		private static bool CallerMethod215(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.set_PreserveWhitespace
		private static bool CallerMethod216(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.add_NodeInserting
		private static bool CallerMethod217(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.remove_NodeInserting
		private static bool CallerMethod218(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.add_NodeInserted
		private static bool CallerMethod219(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.remove_NodeInserted
		private static bool CallerMethod220(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.add_NodeRemoving
		private static bool CallerMethod221(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.remove_NodeRemoving
		private static bool CallerMethod222(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.add_NodeRemoved
		private static bool CallerMethod223(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.remove_NodeRemoved
		private static bool CallerMethod224(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.add_NodeChanging
		private static bool CallerMethod225(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.remove_NodeChanging
		private static bool CallerMethod226(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.add_NodeChanged
		private static bool CallerMethod227(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument.remove_NodeChanged
		private static bool CallerMethod228(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument..ctor
		private static bool CallerMethod229(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocument..ctor
		private static bool CallerMethod230(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Save(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod166), "FILE", "System.Xml.XmlDocument.Save(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Save(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.TextWriter writer)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = writer;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod167), "FILE", "System.Xml.XmlDocument.Save(TextWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Save(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.Stream outStream)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = outStream;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod168), "FILE", "System.Xml.XmlDocument.Save(Stream)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Save(HeatDotNet.MethodInterceptInfo methodIntercept, System.String filename)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = filename;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod169), "FILE", "System.Xml.XmlDocument.Save(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void LoadXml(HeatDotNet.MethodInterceptInfo methodIntercept, System.String xml)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = xml;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod170), "FILE", "System.Xml.XmlDocument.LoadXml(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Load(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlReader reader)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = reader;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod171), "FILE", "System.Xml.XmlDocument.Load(XmlReader)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Load(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.TextReader txtReader)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = txtReader;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod172), "FILE", "System.Xml.XmlDocument.Load(TextReader)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Load(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.Stream inStream)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inStream;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod173), "FILE", "System.Xml.XmlDocument.Load(Stream)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Load(HeatDotNet.MethodInterceptInfo methodIntercept, System.String filename)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = filename;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod174), "FILE", "System.Xml.XmlDocument.Load(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Xml.XmlNode ReadNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlReader reader)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = reader;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod175), "FILE", "System.Xml.XmlDocument.ReadNode(XmlReader)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNode CreateNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNodeType type, System.String name, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			paramObjs[2] = name;
			paramObjs[3] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod176), "FILE", "System.Xml.XmlDocument.CreateNode(XmlNodeType, String, String)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNode CreateNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.String nodeTypeString, System.String name, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = nodeTypeString;
			paramObjs[2] = name;
			paramObjs[3] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod177), "FILE", "System.Xml.XmlDocument.CreateNode(String, String, String)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNode CreateNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNodeType type, System.String prefix, System.String name, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			paramObjs[2] = prefix;
			paramObjs[3] = name;
			paramObjs[4] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod178), "FILE", "System.Xml.XmlDocument.CreateNode(XmlNodeType, String, String, String)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlElement CreateElement(HeatDotNet.MethodInterceptInfo methodIntercept, System.String prefix, System.String localName, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = prefix;
			paramObjs[2] = localName;
			paramObjs[3] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod179), "FILE", "System.Xml.XmlDocument.CreateElement(String, String, String)", paramObjs, typeof(System.Xml.XmlElement), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlElement)retValue;
		}

		public static System.Xml.XmlAttribute CreateAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String prefix, System.String localName, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = prefix;
			paramObjs[2] = localName;
			paramObjs[3] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod180), "FILE", "System.Xml.XmlDocument.CreateAttribute(String, String, String)", paramObjs, typeof(System.Xml.XmlAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlAttribute)retValue;
		}

		public static System.Xml.XmlNode ImportNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNode node, System.Boolean deep)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = node;
			paramObjs[2] = deep;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod181), "FILE", "System.Xml.XmlDocument.ImportNode(XmlNode, Boolean)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlElement GetElementById(HeatDotNet.MethodInterceptInfo methodIntercept, System.String elementId)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = elementId;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod182), "FILE", "System.Xml.XmlDocument.GetElementById(String)", paramObjs, typeof(System.Xml.XmlElement), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlElement)retValue;
		}

		public static System.Xml.XmlNodeList GetElementsByTagName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod183), "FILE", "System.Xml.XmlDocument.GetElementsByTagName(String, String)", paramObjs, typeof(System.Xml.XmlNodeList), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeList)retValue;
		}

		public static System.Xml.XmlNodeList GetElementsByTagName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod184), "FILE", "System.Xml.XmlDocument.GetElementsByTagName(String)", paramObjs, typeof(System.Xml.XmlNodeList), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeList)retValue;
		}

		public static System.Xml.XmlWhitespace CreateWhitespace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String text)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = text;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod185), "FILE", "System.Xml.XmlDocument.CreateWhitespace(String)", paramObjs, typeof(System.Xml.XmlWhitespace), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlWhitespace)retValue;
		}

		public static System.Xml.XmlSignificantWhitespace CreateSignificantWhitespace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String text)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = text;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod186), "FILE", "System.Xml.XmlDocument.CreateSignificantWhitespace(String)", paramObjs, typeof(System.Xml.XmlSignificantWhitespace), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlSignificantWhitespace)retValue;
		}

		public static System.Xml.XmlText CreateTextNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.String text)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = text;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod187), "FILE", "System.Xml.XmlDocument.CreateTextNode(String)", paramObjs, typeof(System.Xml.XmlText), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlText)retValue;
		}

		public static System.Xml.XmlDeclaration CreateXmlDeclaration(HeatDotNet.MethodInterceptInfo methodIntercept, System.String version, System.String encoding, System.String standalone)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = version;
			paramObjs[2] = encoding;
			paramObjs[3] = standalone;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod188), "FILE", "System.Xml.XmlDocument.CreateXmlDeclaration(String, String, String)", paramObjs, typeof(System.Xml.XmlDeclaration), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlDeclaration)retValue;
		}

		public static System.Xml.XmlProcessingInstruction CreateProcessingInstruction(HeatDotNet.MethodInterceptInfo methodIntercept, System.String target, System.String data)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = target;
			paramObjs[2] = data;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod189), "FILE", "System.Xml.XmlDocument.CreateProcessingInstruction(String, String)", paramObjs, typeof(System.Xml.XmlProcessingInstruction), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlProcessingInstruction)retValue;
		}

		public static System.Xml.XmlEntityReference CreateEntityReference(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod190), "FILE", "System.Xml.XmlDocument.CreateEntityReference(String)", paramObjs, typeof(System.Xml.XmlEntityReference), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlEntityReference)retValue;
		}

		public static System.Xml.XmlDocumentFragment CreateDocumentFragment(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod191), "FILE", "System.Xml.XmlDocument.CreateDocumentFragment()", paramObjs, typeof(System.Xml.XmlDocumentFragment), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlDocumentFragment)retValue;
		}

		public static System.Xml.XmlDocumentType CreateDocumentType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String publicId, System.String systemId, System.String internalSubset)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = publicId;
			paramObjs[3] = systemId;
			paramObjs[4] = internalSubset;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod192), "FILE", "System.Xml.XmlDocument.CreateDocumentType(String, String, String, String)", paramObjs, typeof(System.Xml.XmlDocumentType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlDocumentType)retValue;
		}

		public static System.Xml.XmlComment CreateComment(HeatDotNet.MethodInterceptInfo methodIntercept, System.String data)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = data;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod193), "FILE", "System.Xml.XmlDocument.CreateComment(String)", paramObjs, typeof(System.Xml.XmlComment), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlComment)retValue;
		}

		public static System.Xml.XmlCDataSection CreateCDataSection(HeatDotNet.MethodInterceptInfo methodIntercept, System.String data)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = data;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod194), "FILE", "System.Xml.XmlDocument.CreateCDataSection(String)", paramObjs, typeof(System.Xml.XmlCDataSection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlCDataSection)retValue;
		}

		public static void set_XmlResolver(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlResolver value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod195), "FILE", "System.Xml.XmlDocument.set_XmlResolver(XmlResolver)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Xml.XmlDocumentType get_DocumentType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod196), "FILE", "System.Xml.XmlDocument.get_DocumentType()", paramObjs, typeof(System.Xml.XmlDocumentType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlDocumentType)retValue;
		}

		public static void WriteContentTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter xw)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = xw;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod197), "FILE", "System.Xml.XmlDocument.WriteContentTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod198), "FILE", "System.Xml.XmlDocument.WriteTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_BaseURI(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod199), "FILE", "System.Xml.XmlDocument.get_BaseURI()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_InnerXml(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod200), "FILE", "System.Xml.XmlDocument.set_InnerXml(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_InnerXml(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod201), "FILE", "System.Xml.XmlDocument.get_InnerXml()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean get_IsReadOnly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod202), "FILE", "System.Xml.XmlDocument.get_IsReadOnly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_LocalName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod203), "FILE", "System.Xml.XmlDocument.get_LocalName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNode CloneNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean deep)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = deep;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod204), "FILE", "System.Xml.XmlDocument.CloneNode(Boolean)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlDocument get_OwnerDocument(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod205), "FILE", "System.Xml.XmlDocument.get_OwnerDocument()", paramObjs, typeof(System.Xml.XmlDocument), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlDocument)retValue;
		}

		public static System.Xml.XmlNodeType get_NodeType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod206), "FILE", "System.Xml.XmlDocument.get_NodeType()", paramObjs, typeof(System.Xml.XmlNodeType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeType)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod207), "FILE", "System.Xml.XmlDocument.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlImplementation get_Implementation(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod208), "FILE", "System.Xml.XmlDocument.get_Implementation()", paramObjs, typeof(System.Xml.XmlImplementation), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlImplementation)retValue;
		}

		public static System.Xml.XmlElement get_DocumentElement(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod209), "FILE", "System.Xml.XmlDocument.get_DocumentElement()", paramObjs, typeof(System.Xml.XmlElement), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlElement)retValue;
		}

		public static System.Xml.XmlAttribute CreateAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod210), "FILE", "System.Xml.XmlDocument.CreateAttribute(String)", paramObjs, typeof(System.Xml.XmlAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlAttribute)retValue;
		}

		public static System.Xml.XmlElement CreateElement(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod211), "FILE", "System.Xml.XmlDocument.CreateElement(String)", paramObjs, typeof(System.Xml.XmlElement), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlElement)retValue;
		}

		public static System.Xml.XmlAttribute CreateAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String qualifiedName, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = qualifiedName;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod212), "FILE", "System.Xml.XmlDocument.CreateAttribute(String, String)", paramObjs, typeof(System.Xml.XmlAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlAttribute)retValue;
		}

		public static System.Xml.XmlElement CreateElement(HeatDotNet.MethodInterceptInfo methodIntercept, System.String qualifiedName, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = qualifiedName;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod213), "FILE", "System.Xml.XmlDocument.CreateElement(String, String)", paramObjs, typeof(System.Xml.XmlElement), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlElement)retValue;
		}

		public static System.Xml.XmlNameTable get_NameTable(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod214), "FILE", "System.Xml.XmlDocument.get_NameTable()", paramObjs, typeof(System.Xml.XmlNameTable), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNameTable)retValue;
		}

		public static System.Boolean get_PreserveWhitespace(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod215), "FILE", "System.Xml.XmlDocument.get_PreserveWhitespace()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_PreserveWhitespace(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod216), "FILE", "System.Xml.XmlDocument.set_PreserveWhitespace(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void add_NodeInserting(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNodeChangedEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod217), "FILE", "System.Xml.XmlDocument.add_NodeInserting(XmlNodeChangedEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void remove_NodeInserting(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNodeChangedEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod218), "FILE", "System.Xml.XmlDocument.remove_NodeInserting(XmlNodeChangedEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void add_NodeInserted(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNodeChangedEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod219), "FILE", "System.Xml.XmlDocument.add_NodeInserted(XmlNodeChangedEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void remove_NodeInserted(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNodeChangedEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod220), "FILE", "System.Xml.XmlDocument.remove_NodeInserted(XmlNodeChangedEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void add_NodeRemoving(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNodeChangedEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod221), "FILE", "System.Xml.XmlDocument.add_NodeRemoving(XmlNodeChangedEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void remove_NodeRemoving(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNodeChangedEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod222), "FILE", "System.Xml.XmlDocument.remove_NodeRemoving(XmlNodeChangedEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void add_NodeRemoved(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNodeChangedEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod223), "FILE", "System.Xml.XmlDocument.add_NodeRemoved(XmlNodeChangedEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void remove_NodeRemoved(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNodeChangedEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod224), "FILE", "System.Xml.XmlDocument.remove_NodeRemoved(XmlNodeChangedEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void add_NodeChanging(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNodeChangedEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod225), "FILE", "System.Xml.XmlDocument.add_NodeChanging(XmlNodeChangedEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void remove_NodeChanging(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNodeChangedEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod226), "FILE", "System.Xml.XmlDocument.remove_NodeChanging(XmlNodeChangedEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void add_NodeChanged(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNodeChangedEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod227), "FILE", "System.Xml.XmlDocument.add_NodeChanged(XmlNodeChangedEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void remove_NodeChanged(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNodeChangedEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod228), "FILE", "System.Xml.XmlDocument.remove_NodeChanged(XmlNodeChangedEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod229), "FILE", "System.Xml.XmlDocument.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Xml.XmlNameTable nt)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = nt;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod230), "FILE", "System.Xml.XmlDocument.ctor(XmlNameTable)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlDocumentFragment")]
	public class HandlerClass13
	{
		// System.Xml.XmlDocumentFragment.WriteContentTo
		private static bool CallerMethod231(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocumentFragment.WriteTo
		private static bool CallerMethod232(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocumentFragment.set_InnerXml
		private static bool CallerMethod233(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocumentFragment.get_InnerXml
		private static bool CallerMethod234(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocumentFragment.get_LocalName
		private static bool CallerMethod235(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocumentFragment.CloneNode
		private static bool CallerMethod236(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocumentFragment.get_OwnerDocument
		private static bool CallerMethod237(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocumentFragment.get_ParentNode
		private static bool CallerMethod238(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocumentFragment.get_NodeType
		private static bool CallerMethod239(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocumentFragment.get_Name
		private static bool CallerMethod240(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void WriteContentTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod231), "FILE", "System.Xml.XmlDocumentFragment.WriteContentTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod232), "FILE", "System.Xml.XmlDocumentFragment.WriteTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_InnerXml(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod233), "FILE", "System.Xml.XmlDocumentFragment.set_InnerXml(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_InnerXml(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod234), "FILE", "System.Xml.XmlDocumentFragment.get_InnerXml()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_LocalName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod235), "FILE", "System.Xml.XmlDocumentFragment.get_LocalName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNode CloneNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean deep)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = deep;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod236), "FILE", "System.Xml.XmlDocumentFragment.CloneNode(Boolean)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlDocument get_OwnerDocument(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod237), "FILE", "System.Xml.XmlDocumentFragment.get_OwnerDocument()", paramObjs, typeof(System.Xml.XmlDocument), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlDocument)retValue;
		}

		public static System.Xml.XmlNode get_ParentNode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod238), "FILE", "System.Xml.XmlDocumentFragment.get_ParentNode()", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNodeType get_NodeType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod239), "FILE", "System.Xml.XmlDocumentFragment.get_NodeType()", paramObjs, typeof(System.Xml.XmlNodeType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeType)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod240), "FILE", "System.Xml.XmlDocumentFragment.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlDocumentType")]
	public class HandlerClass14
	{
		// System.Xml.XmlDocumentType.WriteContentTo
		private static bool CallerMethod241(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocumentType.WriteTo
		private static bool CallerMethod242(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocumentType.get_IsReadOnly
		private static bool CallerMethod243(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocumentType.get_LocalName
		private static bool CallerMethod244(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocumentType.CloneNode
		private static bool CallerMethod245(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocumentType.get_NodeType
		private static bool CallerMethod246(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocumentType.get_Name
		private static bool CallerMethod247(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocumentType.get_Entities
		private static bool CallerMethod248(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocumentType.get_Notations
		private static bool CallerMethod249(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocumentType.get_PublicId
		private static bool CallerMethod250(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocumentType.get_SystemId
		private static bool CallerMethod251(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlDocumentType.get_InternalSubset
		private static bool CallerMethod252(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void WriteContentTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod241), "FILE", "System.Xml.XmlDocumentType.WriteContentTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod242), "FILE", "System.Xml.XmlDocumentType.WriteTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_IsReadOnly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod243), "FILE", "System.Xml.XmlDocumentType.get_IsReadOnly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_LocalName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod244), "FILE", "System.Xml.XmlDocumentType.get_LocalName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNode CloneNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean deep)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = deep;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod245), "FILE", "System.Xml.XmlDocumentType.CloneNode(Boolean)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNodeType get_NodeType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod246), "FILE", "System.Xml.XmlDocumentType.get_NodeType()", paramObjs, typeof(System.Xml.XmlNodeType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeType)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod247), "FILE", "System.Xml.XmlDocumentType.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNamedNodeMap get_Entities(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod248), "FILE", "System.Xml.XmlDocumentType.get_Entities()", paramObjs, typeof(System.Xml.XmlNamedNodeMap), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNamedNodeMap)retValue;
		}

		public static System.Xml.XmlNamedNodeMap get_Notations(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod249), "FILE", "System.Xml.XmlDocumentType.get_Notations()", paramObjs, typeof(System.Xml.XmlNamedNodeMap), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNamedNodeMap)retValue;
		}

		public static System.String get_PublicId(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod250), "FILE", "System.Xml.XmlDocumentType.get_PublicId()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_SystemId(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod251), "FILE", "System.Xml.XmlDocumentType.get_SystemId()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_InternalSubset(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod252), "FILE", "System.Xml.XmlDocumentType.get_InternalSubset()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlWriter")]
	public class HandlerClass15
	{
		// System.Xml.XmlWriter.WriteNode
		private static bool CallerMethod253(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlWriter.WriteAttributes
		private static bool CallerMethod254(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlWriter.WriteStartElement
		private static bool CallerMethod255(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlWriter.WriteStartElement
		private static bool CallerMethod256(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlWriter.WriteAttributeString
		private static bool CallerMethod257(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlWriter.WriteAttributeString
		private static bool CallerMethod258(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlWriter.WriteAttributeString
		private static bool CallerMethod259(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlWriter.WriteStartAttribute
		private static bool CallerMethod260(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlWriter.WriteElementString
		private static bool CallerMethod261(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlWriter.WriteElementString
		private static bool CallerMethod262(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void WriteNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlReader reader, System.Boolean defattr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = reader;
			paramObjs[2] = defattr;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod253), "FILE", "System.Xml.XmlWriter.WriteNode(XmlReader, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlReader reader, System.Boolean defattr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = reader;
			paramObjs[2] = defattr;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod254), "FILE", "System.Xml.XmlWriter.WriteAttributes(XmlReader, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteStartElement(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String ns)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = ns;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod255), "FILE", "System.Xml.XmlWriter.WriteStartElement(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteStartElement(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod256), "FILE", "System.Xml.XmlWriter.WriteStartElement(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteAttributeString(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String ns, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = ns;
			paramObjs[3] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod257), "FILE", "System.Xml.XmlWriter.WriteAttributeString(String, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteAttributeString(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod258), "FILE", "System.Xml.XmlWriter.WriteAttributeString(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteAttributeString(HeatDotNet.MethodInterceptInfo methodIntercept, System.String prefix, System.String localName, System.String ns, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = prefix;
			paramObjs[2] = localName;
			paramObjs[3] = ns;
			paramObjs[4] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod259), "FILE", "System.Xml.XmlWriter.WriteAttributeString(String, String, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteStartAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String ns)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = ns;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod260), "FILE", "System.Xml.XmlWriter.WriteStartAttribute(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteElementString(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod261), "FILE", "System.Xml.XmlWriter.WriteElementString(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteElementString(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String ns, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = ns;
			paramObjs[3] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod262), "FILE", "System.Xml.XmlWriter.WriteElementString(String, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlTextWriter")]
	public class HandlerClass16
	{
		// System.Xml.XmlTextWriter.WriteQualifiedName
		private static bool CallerMethod263(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteName
		private static bool CallerMethod264(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteNmToken
		private static bool CallerMethod265(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.get_XmlLang
		private static bool CallerMethod266(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.get_XmlSpace
		private static bool CallerMethod267(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.LookupPrefix
		private static bool CallerMethod268(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.Flush
		private static bool CallerMethod269(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.Close
		private static bool CallerMethod270(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.get_WriteState
		private static bool CallerMethod271(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteBinHex
		private static bool CallerMethod272(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteBase64
		private static bool CallerMethod273(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteRaw
		private static bool CallerMethod274(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteRaw
		private static bool CallerMethod275(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteChars
		private static bool CallerMethod276(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteSurrogateCharEntity
		private static bool CallerMethod277(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteString
		private static bool CallerMethod278(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteWhitespace
		private static bool CallerMethod279(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteCharEntity
		private static bool CallerMethod280(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteEntityRef
		private static bool CallerMethod281(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteProcessingInstruction
		private static bool CallerMethod282(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteComment
		private static bool CallerMethod283(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteCData
		private static bool CallerMethod284(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteEndAttribute
		private static bool CallerMethod285(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteStartAttribute
		private static bool CallerMethod286(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteFullEndElement
		private static bool CallerMethod287(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteEndElement
		private static bool CallerMethod288(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteStartElement
		private static bool CallerMethod289(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteDocType
		private static bool CallerMethod290(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteEndDocument
		private static bool CallerMethod291(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteStartDocument
		private static bool CallerMethod292(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.WriteStartDocument
		private static bool CallerMethod293(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.get_BaseStream
		private static bool CallerMethod294(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.get_Namespaces
		private static bool CallerMethod295(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.set_Namespaces
		private static bool CallerMethod296(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.get_Formatting
		private static bool CallerMethod297(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.set_Formatting
		private static bool CallerMethod298(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.get_Indentation
		private static bool CallerMethod299(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.set_Indentation
		private static bool CallerMethod300(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.get_IndentChar
		private static bool CallerMethod301(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.set_IndentChar
		private static bool CallerMethod302(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.get_QuoteChar
		private static bool CallerMethod303(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter.set_QuoteChar
		private static bool CallerMethod304(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter..ctor
		private static bool CallerMethod305(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter..ctor
		private static bool CallerMethod306(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextWriter..ctor
		private static bool CallerMethod307(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void WriteQualifiedName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String ns)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = ns;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod263), "FILE", "System.Xml.XmlTextWriter.WriteQualifiedName(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod264), "FILE", "System.Xml.XmlTextWriter.WriteName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteNmToken(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod265), "FILE", "System.Xml.XmlTextWriter.WriteNmToken(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_XmlLang(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod266), "FILE", "System.Xml.XmlTextWriter.get_XmlLang()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlSpace get_XmlSpace(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod267), "FILE", "System.Xml.XmlTextWriter.get_XmlSpace()", paramObjs, typeof(System.Xml.XmlSpace), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlSpace)retValue;
		}

		public static System.String LookupPrefix(HeatDotNet.MethodInterceptInfo methodIntercept, System.String ns)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = ns;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod268), "FILE", "System.Xml.XmlTextWriter.LookupPrefix(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void Flush(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod269), "FILE", "System.Xml.XmlTextWriter.Flush()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod270), "FILE", "System.Xml.XmlTextWriter.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Xml.WriteState get_WriteState(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod271), "FILE", "System.Xml.XmlTextWriter.get_WriteState()", paramObjs, typeof(System.Xml.WriteState), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.WriteState)retValue;
		}

		public static void WriteBinHex(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 index, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = index;
			paramObjs[3] = count;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod272), "FILE", "System.Xml.XmlTextWriter.WriteBinHex(Byte[], Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteBase64(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 index, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = index;
			paramObjs[3] = count;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod273), "FILE", "System.Xml.XmlTextWriter.WriteBase64(Byte[], Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteRaw(HeatDotNet.MethodInterceptInfo methodIntercept, System.String data)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = data;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod274), "FILE", "System.Xml.XmlTextWriter.WriteRaw(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteRaw(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char[] buffer, System.Int32 index, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = index;
			paramObjs[3] = count;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod275), "FILE", "System.Xml.XmlTextWriter.WriteRaw(Char[], Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteChars(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char[] buffer, System.Int32 index, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = index;
			paramObjs[3] = count;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod276), "FILE", "System.Xml.XmlTextWriter.WriteChars(Char[], Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteSurrogateCharEntity(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char lowChar, System.Char highChar)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = lowChar;
			paramObjs[2] = highChar;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod277), "FILE", "System.Xml.XmlTextWriter.WriteSurrogateCharEntity(Char, Char)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteString(HeatDotNet.MethodInterceptInfo methodIntercept, System.String text)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = text;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod278), "FILE", "System.Xml.XmlTextWriter.WriteString(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteWhitespace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String ws)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = ws;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod279), "FILE", "System.Xml.XmlTextWriter.WriteWhitespace(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteCharEntity(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char ch)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = ch;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod280), "FILE", "System.Xml.XmlTextWriter.WriteCharEntity(Char)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteEntityRef(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod281), "FILE", "System.Xml.XmlTextWriter.WriteEntityRef(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteProcessingInstruction(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String text)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = text;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod282), "FILE", "System.Xml.XmlTextWriter.WriteProcessingInstruction(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteComment(HeatDotNet.MethodInterceptInfo methodIntercept, System.String text)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = text;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod283), "FILE", "System.Xml.XmlTextWriter.WriteComment(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteCData(HeatDotNet.MethodInterceptInfo methodIntercept, System.String text)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = text;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod284), "FILE", "System.Xml.XmlTextWriter.WriteCData(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteEndAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod285), "FILE", "System.Xml.XmlTextWriter.WriteEndAttribute()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteStartAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String prefix, System.String localName, System.String ns)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = prefix;
			paramObjs[2] = localName;
			paramObjs[3] = ns;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod286), "FILE", "System.Xml.XmlTextWriter.WriteStartAttribute(String, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteFullEndElement(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod287), "FILE", "System.Xml.XmlTextWriter.WriteFullEndElement()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteEndElement(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod288), "FILE", "System.Xml.XmlTextWriter.WriteEndElement()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteStartElement(HeatDotNet.MethodInterceptInfo methodIntercept, System.String prefix, System.String localName, System.String ns)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = prefix;
			paramObjs[2] = localName;
			paramObjs[3] = ns;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod289), "FILE", "System.Xml.XmlTextWriter.WriteStartElement(String, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteDocType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String pubid, System.String sysid, System.String subset)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = pubid;
			paramObjs[3] = sysid;
			paramObjs[4] = subset;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod290), "FILE", "System.Xml.XmlTextWriter.WriteDocType(String, String, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteEndDocument(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod291), "FILE", "System.Xml.XmlTextWriter.WriteEndDocument()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteStartDocument(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean standalone)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = standalone;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod292), "FILE", "System.Xml.XmlTextWriter.WriteStartDocument(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteStartDocument(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod293), "FILE", "System.Xml.XmlTextWriter.WriteStartDocument()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IO.Stream get_BaseStream(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod294), "FILE", "System.Xml.XmlTextWriter.get_BaseStream()", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static System.Boolean get_Namespaces(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod295), "FILE", "System.Xml.XmlTextWriter.get_Namespaces()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_Namespaces(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod296), "FILE", "System.Xml.XmlTextWriter.set_Namespaces(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Xml.Formatting get_Formatting(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod297), "FILE", "System.Xml.XmlTextWriter.get_Formatting()", paramObjs, typeof(System.Xml.Formatting), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.Formatting)retValue;
		}

		public static void set_Formatting(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.Formatting value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod298), "FILE", "System.Xml.XmlTextWriter.set_Formatting(Formatting)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_Indentation(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod299), "FILE", "System.Xml.XmlTextWriter.get_Indentation()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_Indentation(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod300), "FILE", "System.Xml.XmlTextWriter.set_Indentation(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Char get_IndentChar(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod301), "FILE", "System.Xml.XmlTextWriter.get_IndentChar()", paramObjs, typeof(System.Char), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Char)retValue;
		}

		public static void set_IndentChar(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod302), "FILE", "System.Xml.XmlTextWriter.set_IndentChar(Char)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Char get_QuoteChar(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod303), "FILE", "System.Xml.XmlTextWriter.get_QuoteChar()", paramObjs, typeof(System.Char), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Char)retValue;
		}

		public static void set_QuoteChar(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod304), "FILE", "System.Xml.XmlTextWriter.set_QuoteChar(Char)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream w, System.Text.Encoding encoding)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = w;
			paramObjs[2] = encoding;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod305), "FILE", "System.Xml.XmlTextWriter.ctor(Stream, Encoding)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String filename, System.Text.Encoding encoding)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = filename;
			paramObjs[2] = encoding;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod306), "FILE", "System.Xml.XmlTextWriter.ctor(String, Encoding)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.TextWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod307), "FILE", "System.Xml.XmlTextWriter.ctor(TextWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlElement")]
	public class HandlerClass17
	{
		// System.Xml.XmlElement.RemoveAllAttributes
		private static bool CallerMethod308(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.RemoveAttributeAt
		private static bool CallerMethod309(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.HasAttribute
		private static bool CallerMethod310(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.HasAttribute
		private static bool CallerMethod311(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.GetElementsByTagName
		private static bool CallerMethod312(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.RemoveAttributeNode
		private static bool CallerMethod313(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.SetAttributeNode
		private static bool CallerMethod314(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.GetAttributeNode
		private static bool CallerMethod315(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.RemoveAttribute
		private static bool CallerMethod316(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.SetAttribute
		private static bool CallerMethod317(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.GetAttribute
		private static bool CallerMethod318(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.GetElementsByTagName
		private static bool CallerMethod319(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.RemoveAttributeNode
		private static bool CallerMethod320(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.SetAttributeNode
		private static bool CallerMethod321(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.GetAttributeNode
		private static bool CallerMethod322(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.RemoveAttribute
		private static bool CallerMethod323(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.SetAttribute
		private static bool CallerMethod324(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.GetAttribute
		private static bool CallerMethod325(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.get_HasAttributes
		private static bool CallerMethod326(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.RemoveAll
		private static bool CallerMethod327(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.WriteContentTo
		private static bool CallerMethod328(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.WriteTo
		private static bool CallerMethod329(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.set_InnerXml
		private static bool CallerMethod330(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.get_InnerXml
		private static bool CallerMethod331(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.set_InnerText
		private static bool CallerMethod332(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.get_InnerText
		private static bool CallerMethod333(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.get_LocalName
		private static bool CallerMethod334(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.set_Prefix
		private static bool CallerMethod335(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.get_Prefix
		private static bool CallerMethod336(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.get_NamespaceURI
		private static bool CallerMethod337(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.CloneNode
		private static bool CallerMethod338(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.get_OwnerDocument
		private static bool CallerMethod339(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.get_Attributes
		private static bool CallerMethod340(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.get_NextSibling
		private static bool CallerMethod341(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.get_NodeType
		private static bool CallerMethod342(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.get_Name
		private static bool CallerMethod343(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.get_IsEmpty
		private static bool CallerMethod344(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlElement.set_IsEmpty
		private static bool CallerMethod345(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void RemoveAllAttributes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod308), "FILE", "System.Xml.XmlElement.RemoveAllAttributes()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Xml.XmlNode RemoveAttributeAt(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 i)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = i;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod309), "FILE", "System.Xml.XmlElement.RemoveAttributeAt(Int32)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Boolean HasAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod310), "FILE", "System.Xml.XmlElement.HasAttribute(String, String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean HasAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod311), "FILE", "System.Xml.XmlElement.HasAttribute(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Xml.XmlNodeList GetElementsByTagName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod312), "FILE", "System.Xml.XmlElement.GetElementsByTagName(String, String)", paramObjs, typeof(System.Xml.XmlNodeList), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeList)retValue;
		}

		public static System.Xml.XmlAttribute RemoveAttributeNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod313), "FILE", "System.Xml.XmlElement.RemoveAttributeNode(String, String)", paramObjs, typeof(System.Xml.XmlAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlAttribute)retValue;
		}

		public static System.Xml.XmlAttribute SetAttributeNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod314), "FILE", "System.Xml.XmlElement.SetAttributeNode(String, String)", paramObjs, typeof(System.Xml.XmlAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlAttribute)retValue;
		}

		public static System.Xml.XmlAttribute GetAttributeNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod315), "FILE", "System.Xml.XmlElement.GetAttributeNode(String, String)", paramObjs, typeof(System.Xml.XmlAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlAttribute)retValue;
		}

		public static void RemoveAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod316), "FILE", "System.Xml.XmlElement.RemoveAttribute(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String SetAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String namespaceURI, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = namespaceURI;
			paramObjs[3] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod317), "FILE", "System.Xml.XmlElement.SetAttribute(String, String, String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod318), "FILE", "System.Xml.XmlElement.GetAttribute(String, String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNodeList GetElementsByTagName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod319), "FILE", "System.Xml.XmlElement.GetElementsByTagName(String)", paramObjs, typeof(System.Xml.XmlNodeList), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeList)retValue;
		}

		public static System.Xml.XmlAttribute RemoveAttributeNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlAttribute oldAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = oldAttr;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod320), "FILE", "System.Xml.XmlElement.RemoveAttributeNode(XmlAttribute)", paramObjs, typeof(System.Xml.XmlAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlAttribute)retValue;
		}

		public static System.Xml.XmlAttribute SetAttributeNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlAttribute newAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = newAttr;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod321), "FILE", "System.Xml.XmlElement.SetAttributeNode(XmlAttribute)", paramObjs, typeof(System.Xml.XmlAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlAttribute)retValue;
		}

		public static System.Xml.XmlAttribute GetAttributeNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod322), "FILE", "System.Xml.XmlElement.GetAttributeNode(String)", paramObjs, typeof(System.Xml.XmlAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlAttribute)retValue;
		}

		public static void RemoveAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod323), "FILE", "System.Xml.XmlElement.RemoveAttribute(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod324), "FILE", "System.Xml.XmlElement.SetAttribute(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String GetAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod325), "FILE", "System.Xml.XmlElement.GetAttribute(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean get_HasAttributes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod326), "FILE", "System.Xml.XmlElement.get_HasAttributes()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void RemoveAll(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod327), "FILE", "System.Xml.XmlElement.RemoveAll()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteContentTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod328), "FILE", "System.Xml.XmlElement.WriteContentTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod329), "FILE", "System.Xml.XmlElement.WriteTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_InnerXml(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod330), "FILE", "System.Xml.XmlElement.set_InnerXml(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_InnerXml(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod331), "FILE", "System.Xml.XmlElement.get_InnerXml()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_InnerText(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod332), "FILE", "System.Xml.XmlElement.set_InnerText(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_InnerText(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod333), "FILE", "System.Xml.XmlElement.get_InnerText()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_LocalName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod334), "FILE", "System.Xml.XmlElement.get_LocalName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Prefix(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod335), "FILE", "System.Xml.XmlElement.set_Prefix(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Prefix(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod336), "FILE", "System.Xml.XmlElement.get_Prefix()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_NamespaceURI(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod337), "FILE", "System.Xml.XmlElement.get_NamespaceURI()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNode CloneNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean deep)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = deep;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod338), "FILE", "System.Xml.XmlElement.CloneNode(Boolean)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlDocument get_OwnerDocument(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod339), "FILE", "System.Xml.XmlElement.get_OwnerDocument()", paramObjs, typeof(System.Xml.XmlDocument), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlDocument)retValue;
		}

		public static System.Xml.XmlAttributeCollection get_Attributes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod340), "FILE", "System.Xml.XmlElement.get_Attributes()", paramObjs, typeof(System.Xml.XmlAttributeCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlAttributeCollection)retValue;
		}

		public static System.Xml.XmlNode get_NextSibling(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod341), "FILE", "System.Xml.XmlElement.get_NextSibling()", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNodeType get_NodeType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod342), "FILE", "System.Xml.XmlElement.get_NodeType()", paramObjs, typeof(System.Xml.XmlNodeType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeType)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod343), "FILE", "System.Xml.XmlElement.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean get_IsEmpty(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod344), "FILE", "System.Xml.XmlElement.get_IsEmpty()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_IsEmpty(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod345), "FILE", "System.Xml.XmlElement.set_IsEmpty(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlEntity")]
	public class HandlerClass18
	{
		// System.Xml.XmlEntity.WriteContentTo
		private static bool CallerMethod346(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntity.WriteTo
		private static bool CallerMethod347(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntity.get_BaseURI
		private static bool CallerMethod348(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntity.set_InnerXml
		private static bool CallerMethod349(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntity.get_InnerXml
		private static bool CallerMethod350(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntity.get_OuterXml
		private static bool CallerMethod351(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntity.set_InnerText
		private static bool CallerMethod352(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntity.get_InnerText
		private static bool CallerMethod353(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntity.get_IsReadOnly
		private static bool CallerMethod354(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntity.get_LocalName
		private static bool CallerMethod355(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntity.CloneNode
		private static bool CallerMethod356(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntity.get_NodeType
		private static bool CallerMethod357(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntity.get_Name
		private static bool CallerMethod358(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntity.get_PublicId
		private static bool CallerMethod359(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntity.get_SystemId
		private static bool CallerMethod360(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntity.get_NotationName
		private static bool CallerMethod361(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void WriteContentTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod346), "FILE", "System.Xml.XmlEntity.WriteContentTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod347), "FILE", "System.Xml.XmlEntity.WriteTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_BaseURI(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod348), "FILE", "System.Xml.XmlEntity.get_BaseURI()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_InnerXml(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod349), "FILE", "System.Xml.XmlEntity.set_InnerXml(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_InnerXml(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod350), "FILE", "System.Xml.XmlEntity.get_InnerXml()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_OuterXml(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod351), "FILE", "System.Xml.XmlEntity.get_OuterXml()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_InnerText(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod352), "FILE", "System.Xml.XmlEntity.set_InnerText(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_InnerText(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod353), "FILE", "System.Xml.XmlEntity.get_InnerText()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean get_IsReadOnly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod354), "FILE", "System.Xml.XmlEntity.get_IsReadOnly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_LocalName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod355), "FILE", "System.Xml.XmlEntity.get_LocalName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNode CloneNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean deep)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = deep;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod356), "FILE", "System.Xml.XmlEntity.CloneNode(Boolean)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNodeType get_NodeType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod357), "FILE", "System.Xml.XmlEntity.get_NodeType()", paramObjs, typeof(System.Xml.XmlNodeType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeType)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod358), "FILE", "System.Xml.XmlEntity.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_PublicId(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod359), "FILE", "System.Xml.XmlEntity.get_PublicId()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_SystemId(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod360), "FILE", "System.Xml.XmlEntity.get_SystemId()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_NotationName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod361), "FILE", "System.Xml.XmlEntity.get_NotationName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlReader")]
	public class HandlerClass19
	{
		// System.Xml.XmlReader.get_HasAttributes
		private static bool CallerMethod362(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlReader.ReadOuterXml
		private static bool CallerMethod363(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlReader.ReadInnerXml
		private static bool CallerMethod364(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlReader.IsStartElement
		private static bool CallerMethod365(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlReader.IsStartElement
		private static bool CallerMethod366(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlReader.IsStartElement
		private static bool CallerMethod367(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlReader.ReadEndElement
		private static bool CallerMethod368(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlReader.ReadElementString
		private static bool CallerMethod369(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlReader.ReadElementString
		private static bool CallerMethod370(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlReader.ReadElementString
		private static bool CallerMethod371(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlReader.ReadStartElement
		private static bool CallerMethod372(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlReader.ReadStartElement
		private static bool CallerMethod373(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlReader.ReadStartElement
		private static bool CallerMethod374(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlReader.MoveToContent
		private static bool CallerMethod375(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlReader.ReadString
		private static bool CallerMethod376(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlReader.Skip
		private static bool CallerMethod377(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlReader.get_CanResolveEntity
		private static bool CallerMethod378(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlReader.IsName
		private static bool CallerMethod379(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlReader.IsNameToken
		private static bool CallerMethod380(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean get_HasAttributes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod362), "FILE", "System.Xml.XmlReader.get_HasAttributes()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String ReadOuterXml(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod363), "FILE", "System.Xml.XmlReader.ReadOuterXml()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ReadInnerXml(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod364), "FILE", "System.Xml.XmlReader.ReadInnerXml()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean IsStartElement(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localname, System.String ns)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localname;
			paramObjs[2] = ns;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod365), "FILE", "System.Xml.XmlReader.IsStartElement(String, String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsStartElement(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod366), "FILE", "System.Xml.XmlReader.IsStartElement(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsStartElement(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod367), "FILE", "System.Xml.XmlReader.IsStartElement()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ReadEndElement(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod368), "FILE", "System.Xml.XmlReader.ReadEndElement()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String ReadElementString(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localname, System.String ns)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localname;
			paramObjs[2] = ns;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod369), "FILE", "System.Xml.XmlReader.ReadElementString(String, String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ReadElementString(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod370), "FILE", "System.Xml.XmlReader.ReadElementString(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ReadElementString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod371), "FILE", "System.Xml.XmlReader.ReadElementString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ReadStartElement(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localname, System.String ns)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localname;
			paramObjs[2] = ns;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod372), "FILE", "System.Xml.XmlReader.ReadStartElement(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ReadStartElement(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod373), "FILE", "System.Xml.XmlReader.ReadStartElement(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ReadStartElement(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod374), "FILE", "System.Xml.XmlReader.ReadStartElement()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Xml.XmlNodeType MoveToContent(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod375), "FILE", "System.Xml.XmlReader.MoveToContent()", paramObjs, typeof(System.Xml.XmlNodeType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeType)retValue;
		}

		public static System.String ReadString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod376), "FILE", "System.Xml.XmlReader.ReadString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void Skip(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod377), "FILE", "System.Xml.XmlReader.Skip()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_CanResolveEntity(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod378), "FILE", "System.Xml.XmlReader.get_CanResolveEntity()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String str)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = str;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod379), "FILE", "System.Xml.XmlReader.IsName(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsNameToken(HeatDotNet.MethodInterceptInfo methodIntercept, System.String str)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = str;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod380), "FILE", "System.Xml.XmlReader.IsNameToken(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlTextReader")]
	public class HandlerClass20
	{
		// System.Xml.XmlTextReader.get_LinePosition
		private static bool CallerMethod381(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_LineNumber
		private static bool CallerMethod382(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.ReadAttributeValue
		private static bool CallerMethod383(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.ResolveEntity
		private static bool CallerMethod384(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.LookupNamespace
		private static bool CallerMethod385(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_NameTable
		private static bool CallerMethod386(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_ReadState
		private static bool CallerMethod387(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.Close
		private static bool CallerMethod388(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_EOF
		private static bool CallerMethod389(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.Read
		private static bool CallerMethod390(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.MoveToElement
		private static bool CallerMethod391(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.MoveToNextAttribute
		private static bool CallerMethod392(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.MoveToFirstAttribute
		private static bool CallerMethod393(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.MoveToAttribute
		private static bool CallerMethod394(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.MoveToAttribute
		private static bool CallerMethod395(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.MoveToAttribute
		private static bool CallerMethod396(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_Item
		private static bool CallerMethod397(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_Item
		private static bool CallerMethod398(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_Item
		private static bool CallerMethod399(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.GetAttribute
		private static bool CallerMethod400(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.GetAttribute
		private static bool CallerMethod401(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.GetAttribute
		private static bool CallerMethod402(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_AttributeCount
		private static bool CallerMethod403(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_XmlLang
		private static bool CallerMethod404(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_XmlSpace
		private static bool CallerMethod405(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_QuoteChar
		private static bool CallerMethod406(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_IsDefault
		private static bool CallerMethod407(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_IsEmptyElement
		private static bool CallerMethod408(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_BaseURI
		private static bool CallerMethod409(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_Depth
		private static bool CallerMethod410(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_Value
		private static bool CallerMethod411(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_HasValue
		private static bool CallerMethod412(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_Prefix
		private static bool CallerMethod413(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_NamespaceURI
		private static bool CallerMethod414(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_LocalName
		private static bool CallerMethod415(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_Name
		private static bool CallerMethod416(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_NodeType
		private static bool CallerMethod417(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.ResetState
		private static bool CallerMethod418(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.GetRemainder
		private static bool CallerMethod419(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.ReadChars
		private static bool CallerMethod420(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.ReadBase64
		private static bool CallerMethod421(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.ReadBinHex
		private static bool CallerMethod422(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_Namespaces
		private static bool CallerMethod423(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.set_Namespaces
		private static bool CallerMethod424(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_Normalization
		private static bool CallerMethod425(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.set_Normalization
		private static bool CallerMethod426(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_Encoding
		private static bool CallerMethod427(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.get_WhitespaceHandling
		private static bool CallerMethod428(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.set_WhitespaceHandling
		private static bool CallerMethod429(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader.set_XmlResolver
		private static bool CallerMethod430(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader..ctor
		private static bool CallerMethod431(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader..ctor
		private static bool CallerMethod432(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader..ctor
		private static bool CallerMethod433(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader..ctor
		private static bool CallerMethod434(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader..ctor
		private static bool CallerMethod435(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader..ctor
		private static bool CallerMethod436(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader..ctor
		private static bool CallerMethod437(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader..ctor
		private static bool CallerMethod438(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader..ctor
		private static bool CallerMethod439(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader..ctor
		private static bool CallerMethod440(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader..ctor
		private static bool CallerMethod441(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlTextReader..ctor
		private static bool CallerMethod442(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 get_LinePosition(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod381), "FILE", "System.Xml.XmlTextReader.get_LinePosition()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_LineNumber(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod382), "FILE", "System.Xml.XmlTextReader.get_LineNumber()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean ReadAttributeValue(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod383), "FILE", "System.Xml.XmlTextReader.ReadAttributeValue()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ResolveEntity(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod384), "FILE", "System.Xml.XmlTextReader.ResolveEntity()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String LookupNamespace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String prefix)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = prefix;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod385), "FILE", "System.Xml.XmlTextReader.LookupNamespace(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNameTable get_NameTable(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod386), "FILE", "System.Xml.XmlTextReader.get_NameTable()", paramObjs, typeof(System.Xml.XmlNameTable), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNameTable)retValue;
		}

		public static System.Xml.ReadState get_ReadState(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod387), "FILE", "System.Xml.XmlTextReader.get_ReadState()", paramObjs, typeof(System.Xml.ReadState), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.ReadState)retValue;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod388), "FILE", "System.Xml.XmlTextReader.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_EOF(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod389), "FILE", "System.Xml.XmlTextReader.get_EOF()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean Read(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod390), "FILE", "System.Xml.XmlTextReader.Read()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean MoveToElement(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod391), "FILE", "System.Xml.XmlTextReader.MoveToElement()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean MoveToNextAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod392), "FILE", "System.Xml.XmlTextReader.MoveToNextAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean MoveToFirstAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod393), "FILE", "System.Xml.XmlTextReader.MoveToFirstAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void MoveToAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 i)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = i;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod394), "FILE", "System.Xml.XmlTextReader.MoveToAttribute(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean MoveToAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod395), "FILE", "System.Xml.XmlTextReader.MoveToAttribute(String, String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean MoveToAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod396), "FILE", "System.Xml.XmlTextReader.MoveToAttribute(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod397), "FILE", "System.Xml.XmlTextReader.get_Item(String, String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod398), "FILE", "System.Xml.XmlTextReader.get_Item(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 i)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = i;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod399), "FILE", "System.Xml.XmlTextReader.get_Item(Int32)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 i)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = i;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod400), "FILE", "System.Xml.XmlTextReader.GetAttribute(Int32)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod401), "FILE", "System.Xml.XmlTextReader.GetAttribute(String, String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod402), "FILE", "System.Xml.XmlTextReader.GetAttribute(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_AttributeCount(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod403), "FILE", "System.Xml.XmlTextReader.get_AttributeCount()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String get_XmlLang(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod404), "FILE", "System.Xml.XmlTextReader.get_XmlLang()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlSpace get_XmlSpace(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod405), "FILE", "System.Xml.XmlTextReader.get_XmlSpace()", paramObjs, typeof(System.Xml.XmlSpace), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlSpace)retValue;
		}

		public static System.Char get_QuoteChar(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod406), "FILE", "System.Xml.XmlTextReader.get_QuoteChar()", paramObjs, typeof(System.Char), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Char)retValue;
		}

		public static System.Boolean get_IsDefault(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod407), "FILE", "System.Xml.XmlTextReader.get_IsDefault()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsEmptyElement(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod408), "FILE", "System.Xml.XmlTextReader.get_IsEmptyElement()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_BaseURI(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod409), "FILE", "System.Xml.XmlTextReader.get_BaseURI()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_Depth(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod410), "FILE", "System.Xml.XmlTextReader.get_Depth()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String get_Value(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod411), "FILE", "System.Xml.XmlTextReader.get_Value()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean get_HasValue(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod412), "FILE", "System.Xml.XmlTextReader.get_HasValue()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_Prefix(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod413), "FILE", "System.Xml.XmlTextReader.get_Prefix()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_NamespaceURI(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod414), "FILE", "System.Xml.XmlTextReader.get_NamespaceURI()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_LocalName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod415), "FILE", "System.Xml.XmlTextReader.get_LocalName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod416), "FILE", "System.Xml.XmlTextReader.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNodeType get_NodeType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod417), "FILE", "System.Xml.XmlTextReader.get_NodeType()", paramObjs, typeof(System.Xml.XmlNodeType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeType)retValue;
		}

		public static void ResetState(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod418), "FILE", "System.Xml.XmlTextReader.ResetState()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IO.TextReader GetRemainder(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod419), "FILE", "System.Xml.XmlTextReader.GetRemainder()", paramObjs, typeof(System.IO.TextReader), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.TextReader)retValue;
		}

		public static System.Int32 ReadChars(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char[] buffer, System.Int32 index, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = index;
			paramObjs[3] = count;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod420), "FILE", "System.Xml.XmlTextReader.ReadChars(Char[], Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 ReadBase64(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] array, System.Int32 offset, System.Int32 len)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = offset;
			paramObjs[3] = len;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod421), "FILE", "System.Xml.XmlTextReader.ReadBase64(Byte[], Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 ReadBinHex(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] array, System.Int32 offset, System.Int32 len)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = offset;
			paramObjs[3] = len;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod422), "FILE", "System.Xml.XmlTextReader.ReadBinHex(Byte[], Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean get_Namespaces(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod423), "FILE", "System.Xml.XmlTextReader.get_Namespaces()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_Namespaces(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod424), "FILE", "System.Xml.XmlTextReader.set_Namespaces(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_Normalization(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod425), "FILE", "System.Xml.XmlTextReader.get_Normalization()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_Normalization(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod426), "FILE", "System.Xml.XmlTextReader.set_Normalization(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Text.Encoding get_Encoding(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod427), "FILE", "System.Xml.XmlTextReader.get_Encoding()", paramObjs, typeof(System.Text.Encoding), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.Encoding)retValue;
		}

		public static System.Xml.WhitespaceHandling get_WhitespaceHandling(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod428), "FILE", "System.Xml.XmlTextReader.get_WhitespaceHandling()", paramObjs, typeof(System.Xml.WhitespaceHandling), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.WhitespaceHandling)retValue;
		}

		public static void set_WhitespaceHandling(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.WhitespaceHandling value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod429), "FILE", "System.Xml.XmlTextReader.set_WhitespaceHandling(WhitespaceHandling)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_XmlResolver(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlResolver value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod430), "FILE", "System.Xml.XmlTextReader.set_XmlResolver(XmlResolver)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream input)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = input;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod431), "FILE", "System.Xml.XmlTextReader.ctor(Stream)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String url, System.IO.Stream input)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = url;
			paramObjs[2] = input;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod432), "FILE", "System.Xml.XmlTextReader.ctor(String, Stream)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream input, System.Xml.XmlNameTable nt)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = input;
			paramObjs[2] = nt;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod433), "FILE", "System.Xml.XmlTextReader.ctor(Stream, XmlNameTable)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String url, System.IO.Stream input, System.Xml.XmlNameTable nt)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = url;
			paramObjs[2] = input;
			paramObjs[3] = nt;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod434), "FILE", "System.Xml.XmlTextReader.ctor(String, Stream, XmlNameTable)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.TextReader input)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = input;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod435), "FILE", "System.Xml.XmlTextReader.ctor(TextReader)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String url, System.IO.TextReader input)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = url;
			paramObjs[2] = input;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod436), "FILE", "System.Xml.XmlTextReader.ctor(String, TextReader)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.TextReader input, System.Xml.XmlNameTable nt)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = input;
			paramObjs[2] = nt;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod437), "FILE", "System.Xml.XmlTextReader.ctor(TextReader, XmlNameTable)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String url, System.IO.TextReader input, System.Xml.XmlNameTable nt)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = url;
			paramObjs[2] = input;
			paramObjs[3] = nt;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod438), "FILE", "System.Xml.XmlTextReader.ctor(String, TextReader, XmlNameTable)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = xmlFragment;
			paramObjs[2] = fragType;
			paramObjs[3] = context;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod439), "FILE", "System.Xml.XmlTextReader.ctor(Stream, XmlNodeType, XmlParserContext)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = xmlFragment;
			paramObjs[2] = fragType;
			paramObjs[3] = context;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod440), "FILE", "System.Xml.XmlTextReader.ctor(String, XmlNodeType, XmlParserContext)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String url)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = url;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod441), "FILE", "System.Xml.XmlTextReader.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String url, System.Xml.XmlNameTable nt)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = url;
			paramObjs[2] = nt;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod442), "FILE", "System.Xml.XmlTextReader.ctor(String, XmlNameTable)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlEntityReference")]
	public class HandlerClass21
	{
		// System.Xml.XmlEntityReference.WriteContentTo
		private static bool CallerMethod443(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntityReference.WriteTo
		private static bool CallerMethod444(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntityReference.get_BaseURI
		private static bool CallerMethod445(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntityReference.get_IsReadOnly
		private static bool CallerMethod446(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntityReference.get_LocalName
		private static bool CallerMethod447(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntityReference.CloneNode
		private static bool CallerMethod448(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntityReference.get_NodeType
		private static bool CallerMethod449(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntityReference.set_Value
		private static bool CallerMethod450(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntityReference.get_Value
		private static bool CallerMethod451(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlEntityReference.get_Name
		private static bool CallerMethod452(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void WriteContentTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod443), "FILE", "System.Xml.XmlEntityReference.WriteContentTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod444), "FILE", "System.Xml.XmlEntityReference.WriteTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_BaseURI(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod445), "FILE", "System.Xml.XmlEntityReference.get_BaseURI()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean get_IsReadOnly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod446), "FILE", "System.Xml.XmlEntityReference.get_IsReadOnly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_LocalName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod447), "FILE", "System.Xml.XmlEntityReference.get_LocalName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNode CloneNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean deep)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = deep;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod448), "FILE", "System.Xml.XmlEntityReference.CloneNode(Boolean)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNodeType get_NodeType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod449), "FILE", "System.Xml.XmlEntityReference.get_NodeType()", paramObjs, typeof(System.Xml.XmlNodeType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeType)retValue;
		}

		public static void set_Value(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod450), "FILE", "System.Xml.XmlEntityReference.set_Value(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Value(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod451), "FILE", "System.Xml.XmlEntityReference.get_Value()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod452), "FILE", "System.Xml.XmlEntityReference.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlImplementation")]
	public class HandlerClass22
	{
		// System.Xml.XmlImplementation.CreateDocument
		private static bool CallerMethod453(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlImplementation.HasFeature
		private static bool CallerMethod454(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlImplementation..ctor
		private static bool CallerMethod455(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Xml.XmlDocument CreateDocument(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod453), "FILE", "System.Xml.XmlImplementation.CreateDocument()", paramObjs, typeof(System.Xml.XmlDocument), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlDocument)retValue;
		}

		public static System.Boolean HasFeature(HeatDotNet.MethodInterceptInfo methodIntercept, System.String strFeature, System.String strVersion)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = strFeature;
			paramObjs[2] = strVersion;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod454), "FILE", "System.Xml.XmlImplementation.HasFeature(String, String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod455), "FILE", "System.Xml.XmlImplementation.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlNamespaceManager")]
	public class HandlerClass23
	{
		// System.Xml.XmlNamespaceManager.GetEnumerator
		private static bool CallerMethod456(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNamespaceManager.HasNamespace
		private static bool CallerMethod457(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNamespaceManager.LookupPrefix
		private static bool CallerMethod458(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNamespaceManager.LookupNamespace
		private static bool CallerMethod459(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNamespaceManager.RemoveNamespace
		private static bool CallerMethod460(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNamespaceManager.AddNamespace
		private static bool CallerMethod461(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNamespaceManager.PopScope
		private static bool CallerMethod462(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNamespaceManager.PushScope
		private static bool CallerMethod463(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNamespaceManager.get_DefaultNamespace
		private static bool CallerMethod464(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNamespaceManager.get_NameTable
		private static bool CallerMethod465(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNamespaceManager..ctor
		private static bool CallerMethod466(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Collections.IEnumerator GetEnumerator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod456), "FILE", "System.Xml.XmlNamespaceManager.GetEnumerator()", paramObjs, typeof(System.Collections.IEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IEnumerator)retValue;
		}

		public static System.Boolean HasNamespace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String prefix)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = prefix;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod457), "FILE", "System.Xml.XmlNamespaceManager.HasNamespace(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String LookupPrefix(HeatDotNet.MethodInterceptInfo methodIntercept, System.String uri)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = uri;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod458), "FILE", "System.Xml.XmlNamespaceManager.LookupPrefix(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String LookupNamespace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String prefix)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = prefix;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod459), "FILE", "System.Xml.XmlNamespaceManager.LookupNamespace(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void RemoveNamespace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String prefix, System.String uri)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = prefix;
			paramObjs[2] = uri;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod460), "FILE", "System.Xml.XmlNamespaceManager.RemoveNamespace(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddNamespace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String prefix, System.String uri)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = prefix;
			paramObjs[2] = uri;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod461), "FILE", "System.Xml.XmlNamespaceManager.AddNamespace(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean PopScope(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod462), "FILE", "System.Xml.XmlNamespaceManager.PopScope()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void PushScope(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod463), "FILE", "System.Xml.XmlNamespaceManager.PushScope()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_DefaultNamespace(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod464), "FILE", "System.Xml.XmlNamespaceManager.get_DefaultNamespace()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNameTable get_NameTable(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod465), "FILE", "System.Xml.XmlNamespaceManager.get_NameTable()", paramObjs, typeof(System.Xml.XmlNameTable), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNameTable)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Xml.XmlNameTable nameTable)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = nameTable;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod466), "FILE", "System.Xml.XmlNamespaceManager.ctor(XmlNameTable)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlNodeChangedEventArgs")]
	public class HandlerClass24
	{
		// System.Xml.XmlNodeChangedEventArgs.get_Action
		private static bool CallerMethod467(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeChangedEventArgs.get_Node
		private static bool CallerMethod468(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeChangedEventArgs.get_OldParent
		private static bool CallerMethod469(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeChangedEventArgs.get_NewParent
		private static bool CallerMethod470(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Xml.XmlNodeChangedAction get_Action(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod467), "FILE", "System.Xml.XmlNodeChangedEventArgs.get_Action()", paramObjs, typeof(System.Xml.XmlNodeChangedAction), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeChangedAction)retValue;
		}

		public static System.Xml.XmlNode get_Node(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod468), "FILE", "System.Xml.XmlNodeChangedEventArgs.get_Node()", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNode get_OldParent(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod469), "FILE", "System.Xml.XmlNodeChangedEventArgs.get_OldParent()", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNode get_NewParent(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod470), "FILE", "System.Xml.XmlNodeChangedEventArgs.get_NewParent()", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlNodeReader")]
	public class HandlerClass25
	{
		// System.Xml.XmlNodeReader.ReadAttributeValue
		private static bool CallerMethod471(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.ResolveEntity
		private static bool CallerMethod472(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.LookupNamespace
		private static bool CallerMethod473(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_NameTable
		private static bool CallerMethod474(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_HasAttributes
		private static bool CallerMethod475(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.ReadString
		private static bool CallerMethod476(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.Skip
		private static bool CallerMethod477(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_ReadState
		private static bool CallerMethod478(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.Close
		private static bool CallerMethod479(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_EOF
		private static bool CallerMethod480(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.Read
		private static bool CallerMethod481(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.MoveToElement
		private static bool CallerMethod482(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.MoveToNextAttribute
		private static bool CallerMethod483(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.MoveToFirstAttribute
		private static bool CallerMethod484(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.MoveToAttribute
		private static bool CallerMethod485(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.MoveToAttribute
		private static bool CallerMethod486(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_CanResolveEntity
		private static bool CallerMethod487(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.MoveToAttribute
		private static bool CallerMethod488(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_Item
		private static bool CallerMethod489(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_Item
		private static bool CallerMethod490(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_Item
		private static bool CallerMethod491(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.GetAttribute
		private static bool CallerMethod492(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.GetAttribute
		private static bool CallerMethod493(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.GetAttribute
		private static bool CallerMethod494(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_AttributeCount
		private static bool CallerMethod495(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_XmlLang
		private static bool CallerMethod496(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_XmlSpace
		private static bool CallerMethod497(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_QuoteChar
		private static bool CallerMethod498(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_IsDefault
		private static bool CallerMethod499(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_IsEmptyElement
		private static bool CallerMethod500(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_BaseURI
		private static bool CallerMethod501(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_Depth
		private static bool CallerMethod502(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_Value
		private static bool CallerMethod503(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_HasValue
		private static bool CallerMethod504(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_Prefix
		private static bool CallerMethod505(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_NamespaceURI
		private static bool CallerMethod506(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_LocalName
		private static bool CallerMethod507(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_Name
		private static bool CallerMethod508(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader.get_NodeType
		private static bool CallerMethod509(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNodeReader..ctor
		private static bool CallerMethod510(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean ReadAttributeValue(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod471), "FILE", "System.Xml.XmlNodeReader.ReadAttributeValue()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ResolveEntity(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod472), "FILE", "System.Xml.XmlNodeReader.ResolveEntity()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String LookupNamespace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String prefix)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = prefix;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod473), "FILE", "System.Xml.XmlNodeReader.LookupNamespace(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNameTable get_NameTable(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod474), "FILE", "System.Xml.XmlNodeReader.get_NameTable()", paramObjs, typeof(System.Xml.XmlNameTable), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNameTable)retValue;
		}

		public static System.Boolean get_HasAttributes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod475), "FILE", "System.Xml.XmlNodeReader.get_HasAttributes()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String ReadString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod476), "FILE", "System.Xml.XmlNodeReader.ReadString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void Skip(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod477), "FILE", "System.Xml.XmlNodeReader.Skip()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Xml.ReadState get_ReadState(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod478), "FILE", "System.Xml.XmlNodeReader.get_ReadState()", paramObjs, typeof(System.Xml.ReadState), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.ReadState)retValue;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod479), "FILE", "System.Xml.XmlNodeReader.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_EOF(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod480), "FILE", "System.Xml.XmlNodeReader.get_EOF()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean Read(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod481), "FILE", "System.Xml.XmlNodeReader.Read()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean MoveToElement(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod482), "FILE", "System.Xml.XmlNodeReader.MoveToElement()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean MoveToNextAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod483), "FILE", "System.Xml.XmlNodeReader.MoveToNextAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean MoveToFirstAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod484), "FILE", "System.Xml.XmlNodeReader.MoveToFirstAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void MoveToAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 attributeIndex)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeIndex;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod485), "FILE", "System.Xml.XmlNodeReader.MoveToAttribute(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean MoveToAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod486), "FILE", "System.Xml.XmlNodeReader.MoveToAttribute(String, String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_CanResolveEntity(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod487), "FILE", "System.Xml.XmlNodeReader.get_CanResolveEntity()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean MoveToAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod488), "FILE", "System.Xml.XmlNodeReader.MoveToAttribute(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod489), "FILE", "System.Xml.XmlNodeReader.get_Item(String, String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod490), "FILE", "System.Xml.XmlNodeReader.get_Item(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 i)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = i;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod491), "FILE", "System.Xml.XmlNodeReader.get_Item(Int32)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 attributeIndex)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeIndex;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod492), "FILE", "System.Xml.XmlNodeReader.GetAttribute(Int32)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod493), "FILE", "System.Xml.XmlNodeReader.GetAttribute(String, String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod494), "FILE", "System.Xml.XmlNodeReader.GetAttribute(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_AttributeCount(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod495), "FILE", "System.Xml.XmlNodeReader.get_AttributeCount()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String get_XmlLang(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod496), "FILE", "System.Xml.XmlNodeReader.get_XmlLang()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlSpace get_XmlSpace(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod497), "FILE", "System.Xml.XmlNodeReader.get_XmlSpace()", paramObjs, typeof(System.Xml.XmlSpace), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlSpace)retValue;
		}

		public static System.Char get_QuoteChar(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod498), "FILE", "System.Xml.XmlNodeReader.get_QuoteChar()", paramObjs, typeof(System.Char), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Char)retValue;
		}

		public static System.Boolean get_IsDefault(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod499), "FILE", "System.Xml.XmlNodeReader.get_IsDefault()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsEmptyElement(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod500), "FILE", "System.Xml.XmlNodeReader.get_IsEmptyElement()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_BaseURI(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod501), "FILE", "System.Xml.XmlNodeReader.get_BaseURI()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_Depth(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod502), "FILE", "System.Xml.XmlNodeReader.get_Depth()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String get_Value(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod503), "FILE", "System.Xml.XmlNodeReader.get_Value()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean get_HasValue(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod504), "FILE", "System.Xml.XmlNodeReader.get_HasValue()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_Prefix(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod505), "FILE", "System.Xml.XmlNodeReader.get_Prefix()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_NamespaceURI(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod506), "FILE", "System.Xml.XmlNodeReader.get_NamespaceURI()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_LocalName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod507), "FILE", "System.Xml.XmlNodeReader.get_LocalName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod508), "FILE", "System.Xml.XmlNodeReader.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNodeType get_NodeType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod509), "FILE", "System.Xml.XmlNodeReader.get_NodeType()", paramObjs, typeof(System.Xml.XmlNodeType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeType)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Xml.XmlNode node)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = node;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod510), "FILE", "System.Xml.XmlNodeReader.ctor(XmlNode)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlNotation")]
	public class HandlerClass26
	{
		// System.Xml.XmlNotation.WriteContentTo
		private static bool CallerMethod511(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNotation.WriteTo
		private static bool CallerMethod512(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNotation.set_InnerXml
		private static bool CallerMethod513(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNotation.get_InnerXml
		private static bool CallerMethod514(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNotation.get_OuterXml
		private static bool CallerMethod515(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNotation.get_IsReadOnly
		private static bool CallerMethod516(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNotation.get_LocalName
		private static bool CallerMethod517(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNotation.CloneNode
		private static bool CallerMethod518(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNotation.get_NodeType
		private static bool CallerMethod519(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNotation.get_Name
		private static bool CallerMethod520(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNotation.get_PublicId
		private static bool CallerMethod521(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlNotation.get_SystemId
		private static bool CallerMethod522(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void WriteContentTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod511), "FILE", "System.Xml.XmlNotation.WriteContentTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod512), "FILE", "System.Xml.XmlNotation.WriteTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_InnerXml(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod513), "FILE", "System.Xml.XmlNotation.set_InnerXml(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_InnerXml(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod514), "FILE", "System.Xml.XmlNotation.get_InnerXml()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_OuterXml(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod515), "FILE", "System.Xml.XmlNotation.get_OuterXml()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean get_IsReadOnly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod516), "FILE", "System.Xml.XmlNotation.get_IsReadOnly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_LocalName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod517), "FILE", "System.Xml.XmlNotation.get_LocalName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNode CloneNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean deep)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = deep;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod518), "FILE", "System.Xml.XmlNotation.CloneNode(Boolean)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNodeType get_NodeType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod519), "FILE", "System.Xml.XmlNotation.get_NodeType()", paramObjs, typeof(System.Xml.XmlNodeType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeType)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod520), "FILE", "System.Xml.XmlNotation.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_PublicId(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod521), "FILE", "System.Xml.XmlNotation.get_PublicId()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_SystemId(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod522), "FILE", "System.Xml.XmlNotation.get_SystemId()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlResolver")]
	public class HandlerClass27
	{
		// System.Xml.XmlResolver.ResolveUri
		private static bool CallerMethod523(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Uri ResolveUri(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri baseUri, System.String relativeUri)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = baseUri;
			paramObjs[2] = relativeUri;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod523), "FILE", "System.Xml.XmlResolver.ResolveUri(Uri, String)", paramObjs, typeof(System.Uri), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Uri)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlUrlResolver")]
	public class HandlerClass28
	{
		// System.Xml.XmlUrlResolver.set_Credentials
		private static bool CallerMethod524(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlUrlResolver.GetEntity
		private static bool CallerMethod525(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlUrlResolver..ctor
		private static bool CallerMethod526(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void set_Credentials(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.ICredentials value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod524), "FILE", "System.Xml.XmlUrlResolver.set_Credentials(ICredentials)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Object GetEntity(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri absoluteUri, System.String role, System.Type ofObjectToReturn)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = absoluteUri;
			paramObjs[2] = role;
			paramObjs[3] = ofObjectToReturn;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod525), "FILE", "System.Xml.XmlUrlResolver.GetEntity(Uri, String, Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod526), "FILE", "System.Xml.XmlUrlResolver.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlParserContext")]
	public class HandlerClass29
	{
		// System.Xml.XmlParserContext.get_NameTable
		private static bool CallerMethod527(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext.set_NameTable
		private static bool CallerMethod528(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext.get_NamespaceManager
		private static bool CallerMethod529(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext.set_NamespaceManager
		private static bool CallerMethod530(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext.get_DocTypeName
		private static bool CallerMethod531(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext.set_DocTypeName
		private static bool CallerMethod532(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext.get_PublicId
		private static bool CallerMethod533(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext.set_PublicId
		private static bool CallerMethod534(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext.get_SystemId
		private static bool CallerMethod535(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext.set_SystemId
		private static bool CallerMethod536(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext.get_BaseURI
		private static bool CallerMethod537(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext.set_BaseURI
		private static bool CallerMethod538(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext.get_InternalSubset
		private static bool CallerMethod539(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext.set_InternalSubset
		private static bool CallerMethod540(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext.get_XmlLang
		private static bool CallerMethod541(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext.set_XmlLang
		private static bool CallerMethod542(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext.get_XmlSpace
		private static bool CallerMethod543(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext.set_XmlSpace
		private static bool CallerMethod544(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext.get_Encoding
		private static bool CallerMethod545(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext.set_Encoding
		private static bool CallerMethod546(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext..ctor
		private static bool CallerMethod547(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext..ctor
		private static bool CallerMethod548(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext..ctor
		private static bool CallerMethod549(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 10) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlParserContext..ctor
		private static bool CallerMethod550(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 11) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Xml.XmlNameTable get_NameTable(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod527), "FILE", "System.Xml.XmlParserContext.get_NameTable()", paramObjs, typeof(System.Xml.XmlNameTable), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNameTable)retValue;
		}

		public static void set_NameTable(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNameTable value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod528), "FILE", "System.Xml.XmlParserContext.set_NameTable(XmlNameTable)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Xml.XmlNamespaceManager get_NamespaceManager(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod529), "FILE", "System.Xml.XmlParserContext.get_NamespaceManager()", paramObjs, typeof(System.Xml.XmlNamespaceManager), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNamespaceManager)retValue;
		}

		public static void set_NamespaceManager(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlNamespaceManager value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod530), "FILE", "System.Xml.XmlParserContext.set_NamespaceManager(XmlNamespaceManager)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_DocTypeName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod531), "FILE", "System.Xml.XmlParserContext.get_DocTypeName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_DocTypeName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod532), "FILE", "System.Xml.XmlParserContext.set_DocTypeName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_PublicId(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod533), "FILE", "System.Xml.XmlParserContext.get_PublicId()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_PublicId(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod534), "FILE", "System.Xml.XmlParserContext.set_PublicId(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_SystemId(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod535), "FILE", "System.Xml.XmlParserContext.get_SystemId()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_SystemId(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod536), "FILE", "System.Xml.XmlParserContext.set_SystemId(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_BaseURI(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod537), "FILE", "System.Xml.XmlParserContext.get_BaseURI()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_BaseURI(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod538), "FILE", "System.Xml.XmlParserContext.set_BaseURI(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_InternalSubset(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod539), "FILE", "System.Xml.XmlParserContext.get_InternalSubset()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_InternalSubset(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod540), "FILE", "System.Xml.XmlParserContext.set_InternalSubset(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_XmlLang(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod541), "FILE", "System.Xml.XmlParserContext.get_XmlLang()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_XmlLang(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod542), "FILE", "System.Xml.XmlParserContext.set_XmlLang(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Xml.XmlSpace get_XmlSpace(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod543), "FILE", "System.Xml.XmlParserContext.get_XmlSpace()", paramObjs, typeof(System.Xml.XmlSpace), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlSpace)retValue;
		}

		public static void set_XmlSpace(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlSpace value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod544), "FILE", "System.Xml.XmlParserContext.set_XmlSpace(XmlSpace)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Text.Encoding get_Encoding(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod545), "FILE", "System.Xml.XmlParserContext.get_Encoding()", paramObjs, typeof(System.Text.Encoding), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.Encoding)retValue;
		}

		public static void set_Encoding(HeatDotNet.MethodInterceptInfo methodIntercept, System.Text.Encoding value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod546), "FILE", "System.Xml.XmlParserContext.set_Encoding(Encoding)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Xml.XmlNameTable nt, System.Xml.XmlNamespaceManager nsMgr, System.String xmlLang, System.Xml.XmlSpace xmlSpace)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = nt;
			paramObjs[2] = nsMgr;
			paramObjs[3] = xmlLang;
			paramObjs[4] = xmlSpace;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod547), "FILE", "System.Xml.XmlParserContext.ctor(XmlNameTable, XmlNamespaceManager, String, XmlSpace)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Xml.XmlNameTable nt, System.Xml.XmlNamespaceManager nsMgr, System.String xmlLang, System.Xml.XmlSpace xmlSpace, System.Text.Encoding enc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = nt;
			paramObjs[2] = nsMgr;
			paramObjs[3] = xmlLang;
			paramObjs[4] = xmlSpace;
			paramObjs[5] = enc;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod548), "FILE", "System.Xml.XmlParserContext.ctor(XmlNameTable, XmlNamespaceManager, String, XmlSpace, Encoding)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Xml.XmlNameTable nt, System.Xml.XmlNamespaceManager nsMgr, System.String docTypeName, System.String pubId, System.String sysId, System.String internalSubset, System.String baseURI, System.String xmlLang, System.Xml.XmlSpace xmlSpace)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[10];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = nt;
			paramObjs[2] = nsMgr;
			paramObjs[3] = docTypeName;
			paramObjs[4] = pubId;
			paramObjs[5] = sysId;
			paramObjs[6] = internalSubset;
			paramObjs[7] = baseURI;
			paramObjs[8] = xmlLang;
			paramObjs[9] = xmlSpace;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod549), "FILE", "System.Xml.XmlParserContext.ctor(XmlNameTable, XmlNamespaceManager, String, String, String, String, String, String, XmlSpace)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Xml.XmlNameTable nt, System.Xml.XmlNamespaceManager nsMgr, System.String docTypeName, System.String pubId, System.String sysId, System.String internalSubset, System.String baseURI, System.String xmlLang, System.Xml.XmlSpace xmlSpace, System.Text.Encoding enc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[11];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = nt;
			paramObjs[2] = nsMgr;
			paramObjs[3] = docTypeName;
			paramObjs[4] = pubId;
			paramObjs[5] = sysId;
			paramObjs[6] = internalSubset;
			paramObjs[7] = baseURI;
			paramObjs[8] = xmlLang;
			paramObjs[9] = xmlSpace;
			paramObjs[10] = enc;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod550), "FILE", "System.Xml.XmlParserContext.ctor(XmlNameTable, XmlNamespaceManager, String, String, String, String, String, String, XmlSpace, Encoding)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlProcessingInstruction")]
	public class HandlerClass30
	{
		// System.Xml.XmlProcessingInstruction.WriteContentTo
		private static bool CallerMethod551(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlProcessingInstruction.WriteTo
		private static bool CallerMethod552(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlProcessingInstruction.set_InnerText
		private static bool CallerMethod553(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlProcessingInstruction.get_InnerText
		private static bool CallerMethod554(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlProcessingInstruction.get_LocalName
		private static bool CallerMethod555(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlProcessingInstruction.CloneNode
		private static bool CallerMethod556(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlProcessingInstruction.get_NodeType
		private static bool CallerMethod557(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlProcessingInstruction.set_Value
		private static bool CallerMethod558(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlProcessingInstruction.get_Value
		private static bool CallerMethod559(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlProcessingInstruction.get_Name
		private static bool CallerMethod560(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlProcessingInstruction.get_Target
		private static bool CallerMethod561(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlProcessingInstruction.get_Data
		private static bool CallerMethod562(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlProcessingInstruction.set_Data
		private static bool CallerMethod563(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void WriteContentTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod551), "FILE", "System.Xml.XmlProcessingInstruction.WriteContentTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod552), "FILE", "System.Xml.XmlProcessingInstruction.WriteTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_InnerText(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod553), "FILE", "System.Xml.XmlProcessingInstruction.set_InnerText(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_InnerText(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod554), "FILE", "System.Xml.XmlProcessingInstruction.get_InnerText()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_LocalName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod555), "FILE", "System.Xml.XmlProcessingInstruction.get_LocalName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNode CloneNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean deep)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = deep;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod556), "FILE", "System.Xml.XmlProcessingInstruction.CloneNode(Boolean)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNodeType get_NodeType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod557), "FILE", "System.Xml.XmlProcessingInstruction.get_NodeType()", paramObjs, typeof(System.Xml.XmlNodeType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeType)retValue;
		}

		public static void set_Value(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod558), "FILE", "System.Xml.XmlProcessingInstruction.set_Value(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Value(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod559), "FILE", "System.Xml.XmlProcessingInstruction.get_Value()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod560), "FILE", "System.Xml.XmlProcessingInstruction.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Target(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod561), "FILE", "System.Xml.XmlProcessingInstruction.get_Target()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Data(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod562), "FILE", "System.Xml.XmlProcessingInstruction.get_Data()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Data(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod563), "FILE", "System.Xml.XmlProcessingInstruction.set_Data(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlQualifiedName")]
	public class HandlerClass31
	{
		// System.Xml.XmlQualifiedName.GetHashCode
		private static bool CallerMethod564(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlQualifiedName.Equals
		private static bool CallerMethod565(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlQualifiedName.ToString
		private static bool CallerMethod566(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlQualifiedName.get_Namespace
		private static bool CallerMethod567(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlQualifiedName.get_Name
		private static bool CallerMethod568(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlQualifiedName.get_IsEmpty
		private static bool CallerMethod569(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlQualifiedName.op_Equality
		private static bool CallerMethod570(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlQualifiedName.op_Inequality
		private static bool CallerMethod571(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlQualifiedName.ToString
		private static bool CallerMethod572(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlQualifiedName..ctor
		private static bool CallerMethod573(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlQualifiedName..ctor
		private static bool CallerMethod574(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlQualifiedName..ctor
		private static bool CallerMethod575(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod564), "FILE", "System.Xml.XmlQualifiedName.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object other)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = other;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod565), "FILE", "System.Xml.XmlQualifiedName.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod566), "FILE", "System.Xml.XmlQualifiedName.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Namespace(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod567), "FILE", "System.Xml.XmlQualifiedName.get_Namespace()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod568), "FILE", "System.Xml.XmlQualifiedName.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean get_IsEmpty(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod569), "FILE", "System.Xml.XmlQualifiedName.get_IsEmpty()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean op_Equality(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlQualifiedName a, System.Xml.XmlQualifiedName b)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = a;
			paramObjs[2] = b;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod570), "FILE", "System.Xml.XmlQualifiedName.op_Equality(XmlQualifiedName, XmlQualifiedName)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean op_Inequality(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlQualifiedName a, System.Xml.XmlQualifiedName b)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = a;
			paramObjs[2] = b;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod571), "FILE", "System.Xml.XmlQualifiedName.op_Inequality(XmlQualifiedName, XmlQualifiedName)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String ns)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = ns;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod572), "FILE", "System.Xml.XmlQualifiedName.ToString(String, String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod573), "FILE", "System.Xml.XmlQualifiedName.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod574), "FILE", "System.Xml.XmlQualifiedName.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String name, System.String ns)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = name;
			paramObjs[2] = ns;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod575), "FILE", "System.Xml.XmlQualifiedName.ctor(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlSecureResolver")]
	public class HandlerClass32
	{
		// System.Xml.XmlSecureResolver.set_Credentials
		private static bool CallerMethod576(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlSecureResolver.ResolveUri
		private static bool CallerMethod577(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlSecureResolver.GetEntity
		private static bool CallerMethod578(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlSecureResolver.CreateEvidenceForUrl
		private static bool CallerMethod579(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlSecureResolver..ctor
		private static bool CallerMethod580(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlSecureResolver..ctor
		private static bool CallerMethod581(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlSecureResolver..ctor
		private static bool CallerMethod582(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void set_Credentials(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.ICredentials value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod576), "FILE", "System.Xml.XmlSecureResolver.set_Credentials(ICredentials)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Uri ResolveUri(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri baseUri, System.String relativeUri)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = baseUri;
			paramObjs[2] = relativeUri;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod577), "FILE", "System.Xml.XmlSecureResolver.ResolveUri(Uri, String)", paramObjs, typeof(System.Uri), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Uri)retValue;
		}

		public static System.Object GetEntity(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri absoluteUri, System.String role, System.Type ofObjectToReturn)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = absoluteUri;
			paramObjs[2] = role;
			paramObjs[3] = ofObjectToReturn;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod578), "FILE", "System.Xml.XmlSecureResolver.GetEntity(Uri, String, Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Security.Policy.Evidence CreateEvidenceForUrl(HeatDotNet.MethodInterceptInfo methodIntercept, System.String securityUrl)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = securityUrl;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod579), "FILE", "System.Xml.XmlSecureResolver.CreateEvidenceForUrl(String)", paramObjs, typeof(System.Security.Policy.Evidence), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Policy.Evidence)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Xml.XmlResolver resolver, System.String securityUrl)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = resolver;
			paramObjs[2] = securityUrl;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod580), "FILE", "System.Xml.XmlSecureResolver.ctor(XmlResolver, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = resolver;
			paramObjs[2] = evidence;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod581), "FILE", "System.Xml.XmlSecureResolver.ctor(XmlResolver, Evidence)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Xml.XmlResolver resolver, System.Security.PermissionSet permissionSet)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = resolver;
			paramObjs[2] = permissionSet;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod582), "FILE", "System.Xml.XmlSecureResolver.ctor(XmlResolver, PermissionSet)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlSignificantWhitespace")]
	public class HandlerClass33
	{
		// System.Xml.XmlSignificantWhitespace.WriteContentTo
		private static bool CallerMethod583(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlSignificantWhitespace.WriteTo
		private static bool CallerMethod584(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlSignificantWhitespace.get_LocalName
		private static bool CallerMethod585(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlSignificantWhitespace.CloneNode
		private static bool CallerMethod586(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlSignificantWhitespace.get_NodeType
		private static bool CallerMethod587(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlSignificantWhitespace.set_Value
		private static bool CallerMethod588(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlSignificantWhitespace.get_Value
		private static bool CallerMethod589(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlSignificantWhitespace.get_Name
		private static bool CallerMethod590(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void WriteContentTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod583), "FILE", "System.Xml.XmlSignificantWhitespace.WriteContentTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod584), "FILE", "System.Xml.XmlSignificantWhitespace.WriteTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_LocalName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod585), "FILE", "System.Xml.XmlSignificantWhitespace.get_LocalName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNode CloneNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean deep)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = deep;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod586), "FILE", "System.Xml.XmlSignificantWhitespace.CloneNode(Boolean)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNodeType get_NodeType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod587), "FILE", "System.Xml.XmlSignificantWhitespace.get_NodeType()", paramObjs, typeof(System.Xml.XmlNodeType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeType)retValue;
		}

		public static void set_Value(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod588), "FILE", "System.Xml.XmlSignificantWhitespace.set_Value(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Value(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod589), "FILE", "System.Xml.XmlSignificantWhitespace.get_Value()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod590), "FILE", "System.Xml.XmlSignificantWhitespace.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlText")]
	public class HandlerClass34
	{
		// System.Xml.XmlText.SplitText
		private static bool CallerMethod591(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlText.WriteContentTo
		private static bool CallerMethod592(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlText.WriteTo
		private static bool CallerMethod593(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlText.get_LocalName
		private static bool CallerMethod594(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlText.CloneNode
		private static bool CallerMethod595(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlText.get_NodeType
		private static bool CallerMethod596(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlText.set_Value
		private static bool CallerMethod597(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlText.get_Value
		private static bool CallerMethod598(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlText.get_Name
		private static bool CallerMethod599(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Xml.XmlText SplitText(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 offset)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = offset;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod591), "FILE", "System.Xml.XmlText.SplitText(Int32)", paramObjs, typeof(System.Xml.XmlText), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlText)retValue;
		}

		public static void WriteContentTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod592), "FILE", "System.Xml.XmlText.WriteContentTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod593), "FILE", "System.Xml.XmlText.WriteTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_LocalName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod594), "FILE", "System.Xml.XmlText.get_LocalName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNode CloneNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean deep)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = deep;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod595), "FILE", "System.Xml.XmlText.CloneNode(Boolean)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNodeType get_NodeType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod596), "FILE", "System.Xml.XmlText.get_NodeType()", paramObjs, typeof(System.Xml.XmlNodeType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeType)retValue;
		}

		public static void set_Value(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod597), "FILE", "System.Xml.XmlText.set_Value(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Value(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod598), "FILE", "System.Xml.XmlText.get_Value()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod599), "FILE", "System.Xml.XmlText.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlValidatingReader")]
	public class HandlerClass35
	{
		// System.Xml.XmlValidatingReader.ReadAttributeValue
		private static bool CallerMethod600(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.ResolveEntity
		private static bool CallerMethod601(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.LookupNamespace
		private static bool CallerMethod602(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_NameTable
		private static bool CallerMethod603(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.ReadString
		private static bool CallerMethod604(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_ReadState
		private static bool CallerMethod605(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.Close
		private static bool CallerMethod606(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_EOF
		private static bool CallerMethod607(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.Read
		private static bool CallerMethod608(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.MoveToElement
		private static bool CallerMethod609(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.MoveToNextAttribute
		private static bool CallerMethod610(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.MoveToFirstAttribute
		private static bool CallerMethod611(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.MoveToAttribute
		private static bool CallerMethod612(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.MoveToAttribute
		private static bool CallerMethod613(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_CanResolveEntity
		private static bool CallerMethod614(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.MoveToAttribute
		private static bool CallerMethod615(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_Item
		private static bool CallerMethod616(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_Item
		private static bool CallerMethod617(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_Item
		private static bool CallerMethod618(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.GetAttribute
		private static bool CallerMethod619(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.GetAttribute
		private static bool CallerMethod620(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.GetAttribute
		private static bool CallerMethod621(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_AttributeCount
		private static bool CallerMethod622(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_XmlLang
		private static bool CallerMethod623(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_XmlSpace
		private static bool CallerMethod624(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_QuoteChar
		private static bool CallerMethod625(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_IsDefault
		private static bool CallerMethod626(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_IsEmptyElement
		private static bool CallerMethod627(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_BaseURI
		private static bool CallerMethod628(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_Depth
		private static bool CallerMethod629(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_Value
		private static bool CallerMethod630(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_HasValue
		private static bool CallerMethod631(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_Prefix
		private static bool CallerMethod632(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_NamespaceURI
		private static bool CallerMethod633(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_LocalName
		private static bool CallerMethod634(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_Name
		private static bool CallerMethod635(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_NodeType
		private static bool CallerMethod636(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.add_ValidationEventHandler
		private static bool CallerMethod637(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.remove_ValidationEventHandler
		private static bool CallerMethod638(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_Schemas
		private static bool CallerMethod639(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_SchemaType
		private static bool CallerMethod640(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.ReadTypedValue
		private static bool CallerMethod641(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_Reader
		private static bool CallerMethod642(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_ValidationType
		private static bool CallerMethod643(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.set_ValidationType
		private static bool CallerMethod644(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_EntityHandling
		private static bool CallerMethod645(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.set_EntityHandling
		private static bool CallerMethod646(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_Encoding
		private static bool CallerMethod647(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.set_XmlResolver
		private static bool CallerMethod648(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.get_Namespaces
		private static bool CallerMethod649(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader.set_Namespaces
		private static bool CallerMethod650(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader..ctor
		private static bool CallerMethod651(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader..ctor
		private static bool CallerMethod652(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlValidatingReader..ctor
		private static bool CallerMethod653(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean ReadAttributeValue(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod600), "FILE", "System.Xml.XmlValidatingReader.ReadAttributeValue()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ResolveEntity(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod601), "FILE", "System.Xml.XmlValidatingReader.ResolveEntity()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String LookupNamespace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String prefix)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = prefix;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod602), "FILE", "System.Xml.XmlValidatingReader.LookupNamespace(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNameTable get_NameTable(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod603), "FILE", "System.Xml.XmlValidatingReader.get_NameTable()", paramObjs, typeof(System.Xml.XmlNameTable), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNameTable)retValue;
		}

		public static System.String ReadString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod604), "FILE", "System.Xml.XmlValidatingReader.ReadString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.ReadState get_ReadState(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod605), "FILE", "System.Xml.XmlValidatingReader.get_ReadState()", paramObjs, typeof(System.Xml.ReadState), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.ReadState)retValue;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod606), "FILE", "System.Xml.XmlValidatingReader.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_EOF(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod607), "FILE", "System.Xml.XmlValidatingReader.get_EOF()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean Read(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod608), "FILE", "System.Xml.XmlValidatingReader.Read()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean MoveToElement(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod609), "FILE", "System.Xml.XmlValidatingReader.MoveToElement()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean MoveToNextAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod610), "FILE", "System.Xml.XmlValidatingReader.MoveToNextAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean MoveToFirstAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod611), "FILE", "System.Xml.XmlValidatingReader.MoveToFirstAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void MoveToAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 i)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = i;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod612), "FILE", "System.Xml.XmlValidatingReader.MoveToAttribute(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean MoveToAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod613), "FILE", "System.Xml.XmlValidatingReader.MoveToAttribute(String, String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_CanResolveEntity(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod614), "FILE", "System.Xml.XmlValidatingReader.get_CanResolveEntity()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean MoveToAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod615), "FILE", "System.Xml.XmlValidatingReader.MoveToAttribute(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod616), "FILE", "System.Xml.XmlValidatingReader.get_Item(String, String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod617), "FILE", "System.Xml.XmlValidatingReader.get_Item(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 i)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = i;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod618), "FILE", "System.Xml.XmlValidatingReader.get_Item(Int32)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 i)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = i;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod619), "FILE", "System.Xml.XmlValidatingReader.GetAttribute(Int32)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String localName, System.String namespaceURI)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localName;
			paramObjs[2] = namespaceURI;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod620), "FILE", "System.Xml.XmlValidatingReader.GetAttribute(String, String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod621), "FILE", "System.Xml.XmlValidatingReader.GetAttribute(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_AttributeCount(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod622), "FILE", "System.Xml.XmlValidatingReader.get_AttributeCount()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String get_XmlLang(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod623), "FILE", "System.Xml.XmlValidatingReader.get_XmlLang()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlSpace get_XmlSpace(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod624), "FILE", "System.Xml.XmlValidatingReader.get_XmlSpace()", paramObjs, typeof(System.Xml.XmlSpace), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlSpace)retValue;
		}

		public static System.Char get_QuoteChar(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod625), "FILE", "System.Xml.XmlValidatingReader.get_QuoteChar()", paramObjs, typeof(System.Char), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Char)retValue;
		}

		public static System.Boolean get_IsDefault(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod626), "FILE", "System.Xml.XmlValidatingReader.get_IsDefault()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsEmptyElement(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod627), "FILE", "System.Xml.XmlValidatingReader.get_IsEmptyElement()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_BaseURI(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod628), "FILE", "System.Xml.XmlValidatingReader.get_BaseURI()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_Depth(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod629), "FILE", "System.Xml.XmlValidatingReader.get_Depth()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String get_Value(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod630), "FILE", "System.Xml.XmlValidatingReader.get_Value()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean get_HasValue(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod631), "FILE", "System.Xml.XmlValidatingReader.get_HasValue()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_Prefix(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod632), "FILE", "System.Xml.XmlValidatingReader.get_Prefix()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_NamespaceURI(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod633), "FILE", "System.Xml.XmlValidatingReader.get_NamespaceURI()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_LocalName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod634), "FILE", "System.Xml.XmlValidatingReader.get_LocalName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod635), "FILE", "System.Xml.XmlValidatingReader.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNodeType get_NodeType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod636), "FILE", "System.Xml.XmlValidatingReader.get_NodeType()", paramObjs, typeof(System.Xml.XmlNodeType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeType)retValue;
		}

		public static void add_ValidationEventHandler(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.Schema.ValidationEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod637), "FILE", "System.Xml.XmlValidatingReader.add_ValidationEventHandler(ValidationEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void remove_ValidationEventHandler(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.Schema.ValidationEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod638), "FILE", "System.Xml.XmlValidatingReader.remove_ValidationEventHandler(ValidationEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Xml.Schema.XmlSchemaCollection get_Schemas(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod639), "FILE", "System.Xml.XmlValidatingReader.get_Schemas()", paramObjs, typeof(System.Xml.Schema.XmlSchemaCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.Schema.XmlSchemaCollection)retValue;
		}

		public static System.Object get_SchemaType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod640), "FILE", "System.Xml.XmlValidatingReader.get_SchemaType()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object ReadTypedValue(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod641), "FILE", "System.Xml.XmlValidatingReader.ReadTypedValue()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Xml.XmlReader get_Reader(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod642), "FILE", "System.Xml.XmlValidatingReader.get_Reader()", paramObjs, typeof(System.Xml.XmlReader), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlReader)retValue;
		}

		public static System.Xml.ValidationType get_ValidationType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod643), "FILE", "System.Xml.XmlValidatingReader.get_ValidationType()", paramObjs, typeof(System.Xml.ValidationType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.ValidationType)retValue;
		}

		public static void set_ValidationType(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.ValidationType value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod644), "FILE", "System.Xml.XmlValidatingReader.set_ValidationType(ValidationType)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Xml.EntityHandling get_EntityHandling(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod645), "FILE", "System.Xml.XmlValidatingReader.get_EntityHandling()", paramObjs, typeof(System.Xml.EntityHandling), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.EntityHandling)retValue;
		}

		public static void set_EntityHandling(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.EntityHandling value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod646), "FILE", "System.Xml.XmlValidatingReader.set_EntityHandling(EntityHandling)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Text.Encoding get_Encoding(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod647), "FILE", "System.Xml.XmlValidatingReader.get_Encoding()", paramObjs, typeof(System.Text.Encoding), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.Encoding)retValue;
		}

		public static void set_XmlResolver(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlResolver value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod648), "FILE", "System.Xml.XmlValidatingReader.set_XmlResolver(XmlResolver)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_Namespaces(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod649), "FILE", "System.Xml.XmlValidatingReader.get_Namespaces()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_Namespaces(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod650), "FILE", "System.Xml.XmlValidatingReader.set_Namespaces(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Xml.XmlReader reader)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = reader;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod651), "FILE", "System.Xml.XmlValidatingReader.ctor(XmlReader)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = xmlFragment;
			paramObjs[2] = fragType;
			paramObjs[3] = context;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod652), "FILE", "System.Xml.XmlValidatingReader.ctor(String, XmlNodeType, XmlParserContext)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = xmlFragment;
			paramObjs[2] = fragType;
			paramObjs[3] = context;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod653), "FILE", "System.Xml.XmlValidatingReader.ctor(Stream, XmlNodeType, XmlParserContext)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Xml.XmlWhitespace")]
	public class HandlerClass36
	{
		// System.Xml.XmlWhitespace.WriteContentTo
		private static bool CallerMethod654(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlWhitespace.WriteTo
		private static bool CallerMethod655(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlWhitespace.get_LocalName
		private static bool CallerMethod656(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlWhitespace.CloneNode
		private static bool CallerMethod657(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlWhitespace.get_NodeType
		private static bool CallerMethod658(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlWhitespace.set_Value
		private static bool CallerMethod659(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlWhitespace.get_Value
		private static bool CallerMethod660(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Xml.XmlWhitespace.get_Name
		private static bool CallerMethod661(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void WriteContentTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod654), "FILE", "System.Xml.XmlWhitespace.WriteContentTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Xml.XmlWriter w)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = w;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod655), "FILE", "System.Xml.XmlWhitespace.WriteTo(XmlWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_LocalName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod656), "FILE", "System.Xml.XmlWhitespace.get_LocalName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Xml.XmlNode CloneNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean deep)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = deep;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod657), "FILE", "System.Xml.XmlWhitespace.CloneNode(Boolean)", paramObjs, typeof(System.Xml.XmlNode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNode)retValue;
		}

		public static System.Xml.XmlNodeType get_NodeType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod658), "FILE", "System.Xml.XmlWhitespace.get_NodeType()", paramObjs, typeof(System.Xml.XmlNodeType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlNodeType)retValue;
		}

		public static void set_Value(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod659), "FILE", "System.Xml.XmlWhitespace.set_Value(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Value(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod660), "FILE", "System.Xml.XmlWhitespace.get_Value()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemXMLReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod661), "FILE", "System.Xml.XmlWhitespace.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

	};

}
