// This file was automatically generated by GenerateReplacementLibrary.  Do not modify.

using Replacement;
using System;


namespace Replacement
{
	public class SystemReplacementLibrary
	{
		public static DotNetReplacementLibrary ReplacementLibrary = new DotNetReplacementLibrary("System.dll");
	};
}


namespace HeatInterceptHandlers
{
	[HeatDotNet.InterceptTypeName("System.ComponentModel.DescriptionAttribute")]
	public class HandlerClass1
	{
		// System.ComponentModel.DescriptionAttribute.get_Description
		private static bool CallerMethod1(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DescriptionAttribute.GetHashCode
		private static bool CallerMethod2(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DescriptionAttribute.Equals
		private static bool CallerMethod3(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DescriptionAttribute..ctor
		private static bool CallerMethod4(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DescriptionAttribute..ctor
		private static bool CallerMethod5(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_Description(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1), "LIBRARY", "System.ComponentModel.DescriptionAttribute.get_Description()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2), "LIBRARY", "System.ComponentModel.DescriptionAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod3), "LIBRARY", "System.ComponentModel.DescriptionAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod4), "LIBRARY", "System.ComponentModel.DescriptionAttribute.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String description)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = description;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod5), "LIBRARY", "System.ComponentModel.DescriptionAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.CategoryAttribute")]
	public class HandlerClass2
	{
		// System.ComponentModel.CategoryAttribute.IsDefaultAttribute
		private static bool CallerMethod6(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CategoryAttribute.GetHashCode
		private static bool CallerMethod7(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CategoryAttribute.Equals
		private static bool CallerMethod8(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CategoryAttribute.get_Category
		private static bool CallerMethod9(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CategoryAttribute.get_Action
		private static bool CallerMethod10(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CategoryAttribute.get_Appearance
		private static bool CallerMethod11(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CategoryAttribute.get_Behavior
		private static bool CallerMethod12(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CategoryAttribute.get_Data
		private static bool CallerMethod13(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CategoryAttribute.get_Default
		private static bool CallerMethod14(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CategoryAttribute.get_Design
		private static bool CallerMethod15(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CategoryAttribute.get_DragDrop
		private static bool CallerMethod16(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CategoryAttribute.get_Focus
		private static bool CallerMethod17(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CategoryAttribute.get_Format
		private static bool CallerMethod18(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CategoryAttribute.get_Key
		private static bool CallerMethod19(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CategoryAttribute.get_Layout
		private static bool CallerMethod20(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CategoryAttribute.get_Mouse
		private static bool CallerMethod21(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CategoryAttribute.get_WindowStyle
		private static bool CallerMethod22(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CategoryAttribute..ctor
		private static bool CallerMethod23(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CategoryAttribute..ctor
		private static bool CallerMethod24(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefaultAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod6), "LIBRARY", "System.ComponentModel.CategoryAttribute.IsDefaultAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod7), "LIBRARY", "System.ComponentModel.CategoryAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod8), "LIBRARY", "System.ComponentModel.CategoryAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_Category(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod9), "LIBRARY", "System.ComponentModel.CategoryAttribute.get_Category()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.ComponentModel.CategoryAttribute get_Action(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod10), "LIBRARY", "System.ComponentModel.CategoryAttribute.get_Action()", paramObjs, typeof(System.ComponentModel.CategoryAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.CategoryAttribute)retValue;
		}

		public static System.ComponentModel.CategoryAttribute get_Appearance(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod11), "LIBRARY", "System.ComponentModel.CategoryAttribute.get_Appearance()", paramObjs, typeof(System.ComponentModel.CategoryAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.CategoryAttribute)retValue;
		}

		public static System.ComponentModel.CategoryAttribute get_Behavior(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod12), "LIBRARY", "System.ComponentModel.CategoryAttribute.get_Behavior()", paramObjs, typeof(System.ComponentModel.CategoryAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.CategoryAttribute)retValue;
		}

		public static System.ComponentModel.CategoryAttribute get_Data(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod13), "LIBRARY", "System.ComponentModel.CategoryAttribute.get_Data()", paramObjs, typeof(System.ComponentModel.CategoryAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.CategoryAttribute)retValue;
		}

		public static System.ComponentModel.CategoryAttribute get_Default(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod14), "LIBRARY", "System.ComponentModel.CategoryAttribute.get_Default()", paramObjs, typeof(System.ComponentModel.CategoryAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.CategoryAttribute)retValue;
		}

		public static System.ComponentModel.CategoryAttribute get_Design(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod15), "LIBRARY", "System.ComponentModel.CategoryAttribute.get_Design()", paramObjs, typeof(System.ComponentModel.CategoryAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.CategoryAttribute)retValue;
		}

		public static System.ComponentModel.CategoryAttribute get_DragDrop(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod16), "LIBRARY", "System.ComponentModel.CategoryAttribute.get_DragDrop()", paramObjs, typeof(System.ComponentModel.CategoryAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.CategoryAttribute)retValue;
		}

		public static System.ComponentModel.CategoryAttribute get_Focus(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod17), "LIBRARY", "System.ComponentModel.CategoryAttribute.get_Focus()", paramObjs, typeof(System.ComponentModel.CategoryAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.CategoryAttribute)retValue;
		}

		public static System.ComponentModel.CategoryAttribute get_Format(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod18), "LIBRARY", "System.ComponentModel.CategoryAttribute.get_Format()", paramObjs, typeof(System.ComponentModel.CategoryAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.CategoryAttribute)retValue;
		}

		public static System.ComponentModel.CategoryAttribute get_Key(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod19), "LIBRARY", "System.ComponentModel.CategoryAttribute.get_Key()", paramObjs, typeof(System.ComponentModel.CategoryAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.CategoryAttribute)retValue;
		}

		public static System.ComponentModel.CategoryAttribute get_Layout(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod20), "LIBRARY", "System.ComponentModel.CategoryAttribute.get_Layout()", paramObjs, typeof(System.ComponentModel.CategoryAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.CategoryAttribute)retValue;
		}

		public static System.ComponentModel.CategoryAttribute get_Mouse(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod21), "LIBRARY", "System.ComponentModel.CategoryAttribute.get_Mouse()", paramObjs, typeof(System.ComponentModel.CategoryAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.CategoryAttribute)retValue;
		}

		public static System.ComponentModel.CategoryAttribute get_WindowStyle(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod22), "LIBRARY", "System.ComponentModel.CategoryAttribute.get_WindowStyle()", paramObjs, typeof(System.ComponentModel.CategoryAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.CategoryAttribute)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod23), "LIBRARY", "System.ComponentModel.CategoryAttribute.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod24), "LIBRARY", "System.ComponentModel.CategoryAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Text.RegularExpressions.Regex")]
	public class HandlerClass3
	{
		// System.Text.RegularExpressions.Regex.ToString
		private static bool CallerMethod25(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.get_RightToLeft
		private static bool CallerMethod26(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.get_Options
		private static bool CallerMethod27(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.GetGroupNames
		private static bool CallerMethod28(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.GetGroupNumbers
		private static bool CallerMethod29(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.GroupNameFromNumber
		private static bool CallerMethod30(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.GroupNumberFromName
		private static bool CallerMethod31(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.IsMatch
		private static bool CallerMethod32(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.IsMatch
		private static bool CallerMethod33(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Match
		private static bool CallerMethod34(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Match
		private static bool CallerMethod35(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Match
		private static bool CallerMethod36(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Matches
		private static bool CallerMethod37(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Matches
		private static bool CallerMethod38(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Replace
		private static bool CallerMethod39(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Replace
		private static bool CallerMethod40(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Replace
		private static bool CallerMethod41(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Replace
		private static bool CallerMethod42(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Replace
		private static bool CallerMethod43(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Replace
		private static bool CallerMethod44(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Split
		private static bool CallerMethod45(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Split
		private static bool CallerMethod46(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Split
		private static bool CallerMethod47(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Escape
		private static bool CallerMethod48(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Unescape
		private static bool CallerMethod49(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.IsMatch
		private static bool CallerMethod50(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.IsMatch
		private static bool CallerMethod51(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Match
		private static bool CallerMethod52(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Match
		private static bool CallerMethod53(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Matches
		private static bool CallerMethod54(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Matches
		private static bool CallerMethod55(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Replace
		private static bool CallerMethod56(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Replace
		private static bool CallerMethod57(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Replace
		private static bool CallerMethod58(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Replace
		private static bool CallerMethod59(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Split
		private static bool CallerMethod60(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.Split
		private static bool CallerMethod61(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.CompileToAssembly
		private static bool CallerMethod62(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.CompileToAssembly
		private static bool CallerMethod63(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex.CompileToAssembly
		private static bool CallerMethod64(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex..ctor
		private static bool CallerMethod65(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Regex..ctor
		private static bool CallerMethod66(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod25), "FILE", "System.Text.RegularExpressions.Regex.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean get_RightToLeft(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod26), "FILE", "System.Text.RegularExpressions.Regex.get_RightToLeft()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Text.RegularExpressions.RegexOptions get_Options(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod27), "FILE", "System.Text.RegularExpressions.Regex.get_Options()", paramObjs, typeof(System.Text.RegularExpressions.RegexOptions), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.RegularExpressions.RegexOptions)retValue;
		}

		public static System.String[] GetGroupNames(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod28), "FILE", "System.Text.RegularExpressions.Regex.GetGroupNames()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.Int32[] GetGroupNumbers(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod29), "FILE", "System.Text.RegularExpressions.Regex.GetGroupNumbers()", paramObjs, typeof(System.Int32[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32[])retValue;
		}

		public static System.String GroupNameFromNumber(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 i)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = i;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod30), "FILE", "System.Text.RegularExpressions.Regex.GroupNameFromNumber(Int32)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 GroupNumberFromName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod31), "FILE", "System.Text.RegularExpressions.Regex.GroupNumberFromName(String)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean IsMatch(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod32), "FILE", "System.Text.RegularExpressions.Regex.IsMatch(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsMatch(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.Int32 startat)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = startat;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod33), "FILE", "System.Text.RegularExpressions.Regex.IsMatch(String, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Text.RegularExpressions.Match Match(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod34), "FILE", "System.Text.RegularExpressions.Regex.Match(String)", paramObjs, typeof(System.Text.RegularExpressions.Match), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.RegularExpressions.Match)retValue;
		}

		public static System.Text.RegularExpressions.Match Match(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.Int32 startat)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = startat;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod35), "FILE", "System.Text.RegularExpressions.Regex.Match(String, Int32)", paramObjs, typeof(System.Text.RegularExpressions.Match), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.RegularExpressions.Match)retValue;
		}

		public static System.Text.RegularExpressions.Match Match(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.Int32 beginning, System.Int32 length)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = beginning;
			paramObjs[3] = length;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod36), "FILE", "System.Text.RegularExpressions.Regex.Match(String, Int32, Int32)", paramObjs, typeof(System.Text.RegularExpressions.Match), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.RegularExpressions.Match)retValue;
		}

		public static System.Text.RegularExpressions.MatchCollection Matches(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod37), "FILE", "System.Text.RegularExpressions.Regex.Matches(String)", paramObjs, typeof(System.Text.RegularExpressions.MatchCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.RegularExpressions.MatchCollection)retValue;
		}

		public static System.Text.RegularExpressions.MatchCollection Matches(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.Int32 startat)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = startat;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod38), "FILE", "System.Text.RegularExpressions.Regex.Matches(String, Int32)", paramObjs, typeof(System.Text.RegularExpressions.MatchCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.RegularExpressions.MatchCollection)retValue;
		}

		public static System.String Replace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.String replacement)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = replacement;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod39), "FILE", "System.Text.RegularExpressions.Regex.Replace(String, String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String Replace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.String replacement, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = replacement;
			paramObjs[3] = count;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod40), "FILE", "System.Text.RegularExpressions.Regex.Replace(String, String, Int32)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String Replace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.String replacement, System.Int32 count, System.Int32 startat)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = replacement;
			paramObjs[3] = count;
			paramObjs[4] = startat;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod41), "FILE", "System.Text.RegularExpressions.Regex.Replace(String, String, Int32, Int32)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String Replace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.Text.RegularExpressions.MatchEvaluator evaluator)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = evaluator;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod42), "FILE", "System.Text.RegularExpressions.Regex.Replace(String, MatchEvaluator)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String Replace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = evaluator;
			paramObjs[3] = count;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod43), "FILE", "System.Text.RegularExpressions.Regex.Replace(String, MatchEvaluator, Int32)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String Replace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Int32 count, System.Int32 startat)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = evaluator;
			paramObjs[3] = count;
			paramObjs[4] = startat;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod44), "FILE", "System.Text.RegularExpressions.Regex.Replace(String, MatchEvaluator, Int32, Int32)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String[] Split(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod45), "FILE", "System.Text.RegularExpressions.Regex.Split(String)", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.String[] Split(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = count;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod46), "FILE", "System.Text.RegularExpressions.Regex.Split(String, Int32)", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.String[] Split(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.Int32 count, System.Int32 startat)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = count;
			paramObjs[3] = startat;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod47), "FILE", "System.Text.RegularExpressions.Regex.Split(String, Int32, Int32)", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.String Escape(HeatDotNet.MethodInterceptInfo methodIntercept, System.String str)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = str;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod48), "FILE", "System.Text.RegularExpressions.Regex.Escape(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String Unescape(HeatDotNet.MethodInterceptInfo methodIntercept, System.String str)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = str;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod49), "FILE", "System.Text.RegularExpressions.Regex.Unescape(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean IsMatch(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.String pattern)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = pattern;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod50), "FILE", "System.Text.RegularExpressions.Regex.IsMatch(String, String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsMatch(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.String pattern, System.Text.RegularExpressions.RegexOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = pattern;
			paramObjs[3] = options;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod51), "FILE", "System.Text.RegularExpressions.Regex.IsMatch(String, String, RegexOptions)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Text.RegularExpressions.Match Match(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.String pattern)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = pattern;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod52), "FILE", "System.Text.RegularExpressions.Regex.Match(String, String)", paramObjs, typeof(System.Text.RegularExpressions.Match), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.RegularExpressions.Match)retValue;
		}

		public static System.Text.RegularExpressions.Match Match(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.String pattern, System.Text.RegularExpressions.RegexOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = pattern;
			paramObjs[3] = options;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod53), "FILE", "System.Text.RegularExpressions.Regex.Match(String, String, RegexOptions)", paramObjs, typeof(System.Text.RegularExpressions.Match), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.RegularExpressions.Match)retValue;
		}

		public static System.Text.RegularExpressions.MatchCollection Matches(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.String pattern)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = pattern;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod54), "FILE", "System.Text.RegularExpressions.Regex.Matches(String, String)", paramObjs, typeof(System.Text.RegularExpressions.MatchCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.RegularExpressions.MatchCollection)retValue;
		}

		public static System.Text.RegularExpressions.MatchCollection Matches(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.String pattern, System.Text.RegularExpressions.RegexOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = pattern;
			paramObjs[3] = options;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod55), "FILE", "System.Text.RegularExpressions.Regex.Matches(String, String, RegexOptions)", paramObjs, typeof(System.Text.RegularExpressions.MatchCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.RegularExpressions.MatchCollection)retValue;
		}

		public static System.String Replace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.String pattern, System.String replacement)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = pattern;
			paramObjs[3] = replacement;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod56), "FILE", "System.Text.RegularExpressions.Regex.Replace(String, String, String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String Replace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.String pattern, System.String replacement, System.Text.RegularExpressions.RegexOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = pattern;
			paramObjs[3] = replacement;
			paramObjs[4] = options;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod57), "FILE", "System.Text.RegularExpressions.Regex.Replace(String, String, String, RegexOptions)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String Replace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.String pattern, System.Text.RegularExpressions.MatchEvaluator evaluator)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = pattern;
			paramObjs[3] = evaluator;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod58), "FILE", "System.Text.RegularExpressions.Regex.Replace(String, String, MatchEvaluator)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String Replace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.String pattern, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Text.RegularExpressions.RegexOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = pattern;
			paramObjs[3] = evaluator;
			paramObjs[4] = options;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod59), "FILE", "System.Text.RegularExpressions.Regex.Replace(String, String, MatchEvaluator, RegexOptions)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String[] Split(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.String pattern)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = pattern;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod60), "FILE", "System.Text.RegularExpressions.Regex.Split(String, String)", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.String[] Split(HeatDotNet.MethodInterceptInfo methodIntercept, System.String input, System.String pattern, System.Text.RegularExpressions.RegexOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = input;
			paramObjs[2] = pattern;
			paramObjs[3] = options;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod61), "FILE", "System.Text.RegularExpressions.Regex.Split(String, String, RegexOptions)", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static void CompileToAssembly(HeatDotNet.MethodInterceptInfo methodIntercept, System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = regexinfos;
			paramObjs[2] = assemblyname;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod62), "FILE", "System.Text.RegularExpressions.Regex.CompileToAssembly(RegexCompilationInfo[], AssemblyName)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void CompileToAssembly(HeatDotNet.MethodInterceptInfo methodIntercept, System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname, System.Reflection.Emit.CustomAttributeBuilder[] attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = regexinfos;
			paramObjs[2] = assemblyname;
			paramObjs[3] = attributes;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod63), "FILE", "System.Text.RegularExpressions.Regex.CompileToAssembly(RegexCompilationInfo[], AssemblyName, CustomAttributeBuilder[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void CompileToAssembly(HeatDotNet.MethodInterceptInfo methodIntercept, System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname, System.Reflection.Emit.CustomAttributeBuilder[] attributes, System.String resourceFile)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = regexinfos;
			paramObjs[2] = assemblyname;
			paramObjs[3] = attributes;
			paramObjs[4] = resourceFile;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod64), "FILE", "System.Text.RegularExpressions.Regex.CompileToAssembly(RegexCompilationInfo[], AssemblyName, CustomAttributeBuilder[], String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String pattern)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = pattern;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod65), "FILE", "System.Text.RegularExpressions.Regex.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String pattern, System.Text.RegularExpressions.RegexOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = pattern;
			paramObjs[2] = options;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod66), "FILE", "System.Text.RegularExpressions.Regex.ctor(String, RegexOptions)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Text.RegularExpressions.Capture")]
	public class HandlerClass4
	{
		// System.Text.RegularExpressions.Capture.ToString
		private static bool CallerMethod67(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Capture.get_Index
		private static bool CallerMethod68(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Capture.get_Length
		private static bool CallerMethod69(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Capture.get_Value
		private static bool CallerMethod70(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod67), "FILE", "System.Text.RegularExpressions.Capture.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_Index(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod68), "FILE", "System.Text.RegularExpressions.Capture.get_Index()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_Length(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod69), "FILE", "System.Text.RegularExpressions.Capture.get_Length()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String get_Value(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod70), "FILE", "System.Text.RegularExpressions.Capture.get_Value()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Text.RegularExpressions.CaptureCollection")]
	public class HandlerClass5
	{
		// System.Text.RegularExpressions.CaptureCollection.GetEnumerator
		private static bool CallerMethod71(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.CaptureCollection.get_IsSynchronized
		private static bool CallerMethod72(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.CaptureCollection.get_SyncRoot
		private static bool CallerMethod73(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.CaptureCollection.get_Count
		private static bool CallerMethod74(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.CaptureCollection.CopyTo
		private static bool CallerMethod75(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.CaptureCollection.get_IsReadOnly
		private static bool CallerMethod76(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.CaptureCollection.get_Item
		private static bool CallerMethod77(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Collections.IEnumerator GetEnumerator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod71), "FILE", "System.Text.RegularExpressions.CaptureCollection.GetEnumerator()", paramObjs, typeof(System.Collections.IEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IEnumerator)retValue;
		}

		public static System.Boolean get_IsSynchronized(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod72), "FILE", "System.Text.RegularExpressions.CaptureCollection.get_IsSynchronized()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Object get_SyncRoot(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod73), "FILE", "System.Text.RegularExpressions.CaptureCollection.get_SyncRoot()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Int32 get_Count(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod74), "FILE", "System.Text.RegularExpressions.CaptureCollection.get_Count()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void CopyTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Array array, System.Int32 arrayIndex)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = arrayIndex;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod75), "FILE", "System.Text.RegularExpressions.CaptureCollection.CopyTo(Array, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_IsReadOnly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod76), "FILE", "System.Text.RegularExpressions.CaptureCollection.get_IsReadOnly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Text.RegularExpressions.Capture get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 i)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = i;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod77), "FILE", "System.Text.RegularExpressions.CaptureCollection.get_Item(Int32)", paramObjs, typeof(System.Text.RegularExpressions.Capture), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.RegularExpressions.Capture)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Text.RegularExpressions.RegexCompilationInfo")]
	public class HandlerClass6
	{
		// System.Text.RegularExpressions.RegexCompilationInfo.get_Pattern
		private static bool CallerMethod78(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.RegexCompilationInfo.set_Pattern
		private static bool CallerMethod79(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.RegexCompilationInfo.get_Options
		private static bool CallerMethod80(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.RegexCompilationInfo.set_Options
		private static bool CallerMethod81(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.RegexCompilationInfo.get_Name
		private static bool CallerMethod82(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.RegexCompilationInfo.set_Name
		private static bool CallerMethod83(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.RegexCompilationInfo.get_Namespace
		private static bool CallerMethod84(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.RegexCompilationInfo.set_Namespace
		private static bool CallerMethod85(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.RegexCompilationInfo.get_IsPublic
		private static bool CallerMethod86(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.RegexCompilationInfo.set_IsPublic
		private static bool CallerMethod87(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.RegexCompilationInfo..ctor
		private static bool CallerMethod88(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_Pattern(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod78), "FILE", "System.Text.RegularExpressions.RegexCompilationInfo.get_Pattern()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Pattern(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod79), "FILE", "System.Text.RegularExpressions.RegexCompilationInfo.set_Pattern(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Text.RegularExpressions.RegexOptions get_Options(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod80), "FILE", "System.Text.RegularExpressions.RegexCompilationInfo.get_Options()", paramObjs, typeof(System.Text.RegularExpressions.RegexOptions), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.RegularExpressions.RegexOptions)retValue;
		}

		public static void set_Options(HeatDotNet.MethodInterceptInfo methodIntercept, System.Text.RegularExpressions.RegexOptions value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod81), "FILE", "System.Text.RegularExpressions.RegexCompilationInfo.set_Options(RegexOptions)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod82), "FILE", "System.Text.RegularExpressions.RegexCompilationInfo.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Name(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod83), "FILE", "System.Text.RegularExpressions.RegexCompilationInfo.set_Name(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Namespace(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod84), "FILE", "System.Text.RegularExpressions.RegexCompilationInfo.get_Namespace()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Namespace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod85), "FILE", "System.Text.RegularExpressions.RegexCompilationInfo.set_Namespace(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_IsPublic(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod86), "FILE", "System.Text.RegularExpressions.RegexCompilationInfo.get_IsPublic()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_IsPublic(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod87), "FILE", "System.Text.RegularExpressions.RegexCompilationInfo.set_IsPublic(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String pattern, System.Text.RegularExpressions.RegexOptions options, System.String name, System.String fullnamespace, System.Boolean ispublic)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = pattern;
			paramObjs[2] = options;
			paramObjs[3] = name;
			paramObjs[4] = fullnamespace;
			paramObjs[5] = ispublic;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod88), "FILE", "System.Text.RegularExpressions.RegexCompilationInfo.ctor(String, RegexOptions, String, String, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Text.RegularExpressions.Group")]
	public class HandlerClass7
	{
		// System.Text.RegularExpressions.Group.get_Success
		private static bool CallerMethod89(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Group.get_Captures
		private static bool CallerMethod90(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Group.Synchronized
		private static bool CallerMethod91(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean get_Success(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod89), "FILE", "System.Text.RegularExpressions.Group.get_Success()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Text.RegularExpressions.CaptureCollection get_Captures(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod90), "FILE", "System.Text.RegularExpressions.Group.get_Captures()", paramObjs, typeof(System.Text.RegularExpressions.CaptureCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.RegularExpressions.CaptureCollection)retValue;
		}

		public static System.Text.RegularExpressions.Group Synchronized(HeatDotNet.MethodInterceptInfo methodIntercept, System.Text.RegularExpressions.Group inner)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inner;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod91), "FILE", "System.Text.RegularExpressions.Group.Synchronized(Group)", paramObjs, typeof(System.Text.RegularExpressions.Group), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.RegularExpressions.Group)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Text.RegularExpressions.GroupCollection")]
	public class HandlerClass8
	{
		// System.Text.RegularExpressions.GroupCollection.GetEnumerator
		private static bool CallerMethod92(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.GroupCollection.get_IsSynchronized
		private static bool CallerMethod93(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.GroupCollection.get_SyncRoot
		private static bool CallerMethod94(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.GroupCollection.get_Count
		private static bool CallerMethod95(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.GroupCollection.CopyTo
		private static bool CallerMethod96(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.GroupCollection.get_IsReadOnly
		private static bool CallerMethod97(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.GroupCollection.get_Item
		private static bool CallerMethod98(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.GroupCollection.get_Item
		private static bool CallerMethod99(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Collections.IEnumerator GetEnumerator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod92), "FILE", "System.Text.RegularExpressions.GroupCollection.GetEnumerator()", paramObjs, typeof(System.Collections.IEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IEnumerator)retValue;
		}

		public static System.Boolean get_IsSynchronized(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod93), "FILE", "System.Text.RegularExpressions.GroupCollection.get_IsSynchronized()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Object get_SyncRoot(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod94), "FILE", "System.Text.RegularExpressions.GroupCollection.get_SyncRoot()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Int32 get_Count(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod95), "FILE", "System.Text.RegularExpressions.GroupCollection.get_Count()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void CopyTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Array array, System.Int32 arrayIndex)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = arrayIndex;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod96), "FILE", "System.Text.RegularExpressions.GroupCollection.CopyTo(Array, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_IsReadOnly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod97), "FILE", "System.Text.RegularExpressions.GroupCollection.get_IsReadOnly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Text.RegularExpressions.Group get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 groupnum)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = groupnum;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod98), "FILE", "System.Text.RegularExpressions.GroupCollection.get_Item(Int32)", paramObjs, typeof(System.Text.RegularExpressions.Group), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.RegularExpressions.Group)retValue;
		}

		public static System.Text.RegularExpressions.Group get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.String groupname)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = groupname;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod99), "FILE", "System.Text.RegularExpressions.GroupCollection.get_Item(String)", paramObjs, typeof(System.Text.RegularExpressions.Group), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.RegularExpressions.Group)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Text.RegularExpressions.Match")]
	public class HandlerClass9
	{
		// System.Text.RegularExpressions.Match.Result
		private static bool CallerMethod100(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Match.get_Groups
		private static bool CallerMethod101(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Match.NextMatch
		private static bool CallerMethod102(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Match.get_Empty
		private static bool CallerMethod103(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.Match.Synchronized
		private static bool CallerMethod104(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String Result(HeatDotNet.MethodInterceptInfo methodIntercept, System.String replacement)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = replacement;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod100), "FILE", "System.Text.RegularExpressions.Match.Result(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Text.RegularExpressions.GroupCollection get_Groups(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod101), "FILE", "System.Text.RegularExpressions.Match.get_Groups()", paramObjs, typeof(System.Text.RegularExpressions.GroupCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.RegularExpressions.GroupCollection)retValue;
		}

		public static System.Text.RegularExpressions.Match NextMatch(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod102), "FILE", "System.Text.RegularExpressions.Match.NextMatch()", paramObjs, typeof(System.Text.RegularExpressions.Match), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.RegularExpressions.Match)retValue;
		}

		public static System.Text.RegularExpressions.Match get_Empty(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod103), "FILE", "System.Text.RegularExpressions.Match.get_Empty()", paramObjs, typeof(System.Text.RegularExpressions.Match), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.RegularExpressions.Match)retValue;
		}

		public static System.Text.RegularExpressions.Match Synchronized(HeatDotNet.MethodInterceptInfo methodIntercept, System.Text.RegularExpressions.Match inner)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inner;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod104), "FILE", "System.Text.RegularExpressions.Match.Synchronized(Match)", paramObjs, typeof(System.Text.RegularExpressions.Match), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.RegularExpressions.Match)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Text.RegularExpressions.MatchCollection")]
	public class HandlerClass10
	{
		// System.Text.RegularExpressions.MatchCollection.GetEnumerator
		private static bool CallerMethod105(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.MatchCollection.get_IsSynchronized
		private static bool CallerMethod106(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.MatchCollection.get_SyncRoot
		private static bool CallerMethod107(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.MatchCollection.get_Count
		private static bool CallerMethod108(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.MatchCollection.CopyTo
		private static bool CallerMethod109(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.MatchCollection.get_Item
		private static bool CallerMethod110(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Text.RegularExpressions.MatchCollection.get_IsReadOnly
		private static bool CallerMethod111(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Collections.IEnumerator GetEnumerator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod105), "FILE", "System.Text.RegularExpressions.MatchCollection.GetEnumerator()", paramObjs, typeof(System.Collections.IEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IEnumerator)retValue;
		}

		public static System.Boolean get_IsSynchronized(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod106), "FILE", "System.Text.RegularExpressions.MatchCollection.get_IsSynchronized()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Object get_SyncRoot(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod107), "FILE", "System.Text.RegularExpressions.MatchCollection.get_SyncRoot()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Int32 get_Count(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod108), "FILE", "System.Text.RegularExpressions.MatchCollection.get_Count()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void CopyTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Array array, System.Int32 arrayIndex)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = arrayIndex;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod109), "FILE", "System.Text.RegularExpressions.MatchCollection.CopyTo(Array, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Text.RegularExpressions.Match get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 i)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = i;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod110), "FILE", "System.Text.RegularExpressions.MatchCollection.get_Item(Int32)", paramObjs, typeof(System.Text.RegularExpressions.Match), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.RegularExpressions.Match)retValue;
		}

		public static System.Boolean get_IsReadOnly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod111), "FILE", "System.Text.RegularExpressions.MatchCollection.get_IsReadOnly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.AmbientValueAttribute")]
	public class HandlerClass11
	{
		// System.ComponentModel.AmbientValueAttribute.GetHashCode
		private static bool CallerMethod112(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AmbientValueAttribute.Equals
		private static bool CallerMethod113(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AmbientValueAttribute.get_Value
		private static bool CallerMethod114(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AmbientValueAttribute..ctor
		private static bool CallerMethod115(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AmbientValueAttribute..ctor
		private static bool CallerMethod116(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AmbientValueAttribute..ctor
		private static bool CallerMethod117(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AmbientValueAttribute..ctor
		private static bool CallerMethod118(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AmbientValueAttribute..ctor
		private static bool CallerMethod119(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AmbientValueAttribute..ctor
		private static bool CallerMethod120(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AmbientValueAttribute..ctor
		private static bool CallerMethod121(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AmbientValueAttribute..ctor
		private static bool CallerMethod122(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AmbientValueAttribute..ctor
		private static bool CallerMethod123(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AmbientValueAttribute..ctor
		private static bool CallerMethod124(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AmbientValueAttribute..ctor
		private static bool CallerMethod125(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod112), "LIBRARY", "System.ComponentModel.AmbientValueAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod113), "LIBRARY", "System.ComponentModel.AmbientValueAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Object get_Value(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod114), "LIBRARY", "System.ComponentModel.AmbientValueAttribute.get_Value()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Type type, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = type;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod115), "LIBRARY", "System.ComponentModel.AmbientValueAttribute.ctor(Type, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Char value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod116), "LIBRARY", "System.ComponentModel.AmbientValueAttribute.ctor(Char)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Byte value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod117), "LIBRARY", "System.ComponentModel.AmbientValueAttribute.ctor(Byte)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int16 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod118), "LIBRARY", "System.ComponentModel.AmbientValueAttribute.ctor(Int16)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod119), "LIBRARY", "System.ComponentModel.AmbientValueAttribute.ctor(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod120), "LIBRARY", "System.ComponentModel.AmbientValueAttribute.ctor(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Single value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod121), "LIBRARY", "System.ComponentModel.AmbientValueAttribute.ctor(Single)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Double value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod122), "LIBRARY", "System.ComponentModel.AmbientValueAttribute.ctor(Double)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod123), "LIBRARY", "System.ComponentModel.AmbientValueAttribute.ctor(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod124), "LIBRARY", "System.ComponentModel.AmbientValueAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod125), "LIBRARY", "System.ComponentModel.AmbientValueAttribute.ctor(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.TypeConverter")]
	public class HandlerClass12
	{
		// System.ComponentModel.TypeConverter.IsValid
		private static bool CallerMethod126(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.GetStandardValuesSupported
		private static bool CallerMethod127(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.GetStandardValuesExclusive
		private static bool CallerMethod128(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.GetStandardValues
		private static bool CallerMethod129(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.GetPropertiesSupported
		private static bool CallerMethod130(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.GetProperties
		private static bool CallerMethod131(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.GetCreateInstanceSupported
		private static bool CallerMethod132(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.CreateInstance
		private static bool CallerMethod133(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.ConvertTo
		private static bool CallerMethod134(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.ConvertFrom
		private static bool CallerMethod135(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.CanConvertTo
		private static bool CallerMethod136(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.CanConvertFrom
		private static bool CallerMethod137(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.CanConvertFrom
		private static bool CallerMethod138(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.CanConvertTo
		private static bool CallerMethod139(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.ConvertFrom
		private static bool CallerMethod140(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.ConvertFromInvariantString
		private static bool CallerMethod141(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.ConvertFromInvariantString
		private static bool CallerMethod142(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.ConvertFromString
		private static bool CallerMethod143(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.ConvertFromString
		private static bool CallerMethod144(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.ConvertFromString
		private static bool CallerMethod145(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.ConvertTo
		private static bool CallerMethod146(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.ConvertToInvariantString
		private static bool CallerMethod147(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.ConvertToInvariantString
		private static bool CallerMethod148(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.ConvertToString
		private static bool CallerMethod149(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.ConvertToString
		private static bool CallerMethod150(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.ConvertToString
		private static bool CallerMethod151(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.CreateInstance
		private static bool CallerMethod152(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.GetCreateInstanceSupported
		private static bool CallerMethod153(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.GetProperties
		private static bool CallerMethod154(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.GetProperties
		private static bool CallerMethod155(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.GetPropertiesSupported
		private static bool CallerMethod156(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.GetStandardValues
		private static bool CallerMethod157(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.GetStandardValuesExclusive
		private static bool CallerMethod158(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.GetStandardValuesSupported
		private static bool CallerMethod159(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter.IsValid
		private static bool CallerMethod160(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverter..ctor
		private static bool CallerMethod161(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsValid(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod126), "LIBRARY", "System.ComponentModel.TypeConverter.IsValid(ITypeDescriptorContext, Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean GetStandardValuesSupported(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod127), "LIBRARY", "System.ComponentModel.TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean GetStandardValuesExclusive(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod128), "LIBRARY", "System.ComponentModel.TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod129), "LIBRARY", "System.ComponentModel.TypeConverter.GetStandardValues(ITypeDescriptorContext)", paramObjs, typeof(System.ComponentModel.TypeConverter.StandardValuesCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.TypeConverter.StandardValuesCollection)retValue;
		}

		public static System.Boolean GetPropertiesSupported(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod130), "LIBRARY", "System.ComponentModel.TypeConverter.GetPropertiesSupported(ITypeDescriptorContext)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.ComponentModel.PropertyDescriptorCollection GetProperties(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Object value, System.Attribute[] attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = value;
			paramObjs[3] = attributes;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod131), "LIBRARY", "System.ComponentModel.TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[])", paramObjs, typeof(System.ComponentModel.PropertyDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptorCollection)retValue;
		}

		public static System.Boolean GetCreateInstanceSupported(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod132), "LIBRARY", "System.ComponentModel.TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Object CreateInstance(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary propertyValues)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = propertyValues;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod133), "LIBRARY", "System.ComponentModel.TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object ConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			paramObjs[4] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod134), "LIBRARY", "System.ComponentModel.TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object ConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod135), "LIBRARY", "System.ComponentModel.TypeConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Boolean CanConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod136), "LIBRARY", "System.ComponentModel.TypeConverter.CanConvertTo(ITypeDescriptorContext, Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean CanConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = sourceType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod137), "LIBRARY", "System.ComponentModel.TypeConverter.CanConvertFrom(ITypeDescriptorContext, Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean CanConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type sourceType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = sourceType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod138), "LIBRARY", "System.ComponentModel.TypeConverter.CanConvertFrom(Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean CanConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod139), "LIBRARY", "System.ComponentModel.TypeConverter.CanConvertTo(Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Object ConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod140), "LIBRARY", "System.ComponentModel.TypeConverter.ConvertFrom(Object)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object ConvertFromInvariantString(HeatDotNet.MethodInterceptInfo methodIntercept, System.String text)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = text;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod141), "LIBRARY", "System.ComponentModel.TypeConverter.ConvertFromInvariantString(String)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object ConvertFromInvariantString(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.String text)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = text;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod142), "LIBRARY", "System.ComponentModel.TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object ConvertFromString(HeatDotNet.MethodInterceptInfo methodIntercept, System.String text)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = text;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod143), "LIBRARY", "System.ComponentModel.TypeConverter.ConvertFromString(String)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object ConvertFromString(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.String text)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = text;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod144), "LIBRARY", "System.ComponentModel.TypeConverter.ConvertFromString(ITypeDescriptorContext, String)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object ConvertFromString(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.String text)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = text;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod145), "LIBRARY", "System.ComponentModel.TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object ConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			paramObjs[2] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod146), "LIBRARY", "System.ComponentModel.TypeConverter.ConvertTo(Object, Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.String ConvertToInvariantString(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod147), "LIBRARY", "System.ComponentModel.TypeConverter.ConvertToInvariantString(Object)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ConvertToInvariantString(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod148), "LIBRARY", "System.ComponentModel.TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ConvertToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod149), "LIBRARY", "System.ComponentModel.TypeConverter.ConvertToString(Object)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ConvertToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod150), "LIBRARY", "System.ComponentModel.TypeConverter.ConvertToString(ITypeDescriptorContext, Object)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ConvertToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod151), "LIBRARY", "System.ComponentModel.TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Object CreateInstance(HeatDotNet.MethodInterceptInfo methodIntercept, System.Collections.IDictionary propertyValues)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = propertyValues;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod152), "LIBRARY", "System.ComponentModel.TypeConverter.CreateInstance(IDictionary)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Boolean GetCreateInstanceSupported(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod153), "LIBRARY", "System.ComponentModel.TypeConverter.GetCreateInstanceSupported()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.ComponentModel.PropertyDescriptorCollection GetProperties(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod154), "LIBRARY", "System.ComponentModel.TypeConverter.GetProperties(Object)", paramObjs, typeof(System.ComponentModel.PropertyDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptorCollection)retValue;
		}

		public static System.ComponentModel.PropertyDescriptorCollection GetProperties(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod155), "LIBRARY", "System.ComponentModel.TypeConverter.GetProperties(ITypeDescriptorContext, Object)", paramObjs, typeof(System.ComponentModel.PropertyDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptorCollection)retValue;
		}

		public static System.Boolean GetPropertiesSupported(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod156), "LIBRARY", "System.ComponentModel.TypeConverter.GetPropertiesSupported()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Collections.ICollection GetStandardValues(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod157), "LIBRARY", "System.ComponentModel.TypeConverter.GetStandardValues()", paramObjs, typeof(System.Collections.ICollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.ICollection)retValue;
		}

		public static System.Boolean GetStandardValuesExclusive(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod158), "LIBRARY", "System.ComponentModel.TypeConverter.GetStandardValuesExclusive()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean GetStandardValuesSupported(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod159), "LIBRARY", "System.ComponentModel.TypeConverter.GetStandardValuesSupported()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsValid(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod160), "LIBRARY", "System.ComponentModel.TypeConverter.IsValid(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod161), "LIBRARY", "System.ComponentModel.TypeConverter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.MemberDescriptor")]
	public class HandlerClass13
	{
		// System.ComponentModel.MemberDescriptor.get_DisplayName
		private static bool CallerMethod162(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.MemberDescriptor.get_DesignTimeOnly
		private static bool CallerMethod163(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.MemberDescriptor.get_Name
		private static bool CallerMethod164(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.MemberDescriptor.get_IsBrowsable
		private static bool CallerMethod165(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.MemberDescriptor.get_Description
		private static bool CallerMethod166(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.MemberDescriptor.get_Category
		private static bool CallerMethod167(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.MemberDescriptor.get_Attributes
		private static bool CallerMethod168(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.MemberDescriptor.GetHashCode
		private static bool CallerMethod169(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.MemberDescriptor.Equals
		private static bool CallerMethod170(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_DisplayName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod162), "LIBRARY", "System.ComponentModel.MemberDescriptor.get_DisplayName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean get_DesignTimeOnly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod163), "LIBRARY", "System.ComponentModel.MemberDescriptor.get_DesignTimeOnly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod164), "LIBRARY", "System.ComponentModel.MemberDescriptor.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean get_IsBrowsable(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod165), "LIBRARY", "System.ComponentModel.MemberDescriptor.get_IsBrowsable()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_Description(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod166), "LIBRARY", "System.ComponentModel.MemberDescriptor.get_Description()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Category(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod167), "LIBRARY", "System.ComponentModel.MemberDescriptor.get_Category()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.ComponentModel.AttributeCollection get_Attributes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod168), "LIBRARY", "System.ComponentModel.MemberDescriptor.get_Attributes()", paramObjs, typeof(System.ComponentModel.AttributeCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.AttributeCollection)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod169), "LIBRARY", "System.ComponentModel.MemberDescriptor.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod170), "LIBRARY", "System.ComponentModel.MemberDescriptor.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.PropertyDescriptor")]
	public class HandlerClass14
	{
		// System.ComponentModel.PropertyDescriptor.RemoveValueChanged
		private static bool CallerMethod171(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptor.GetEditor
		private static bool CallerMethod172(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptor.GetChildProperties
		private static bool CallerMethod173(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptor.AddValueChanged
		private static bool CallerMethod174(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptor.get_IsLocalizable
		private static bool CallerMethod175(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptor.get_Converter
		private static bool CallerMethod176(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptor.GetHashCode
		private static bool CallerMethod177(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptor.Equals
		private static bool CallerMethod178(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptor.get_SerializationVisibility
		private static bool CallerMethod179(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptor.GetChildProperties
		private static bool CallerMethod180(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptor.GetChildProperties
		private static bool CallerMethod181(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptor.GetChildProperties
		private static bool CallerMethod182(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void RemoveValueChanged(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component, System.EventHandler handler)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			paramObjs[2] = handler;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod171), "LIBRARY", "System.ComponentModel.PropertyDescriptor.RemoveValueChanged(Object, EventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Object GetEditor(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type editorBaseType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = editorBaseType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod172), "LIBRARY", "System.ComponentModel.PropertyDescriptor.GetEditor(Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.ComponentModel.PropertyDescriptorCollection GetChildProperties(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object instance, System.Attribute[] filter)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = instance;
			paramObjs[2] = filter;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod173), "LIBRARY", "System.ComponentModel.PropertyDescriptor.GetChildProperties(Object, Attribute[])", paramObjs, typeof(System.ComponentModel.PropertyDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptorCollection)retValue;
		}

		public static void AddValueChanged(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component, System.EventHandler handler)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			paramObjs[2] = handler;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod174), "LIBRARY", "System.ComponentModel.PropertyDescriptor.AddValueChanged(Object, EventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_IsLocalizable(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod175), "LIBRARY", "System.ComponentModel.PropertyDescriptor.get_IsLocalizable()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.ComponentModel.TypeConverter get_Converter(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod176), "LIBRARY", "System.ComponentModel.PropertyDescriptor.get_Converter()", paramObjs, typeof(System.ComponentModel.TypeConverter), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.TypeConverter)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod177), "LIBRARY", "System.ComponentModel.PropertyDescriptor.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod178), "LIBRARY", "System.ComponentModel.PropertyDescriptor.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.ComponentModel.DesignerSerializationVisibility get_SerializationVisibility(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod179), "LIBRARY", "System.ComponentModel.PropertyDescriptor.get_SerializationVisibility()", paramObjs, typeof(System.ComponentModel.DesignerSerializationVisibility), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.DesignerSerializationVisibility)retValue;
		}

		public static System.ComponentModel.PropertyDescriptorCollection GetChildProperties(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod180), "LIBRARY", "System.ComponentModel.PropertyDescriptor.GetChildProperties()", paramObjs, typeof(System.ComponentModel.PropertyDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptorCollection)retValue;
		}

		public static System.ComponentModel.PropertyDescriptorCollection GetChildProperties(HeatDotNet.MethodInterceptInfo methodIntercept, System.Attribute[] filter)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = filter;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod181), "LIBRARY", "System.ComponentModel.PropertyDescriptor.GetChildProperties(Attribute[])", paramObjs, typeof(System.ComponentModel.PropertyDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptorCollection)retValue;
		}

		public static System.ComponentModel.PropertyDescriptorCollection GetChildProperties(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object instance)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = instance;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod182), "LIBRARY", "System.ComponentModel.PropertyDescriptor.GetChildProperties(Object)", paramObjs, typeof(System.ComponentModel.PropertyDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptorCollection)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.CollectionConverter")]
	public class HandlerClass15
	{
		// System.ComponentModel.CollectionConverter.GetPropertiesSupported
		private static bool CallerMethod183(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CollectionConverter.GetProperties
		private static bool CallerMethod184(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CollectionConverter.ConvertTo
		private static bool CallerMethod185(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CollectionConverter..ctor
		private static bool CallerMethod186(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean GetPropertiesSupported(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod183), "LIBRARY", "System.ComponentModel.CollectionConverter.GetPropertiesSupported(ITypeDescriptorContext)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.ComponentModel.PropertyDescriptorCollection GetProperties(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Object value, System.Attribute[] attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = value;
			paramObjs[3] = attributes;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod184), "LIBRARY", "System.ComponentModel.CollectionConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[])", paramObjs, typeof(System.ComponentModel.PropertyDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptorCollection)retValue;
		}

		public static System.Object ConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			paramObjs[4] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod185), "LIBRARY", "System.ComponentModel.CollectionConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod186), "LIBRARY", "System.ComponentModel.CollectionConverter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.ArrayConverter")]
	public class HandlerClass16
	{
		// System.ComponentModel.ArrayConverter.GetPropertiesSupported
		private static bool CallerMethod187(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ArrayConverter.GetProperties
		private static bool CallerMethod188(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ArrayConverter.ConvertTo
		private static bool CallerMethod189(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ArrayConverter..ctor
		private static bool CallerMethod190(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean GetPropertiesSupported(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod187), "LIBRARY", "System.ComponentModel.ArrayConverter.GetPropertiesSupported(ITypeDescriptorContext)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.ComponentModel.PropertyDescriptorCollection GetProperties(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Object value, System.Attribute[] attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = value;
			paramObjs[3] = attributes;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod188), "LIBRARY", "System.ComponentModel.ArrayConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[])", paramObjs, typeof(System.ComponentModel.PropertyDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptorCollection)retValue;
		}

		public static System.Object ConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			paramObjs[4] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod189), "LIBRARY", "System.ComponentModel.ArrayConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod190), "LIBRARY", "System.ComponentModel.ArrayConverter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.ComponentEditor")]
	public class HandlerClass17
	{
		// System.ComponentModel.ComponentEditor.EditComponent
		private static bool CallerMethod191(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean EditComponent(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod191), "LIBRARY", "System.ComponentModel.ComponentEditor.EditComponent(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.BaseNumberConverter")]
	public class HandlerClass18
	{
		// System.ComponentModel.BaseNumberConverter.ConvertTo
		private static bool CallerMethod192(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.BaseNumberConverter.ConvertFrom
		private static bool CallerMethod193(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.BaseNumberConverter.CanConvertTo
		private static bool CallerMethod194(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.BaseNumberConverter.CanConvertFrom
		private static bool CallerMethod195(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object ConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			paramObjs[4] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod192), "LIBRARY", "System.ComponentModel.BaseNumberConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object ConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod193), "LIBRARY", "System.ComponentModel.BaseNumberConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Boolean CanConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Type t)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = t;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod194), "LIBRARY", "System.ComponentModel.BaseNumberConverter.CanConvertTo(ITypeDescriptorContext, Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean CanConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = sourceType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod195), "LIBRARY", "System.ComponentModel.BaseNumberConverter.CanConvertFrom(ITypeDescriptorContext, Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.BindableAttribute")]
	public class HandlerClass19
	{
		// System.ComponentModel.BindableAttribute.IsDefaultAttribute
		private static bool CallerMethod196(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.BindableAttribute.GetHashCode
		private static bool CallerMethod197(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.BindableAttribute.Equals
		private static bool CallerMethod198(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.BindableAttribute.get_Bindable
		private static bool CallerMethod199(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.BindableAttribute..ctor
		private static bool CallerMethod200(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.BindableAttribute..ctor
		private static bool CallerMethod201(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefaultAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod196), "LIBRARY", "System.ComponentModel.BindableAttribute.IsDefaultAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod197), "LIBRARY", "System.ComponentModel.BindableAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod198), "LIBRARY", "System.ComponentModel.BindableAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_Bindable(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod199), "LIBRARY", "System.ComponentModel.BindableAttribute.get_Bindable()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Boolean bindable)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = bindable;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod200), "LIBRARY", "System.ComponentModel.BindableAttribute.ctor(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.ComponentModel.BindableSupport flags)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = flags;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod201), "LIBRARY", "System.ComponentModel.BindableAttribute.ctor(BindableSupport)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.BooleanConverter")]
	public class HandlerClass20
	{
		// System.ComponentModel.BooleanConverter.GetStandardValuesSupported
		private static bool CallerMethod202(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.BooleanConverter.GetStandardValuesExclusive
		private static bool CallerMethod203(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.BooleanConverter.GetStandardValues
		private static bool CallerMethod204(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.BooleanConverter.ConvertFrom
		private static bool CallerMethod205(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.BooleanConverter.CanConvertFrom
		private static bool CallerMethod206(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.BooleanConverter..ctor
		private static bool CallerMethod207(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean GetStandardValuesSupported(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod202), "LIBRARY", "System.ComponentModel.BooleanConverter.GetStandardValuesSupported(ITypeDescriptorContext)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean GetStandardValuesExclusive(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod203), "LIBRARY", "System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(ITypeDescriptorContext)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod204), "LIBRARY", "System.ComponentModel.BooleanConverter.GetStandardValues(ITypeDescriptorContext)", paramObjs, typeof(System.ComponentModel.TypeConverter.StandardValuesCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.TypeConverter.StandardValuesCollection)retValue;
		}

		public static System.Object ConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod205), "LIBRARY", "System.ComponentModel.BooleanConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Boolean CanConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = sourceType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod206), "LIBRARY", "System.ComponentModel.BooleanConverter.CanConvertFrom(ITypeDescriptorContext, Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod207), "LIBRARY", "System.ComponentModel.BooleanConverter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.BrowsableAttribute")]
	public class HandlerClass21
	{
		// System.ComponentModel.BrowsableAttribute.IsDefaultAttribute
		private static bool CallerMethod208(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.BrowsableAttribute.GetHashCode
		private static bool CallerMethod209(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.BrowsableAttribute.Equals
		private static bool CallerMethod210(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.BrowsableAttribute.get_Browsable
		private static bool CallerMethod211(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.BrowsableAttribute..ctor
		private static bool CallerMethod212(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefaultAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod208), "LIBRARY", "System.ComponentModel.BrowsableAttribute.IsDefaultAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod209), "LIBRARY", "System.ComponentModel.BrowsableAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod210), "LIBRARY", "System.ComponentModel.BrowsableAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_Browsable(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod211), "LIBRARY", "System.ComponentModel.BrowsableAttribute.get_Browsable()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Boolean browsable)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = browsable;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod212), "LIBRARY", "System.ComponentModel.BrowsableAttribute.ctor(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.ByteConverter")]
	public class HandlerClass22
	{
		// System.ComponentModel.ByteConverter..ctor
		private static bool CallerMethod213(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod213), "LIBRARY", "System.ComponentModel.ByteConverter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.CancelEventArgs")]
	public class HandlerClass23
	{
		// System.ComponentModel.CancelEventArgs.get_Cancel
		private static bool CallerMethod214(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CancelEventArgs.set_Cancel
		private static bool CallerMethod215(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CancelEventArgs..ctor
		private static bool CallerMethod216(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CancelEventArgs..ctor
		private static bool CallerMethod217(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean get_Cancel(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod214), "LIBRARY", "System.ComponentModel.CancelEventArgs.get_Cancel()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_Cancel(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod215), "LIBRARY", "System.ComponentModel.CancelEventArgs.set_Cancel(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod216), "LIBRARY", "System.ComponentModel.CancelEventArgs.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Boolean cancel)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = cancel;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod217), "LIBRARY", "System.ComponentModel.CancelEventArgs.ctor(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.CharConverter")]
	public class HandlerClass24
	{
		// System.ComponentModel.CharConverter.ConvertTo
		private static bool CallerMethod218(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CharConverter.ConvertFrom
		private static bool CallerMethod219(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CharConverter.CanConvertFrom
		private static bool CallerMethod220(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CharConverter..ctor
		private static bool CallerMethod221(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object ConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			paramObjs[4] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod218), "LIBRARY", "System.ComponentModel.CharConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object ConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod219), "LIBRARY", "System.ComponentModel.CharConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Boolean CanConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = sourceType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod220), "LIBRARY", "System.ComponentModel.CharConverter.CanConvertFrom(ITypeDescriptorContext, Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod221), "LIBRARY", "System.ComponentModel.CharConverter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.CollectionChangeEventArgs")]
	public class HandlerClass25
	{
		// System.ComponentModel.CollectionChangeEventArgs.get_Element
		private static bool CallerMethod222(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CollectionChangeEventArgs.get_Action
		private static bool CallerMethod223(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CollectionChangeEventArgs..ctor
		private static bool CallerMethod224(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object get_Element(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod222), "LIBRARY", "System.ComponentModel.CollectionChangeEventArgs.get_Element()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.ComponentModel.CollectionChangeAction get_Action(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod223), "LIBRARY", "System.ComponentModel.CollectionChangeEventArgs.get_Action()", paramObjs, typeof(System.ComponentModel.CollectionChangeAction), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.CollectionChangeAction)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.ComponentModel.CollectionChangeAction action, System.Object element)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = action;
			paramObjs[2] = element;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod224), "LIBRARY", "System.ComponentModel.CollectionChangeEventArgs.ctor(CollectionChangeAction, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Component")]
	public class HandlerClass26
	{
		// System.ComponentModel.Component.Dispose
		private static bool CallerMethod225(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Component.remove_Disposed
		private static bool CallerMethod226(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Component.add_Disposed
		private static bool CallerMethod227(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Component.set_Site
		private static bool CallerMethod228(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Component.get_Site
		private static bool CallerMethod229(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Component.ToString
		private static bool CallerMethod230(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Component.get_Container
		private static bool CallerMethod231(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Component..ctor
		private static bool CallerMethod232(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Dispose(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod225), "LIBRARY", "System.ComponentModel.Component.Dispose()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void remove_Disposed(HeatDotNet.MethodInterceptInfo methodIntercept, System.EventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod226), "LIBRARY", "System.ComponentModel.Component.remove_Disposed(EventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void add_Disposed(HeatDotNet.MethodInterceptInfo methodIntercept, System.EventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod227), "LIBRARY", "System.ComponentModel.Component.add_Disposed(EventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_Site(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ISite value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod228), "LIBRARY", "System.ComponentModel.Component.set_Site(ISite)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.ComponentModel.ISite get_Site(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod229), "LIBRARY", "System.ComponentModel.Component.get_Site()", paramObjs, typeof(System.ComponentModel.ISite), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.ISite)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod230), "LIBRARY", "System.ComponentModel.Component.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.ComponentModel.IContainer get_Container(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod231), "LIBRARY", "System.ComponentModel.Component.get_Container()", paramObjs, typeof(System.ComponentModel.IContainer), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.IContainer)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod232), "LIBRARY", "System.ComponentModel.Component.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.ComponentCollection")]
	public class HandlerClass27
	{
		// System.ComponentModel.ComponentCollection.get_Item
		private static bool CallerMethod233(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ComponentCollection.get_Item
		private static bool CallerMethod234(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ComponentCollection.CopyTo
		private static bool CallerMethod235(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ComponentCollection..ctor
		private static bool CallerMethod236(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.ComponentModel.IComponent get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod233), "LIBRARY", "System.ComponentModel.ComponentCollection.get_Item(Int32)", paramObjs, typeof(System.ComponentModel.IComponent), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.IComponent)retValue;
		}

		public static System.ComponentModel.IComponent get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod234), "LIBRARY", "System.ComponentModel.ComponentCollection.get_Item(String)", paramObjs, typeof(System.ComponentModel.IComponent), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.IComponent)retValue;
		}

		public static void CopyTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.IComponent[] array, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod235), "LIBRARY", "System.ComponentModel.ComponentCollection.CopyTo(IComponent[], Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.ComponentModel.IComponent[] components)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = components;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod236), "LIBRARY", "System.ComponentModel.ComponentCollection.ctor(IComponent[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.ReferenceConverter")]
	public class HandlerClass28
	{
		// System.ComponentModel.ReferenceConverter.GetStandardValuesSupported
		private static bool CallerMethod237(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive
		private static bool CallerMethod238(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ReferenceConverter.GetStandardValues
		private static bool CallerMethod239(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ReferenceConverter.ConvertTo
		private static bool CallerMethod240(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ReferenceConverter.ConvertFrom
		private static bool CallerMethod241(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ReferenceConverter.CanConvertFrom
		private static bool CallerMethod242(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ReferenceConverter..ctor
		private static bool CallerMethod243(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean GetStandardValuesSupported(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod237), "LIBRARY", "System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(ITypeDescriptorContext)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean GetStandardValuesExclusive(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod238), "LIBRARY", "System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(ITypeDescriptorContext)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod239), "LIBRARY", "System.ComponentModel.ReferenceConverter.GetStandardValues(ITypeDescriptorContext)", paramObjs, typeof(System.ComponentModel.TypeConverter.StandardValuesCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.TypeConverter.StandardValuesCollection)retValue;
		}

		public static System.Object ConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			paramObjs[4] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod240), "LIBRARY", "System.ComponentModel.ReferenceConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object ConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod241), "LIBRARY", "System.ComponentModel.ReferenceConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Boolean CanConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = sourceType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod242), "LIBRARY", "System.ComponentModel.ReferenceConverter.CanConvertFrom(ITypeDescriptorContext, Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Type type)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = type;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod243), "LIBRARY", "System.ComponentModel.ReferenceConverter.ctor(Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.ComponentConverter")]
	public class HandlerClass29
	{
		// System.ComponentModel.ComponentConverter.GetPropertiesSupported
		private static bool CallerMethod244(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ComponentConverter.GetProperties
		private static bool CallerMethod245(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ComponentConverter..ctor
		private static bool CallerMethod246(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean GetPropertiesSupported(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod244), "LIBRARY", "System.ComponentModel.ComponentConverter.GetPropertiesSupported(ITypeDescriptorContext)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.ComponentModel.PropertyDescriptorCollection GetProperties(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Object value, System.Attribute[] attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = value;
			paramObjs[3] = attributes;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod245), "LIBRARY", "System.ComponentModel.ComponentConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[])", paramObjs, typeof(System.ComponentModel.PropertyDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptorCollection)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Type type)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = type;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod246), "LIBRARY", "System.ComponentModel.ComponentConverter.ctor(Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.ComponentResourceManager")]
	public class HandlerClass30
	{
		// System.ComponentModel.ComponentResourceManager.ApplyResources
		private static bool CallerMethod247(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ComponentResourceManager.ApplyResources
		private static bool CallerMethod248(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ComponentResourceManager..ctor
		private static bool CallerMethod249(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ComponentResourceManager..ctor
		private static bool CallerMethod250(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void ApplyResources(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value, System.String objectName, System.Globalization.CultureInfo culture)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			paramObjs[2] = objectName;
			paramObjs[3] = culture;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod247), "LIBRARY", "System.ComponentModel.ComponentResourceManager.ApplyResources(Object, String, CultureInfo)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ApplyResources(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value, System.String objectName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			paramObjs[2] = objectName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod248), "LIBRARY", "System.ComponentModel.ComponentResourceManager.ApplyResources(Object, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod249), "LIBRARY", "System.ComponentModel.ComponentResourceManager.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Type t)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = t;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod250), "LIBRARY", "System.ComponentModel.ComponentResourceManager.ctor(Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Container")]
	public class HandlerClass31
	{
		// System.ComponentModel.Container.Dispose
		private static bool CallerMethod251(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Container.Remove
		private static bool CallerMethod252(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Container.get_Components
		private static bool CallerMethod253(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Container.Add
		private static bool CallerMethod254(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Container.Add
		private static bool CallerMethod255(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Container..ctor
		private static bool CallerMethod256(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Dispose(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod251), "LIBRARY", "System.ComponentModel.Container.Dispose()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Remove(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.IComponent component)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod252), "LIBRARY", "System.ComponentModel.Container.Remove(IComponent)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.ComponentModel.ComponentCollection get_Components(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod253), "LIBRARY", "System.ComponentModel.Container.get_Components()", paramObjs, typeof(System.ComponentModel.ComponentCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.ComponentCollection)retValue;
		}

		public static void Add(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.IComponent component, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			paramObjs[2] = name;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod254), "LIBRARY", "System.ComponentModel.Container.Add(IComponent, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Add(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.IComponent component)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod255), "LIBRARY", "System.ComponentModel.Container.Add(IComponent)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod256), "LIBRARY", "System.ComponentModel.Container.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.CultureInfoConverter")]
	public class HandlerClass32
	{
		// System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported
		private static bool CallerMethod257(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive
		private static bool CallerMethod258(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CultureInfoConverter.GetStandardValues
		private static bool CallerMethod259(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CultureInfoConverter.ConvertTo
		private static bool CallerMethod260(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CultureInfoConverter.ConvertFrom
		private static bool CallerMethod261(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CultureInfoConverter.CanConvertTo
		private static bool CallerMethod262(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CultureInfoConverter.CanConvertFrom
		private static bool CallerMethod263(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.CultureInfoConverter..ctor
		private static bool CallerMethod264(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean GetStandardValuesSupported(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod257), "LIBRARY", "System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(ITypeDescriptorContext)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean GetStandardValuesExclusive(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod258), "LIBRARY", "System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(ITypeDescriptorContext)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod259), "LIBRARY", "System.ComponentModel.CultureInfoConverter.GetStandardValues(ITypeDescriptorContext)", paramObjs, typeof(System.ComponentModel.TypeConverter.StandardValuesCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.TypeConverter.StandardValuesCollection)retValue;
		}

		public static System.Object ConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			paramObjs[4] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod260), "LIBRARY", "System.ComponentModel.CultureInfoConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object ConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod261), "LIBRARY", "System.ComponentModel.CultureInfoConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Boolean CanConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod262), "LIBRARY", "System.ComponentModel.CultureInfoConverter.CanConvertTo(ITypeDescriptorContext, Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean CanConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = sourceType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod263), "LIBRARY", "System.ComponentModel.CultureInfoConverter.CanConvertFrom(ITypeDescriptorContext, Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod264), "LIBRARY", "System.ComponentModel.CultureInfoConverter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.DateTimeConverter")]
	public class HandlerClass33
	{
		// System.ComponentModel.DateTimeConverter.ConvertTo
		private static bool CallerMethod265(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DateTimeConverter.ConvertFrom
		private static bool CallerMethod266(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DateTimeConverter.CanConvertTo
		private static bool CallerMethod267(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DateTimeConverter.CanConvertFrom
		private static bool CallerMethod268(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DateTimeConverter..ctor
		private static bool CallerMethod269(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object ConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			paramObjs[4] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod265), "LIBRARY", "System.ComponentModel.DateTimeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object ConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod266), "LIBRARY", "System.ComponentModel.DateTimeConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Boolean CanConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod267), "LIBRARY", "System.ComponentModel.DateTimeConverter.CanConvertTo(ITypeDescriptorContext, Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean CanConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = sourceType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod268), "LIBRARY", "System.ComponentModel.DateTimeConverter.CanConvertFrom(ITypeDescriptorContext, Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod269), "LIBRARY", "System.ComponentModel.DateTimeConverter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.DecimalConverter")]
	public class HandlerClass34
	{
		// System.ComponentModel.DecimalConverter.ConvertTo
		private static bool CallerMethod270(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DecimalConverter.CanConvertTo
		private static bool CallerMethod271(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DecimalConverter..ctor
		private static bool CallerMethod272(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object ConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			paramObjs[4] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod270), "LIBRARY", "System.ComponentModel.DecimalConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Boolean CanConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod271), "LIBRARY", "System.ComponentModel.DecimalConverter.CanConvertTo(ITypeDescriptorContext, Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod272), "LIBRARY", "System.ComponentModel.DecimalConverter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.DefaultEventAttribute")]
	public class HandlerClass35
	{
		// System.ComponentModel.DefaultEventAttribute.GetHashCode
		private static bool CallerMethod273(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DefaultEventAttribute.Equals
		private static bool CallerMethod274(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DefaultEventAttribute.get_Name
		private static bool CallerMethod275(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DefaultEventAttribute..ctor
		private static bool CallerMethod276(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod273), "LIBRARY", "System.ComponentModel.DefaultEventAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod274), "LIBRARY", "System.ComponentModel.DefaultEventAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod275), "LIBRARY", "System.ComponentModel.DefaultEventAttribute.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = name;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod276), "LIBRARY", "System.ComponentModel.DefaultEventAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.DefaultPropertyAttribute")]
	public class HandlerClass36
	{
		// System.ComponentModel.DefaultPropertyAttribute.GetHashCode
		private static bool CallerMethod277(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DefaultPropertyAttribute.Equals
		private static bool CallerMethod278(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DefaultPropertyAttribute.get_Name
		private static bool CallerMethod279(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DefaultPropertyAttribute..ctor
		private static bool CallerMethod280(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod277), "LIBRARY", "System.ComponentModel.DefaultPropertyAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod278), "LIBRARY", "System.ComponentModel.DefaultPropertyAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod279), "LIBRARY", "System.ComponentModel.DefaultPropertyAttribute.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = name;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod280), "LIBRARY", "System.ComponentModel.DefaultPropertyAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.DefaultValueAttribute")]
	public class HandlerClass37
	{
		// System.ComponentModel.DefaultValueAttribute.GetHashCode
		private static bool CallerMethod281(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DefaultValueAttribute.Equals
		private static bool CallerMethod282(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DefaultValueAttribute.get_Value
		private static bool CallerMethod283(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DefaultValueAttribute..ctor
		private static bool CallerMethod284(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DefaultValueAttribute..ctor
		private static bool CallerMethod285(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DefaultValueAttribute..ctor
		private static bool CallerMethod286(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DefaultValueAttribute..ctor
		private static bool CallerMethod287(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DefaultValueAttribute..ctor
		private static bool CallerMethod288(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DefaultValueAttribute..ctor
		private static bool CallerMethod289(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DefaultValueAttribute..ctor
		private static bool CallerMethod290(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DefaultValueAttribute..ctor
		private static bool CallerMethod291(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DefaultValueAttribute..ctor
		private static bool CallerMethod292(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DefaultValueAttribute..ctor
		private static bool CallerMethod293(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DefaultValueAttribute..ctor
		private static bool CallerMethod294(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod281), "LIBRARY", "System.ComponentModel.DefaultValueAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod282), "LIBRARY", "System.ComponentModel.DefaultValueAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Object get_Value(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod283), "LIBRARY", "System.ComponentModel.DefaultValueAttribute.get_Value()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Type type, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = type;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod284), "LIBRARY", "System.ComponentModel.DefaultValueAttribute.ctor(Type, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Char value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod285), "LIBRARY", "System.ComponentModel.DefaultValueAttribute.ctor(Char)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Byte value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod286), "LIBRARY", "System.ComponentModel.DefaultValueAttribute.ctor(Byte)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int16 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod287), "LIBRARY", "System.ComponentModel.DefaultValueAttribute.ctor(Int16)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod288), "LIBRARY", "System.ComponentModel.DefaultValueAttribute.ctor(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod289), "LIBRARY", "System.ComponentModel.DefaultValueAttribute.ctor(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Single value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod290), "LIBRARY", "System.ComponentModel.DefaultValueAttribute.ctor(Single)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Double value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod291), "LIBRARY", "System.ComponentModel.DefaultValueAttribute.ctor(Double)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod292), "LIBRARY", "System.ComponentModel.DefaultValueAttribute.ctor(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod293), "LIBRARY", "System.ComponentModel.DefaultValueAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod294), "LIBRARY", "System.ComponentModel.DefaultValueAttribute.ctor(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.DesignerAttribute")]
	public class HandlerClass38
	{
		// System.ComponentModel.DesignerAttribute.get_TypeId
		private static bool CallerMethod295(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignerAttribute.GetHashCode
		private static bool CallerMethod296(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignerAttribute.Equals
		private static bool CallerMethod297(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignerAttribute.get_DesignerBaseTypeName
		private static bool CallerMethod298(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignerAttribute.get_DesignerTypeName
		private static bool CallerMethod299(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignerAttribute..ctor
		private static bool CallerMethod300(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignerAttribute..ctor
		private static bool CallerMethod301(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignerAttribute..ctor
		private static bool CallerMethod302(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignerAttribute..ctor
		private static bool CallerMethod303(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignerAttribute..ctor
		private static bool CallerMethod304(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object get_TypeId(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod295), "LIBRARY", "System.ComponentModel.DesignerAttribute.get_TypeId()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod296), "LIBRARY", "System.ComponentModel.DesignerAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod297), "LIBRARY", "System.ComponentModel.DesignerAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_DesignerBaseTypeName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod298), "LIBRARY", "System.ComponentModel.DesignerAttribute.get_DesignerBaseTypeName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_DesignerTypeName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod299), "LIBRARY", "System.ComponentModel.DesignerAttribute.get_DesignerTypeName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String designerTypeName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = designerTypeName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod300), "LIBRARY", "System.ComponentModel.DesignerAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Type designerType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = designerType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod301), "LIBRARY", "System.ComponentModel.DesignerAttribute.ctor(Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String designerTypeName, System.String designerBaseTypeName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = designerTypeName;
			paramObjs[2] = designerBaseTypeName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod302), "LIBRARY", "System.ComponentModel.DesignerAttribute.ctor(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String designerTypeName, System.Type designerBaseType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = designerTypeName;
			paramObjs[2] = designerBaseType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod303), "LIBRARY", "System.ComponentModel.DesignerAttribute.ctor(String, Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Type designerType, System.Type designerBaseType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = designerType;
			paramObjs[2] = designerBaseType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod304), "LIBRARY", "System.ComponentModel.DesignerAttribute.ctor(Type, Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.DesignerCategoryAttribute")]
	public class HandlerClass39
	{
		// System.ComponentModel.DesignerCategoryAttribute.IsDefaultAttribute
		private static bool CallerMethod305(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignerCategoryAttribute.get_TypeId
		private static bool CallerMethod306(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignerCategoryAttribute.GetHashCode
		private static bool CallerMethod307(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignerCategoryAttribute.Equals
		private static bool CallerMethod308(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignerCategoryAttribute.get_Category
		private static bool CallerMethod309(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignerCategoryAttribute..ctor
		private static bool CallerMethod310(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignerCategoryAttribute..ctor
		private static bool CallerMethod311(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefaultAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod305), "LIBRARY", "System.ComponentModel.DesignerCategoryAttribute.IsDefaultAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Object get_TypeId(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod306), "LIBRARY", "System.ComponentModel.DesignerCategoryAttribute.get_TypeId()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod307), "LIBRARY", "System.ComponentModel.DesignerCategoryAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod308), "LIBRARY", "System.ComponentModel.DesignerCategoryAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_Category(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod309), "LIBRARY", "System.ComponentModel.DesignerCategoryAttribute.get_Category()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod310), "LIBRARY", "System.ComponentModel.DesignerCategoryAttribute.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod311), "LIBRARY", "System.ComponentModel.DesignerCategoryAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.DesignerSerializationVisibilityAttribute")]
	public class HandlerClass40
	{
		// System.ComponentModel.DesignerSerializationVisibilityAttribute.IsDefaultAttribute
		private static bool CallerMethod312(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignerSerializationVisibilityAttribute.GetHashCode
		private static bool CallerMethod313(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignerSerializationVisibilityAttribute.Equals
		private static bool CallerMethod314(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignerSerializationVisibilityAttribute.get_Visibility
		private static bool CallerMethod315(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignerSerializationVisibilityAttribute..ctor
		private static bool CallerMethod316(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefaultAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod312), "LIBRARY", "System.ComponentModel.DesignerSerializationVisibilityAttribute.IsDefaultAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod313), "LIBRARY", "System.ComponentModel.DesignerSerializationVisibilityAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod314), "LIBRARY", "System.ComponentModel.DesignerSerializationVisibilityAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.ComponentModel.DesignerSerializationVisibility get_Visibility(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod315), "LIBRARY", "System.ComponentModel.DesignerSerializationVisibilityAttribute.get_Visibility()", paramObjs, typeof(System.ComponentModel.DesignerSerializationVisibility), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.DesignerSerializationVisibility)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.ComponentModel.DesignerSerializationVisibility visibility)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = visibility;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod316), "LIBRARY", "System.ComponentModel.DesignerSerializationVisibilityAttribute.ctor(DesignerSerializationVisibility)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.DesignOnlyAttribute")]
	public class HandlerClass41
	{
		// System.ComponentModel.DesignOnlyAttribute.IsDefaultAttribute
		private static bool CallerMethod317(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignOnlyAttribute.GetHashCode
		private static bool CallerMethod318(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignOnlyAttribute.Equals
		private static bool CallerMethod319(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignOnlyAttribute.get_IsDesignOnly
		private static bool CallerMethod320(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignOnlyAttribute..ctor
		private static bool CallerMethod321(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefaultAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod317), "LIBRARY", "System.ComponentModel.DesignOnlyAttribute.IsDefaultAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod318), "LIBRARY", "System.ComponentModel.DesignOnlyAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod319), "LIBRARY", "System.ComponentModel.DesignOnlyAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsDesignOnly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod320), "LIBRARY", "System.ComponentModel.DesignOnlyAttribute.get_IsDesignOnly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Boolean isDesignOnly)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = isDesignOnly;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod321), "LIBRARY", "System.ComponentModel.DesignOnlyAttribute.ctor(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.DesignTimeVisibleAttribute")]
	public class HandlerClass42
	{
		// System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute
		private static bool CallerMethod322(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode
		private static bool CallerMethod323(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignTimeVisibleAttribute.Equals
		private static bool CallerMethod324(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignTimeVisibleAttribute.get_Visible
		private static bool CallerMethod325(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignTimeVisibleAttribute..ctor
		private static bool CallerMethod326(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.DesignTimeVisibleAttribute..ctor
		private static bool CallerMethod327(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefaultAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod322), "LIBRARY", "System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod323), "LIBRARY", "System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod324), "LIBRARY", "System.ComponentModel.DesignTimeVisibleAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_Visible(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod325), "LIBRARY", "System.ComponentModel.DesignTimeVisibleAttribute.get_Visible()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Boolean visible)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = visible;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod326), "LIBRARY", "System.ComponentModel.DesignTimeVisibleAttribute.ctor(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod327), "LIBRARY", "System.ComponentModel.DesignTimeVisibleAttribute.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.DoubleConverter")]
	public class HandlerClass43
	{
		// System.ComponentModel.DoubleConverter..ctor
		private static bool CallerMethod328(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod328), "LIBRARY", "System.ComponentModel.DoubleConverter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.EditorAttribute")]
	public class HandlerClass44
	{
		// System.ComponentModel.EditorAttribute.get_TypeId
		private static bool CallerMethod329(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EditorAttribute.GetHashCode
		private static bool CallerMethod330(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EditorAttribute.Equals
		private static bool CallerMethod331(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EditorAttribute.get_EditorBaseTypeName
		private static bool CallerMethod332(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EditorAttribute.get_EditorTypeName
		private static bool CallerMethod333(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EditorAttribute..ctor
		private static bool CallerMethod334(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EditorAttribute..ctor
		private static bool CallerMethod335(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EditorAttribute..ctor
		private static bool CallerMethod336(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EditorAttribute..ctor
		private static bool CallerMethod337(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object get_TypeId(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod329), "LIBRARY", "System.ComponentModel.EditorAttribute.get_TypeId()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod330), "LIBRARY", "System.ComponentModel.EditorAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod331), "LIBRARY", "System.ComponentModel.EditorAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_EditorBaseTypeName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod332), "LIBRARY", "System.ComponentModel.EditorAttribute.get_EditorBaseTypeName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_EditorTypeName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod333), "LIBRARY", "System.ComponentModel.EditorAttribute.get_EditorTypeName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod334), "LIBRARY", "System.ComponentModel.EditorAttribute.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String typeName, System.String baseTypeName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = typeName;
			paramObjs[2] = baseTypeName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod335), "LIBRARY", "System.ComponentModel.EditorAttribute.ctor(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String typeName, System.Type baseType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = typeName;
			paramObjs[2] = baseType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod336), "LIBRARY", "System.ComponentModel.EditorAttribute.ctor(String, Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Type type, System.Type baseType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = type;
			paramObjs[2] = baseType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod337), "LIBRARY", "System.ComponentModel.EditorAttribute.ctor(Type, Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.EditorBrowsableAttribute")]
	public class HandlerClass45
	{
		// System.ComponentModel.EditorBrowsableAttribute.GetHashCode
		private static bool CallerMethod338(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EditorBrowsableAttribute.Equals
		private static bool CallerMethod339(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EditorBrowsableAttribute.get_State
		private static bool CallerMethod340(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EditorBrowsableAttribute..ctor
		private static bool CallerMethod341(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EditorBrowsableAttribute..ctor
		private static bool CallerMethod342(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod338), "LIBRARY", "System.ComponentModel.EditorBrowsableAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod339), "LIBRARY", "System.ComponentModel.EditorBrowsableAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.ComponentModel.EditorBrowsableState get_State(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod340), "LIBRARY", "System.ComponentModel.EditorBrowsableAttribute.get_State()", paramObjs, typeof(System.ComponentModel.EditorBrowsableState), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.EditorBrowsableState)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.ComponentModel.EditorBrowsableState state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = state;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod341), "LIBRARY", "System.ComponentModel.EditorBrowsableAttribute.ctor(EditorBrowsableState)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod342), "LIBRARY", "System.ComponentModel.EditorBrowsableAttribute.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.EnumConverter")]
	public class HandlerClass46
	{
		// System.ComponentModel.EnumConverter.IsValid
		private static bool CallerMethod343(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EnumConverter.GetStandardValuesSupported
		private static bool CallerMethod344(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EnumConverter.GetStandardValuesExclusive
		private static bool CallerMethod345(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EnumConverter.GetStandardValues
		private static bool CallerMethod346(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EnumConverter.ConvertTo
		private static bool CallerMethod347(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EnumConverter.ConvertFrom
		private static bool CallerMethod348(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EnumConverter.CanConvertTo
		private static bool CallerMethod349(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EnumConverter.CanConvertFrom
		private static bool CallerMethod350(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EnumConverter..ctor
		private static bool CallerMethod351(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsValid(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod343), "LIBRARY", "System.ComponentModel.EnumConverter.IsValid(ITypeDescriptorContext, Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean GetStandardValuesSupported(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod344), "LIBRARY", "System.ComponentModel.EnumConverter.GetStandardValuesSupported(ITypeDescriptorContext)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean GetStandardValuesExclusive(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod345), "LIBRARY", "System.ComponentModel.EnumConverter.GetStandardValuesExclusive(ITypeDescriptorContext)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod346), "LIBRARY", "System.ComponentModel.EnumConverter.GetStandardValues(ITypeDescriptorContext)", paramObjs, typeof(System.ComponentModel.TypeConverter.StandardValuesCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.TypeConverter.StandardValuesCollection)retValue;
		}

		public static System.Object ConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			paramObjs[4] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod347), "LIBRARY", "System.ComponentModel.EnumConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object ConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod348), "LIBRARY", "System.ComponentModel.EnumConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Boolean CanConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod349), "LIBRARY", "System.ComponentModel.EnumConverter.CanConvertTo(ITypeDescriptorContext, Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean CanConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = sourceType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod350), "LIBRARY", "System.ComponentModel.EnumConverter.CanConvertFrom(ITypeDescriptorContext, Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Type type)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = type;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod351), "LIBRARY", "System.ComponentModel.EnumConverter.ctor(Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.EventDescriptorCollection")]
	public class HandlerClass47
	{
		// System.ComponentModel.EventDescriptorCollection.Sort
		private static bool CallerMethod352(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EventDescriptorCollection.Sort
		private static bool CallerMethod353(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EventDescriptorCollection.Sort
		private static bool CallerMethod354(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EventDescriptorCollection.Sort
		private static bool CallerMethod355(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EventDescriptorCollection.Find
		private static bool CallerMethod356(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EventDescriptorCollection.get_Item
		private static bool CallerMethod357(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EventDescriptorCollection.get_Item
		private static bool CallerMethod358(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EventDescriptorCollection.get_Count
		private static bool CallerMethod359(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EventDescriptorCollection.Add
		private static bool CallerMethod360(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EventDescriptorCollection.Clear
		private static bool CallerMethod361(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EventDescriptorCollection.Contains
		private static bool CallerMethod362(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EventDescriptorCollection.IndexOf
		private static bool CallerMethod363(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EventDescriptorCollection.Insert
		private static bool CallerMethod364(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EventDescriptorCollection.Remove
		private static bool CallerMethod365(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EventDescriptorCollection.RemoveAt
		private static bool CallerMethod366(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EventDescriptorCollection.GetEnumerator
		private static bool CallerMethod367(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EventDescriptorCollection..ctor
		private static bool CallerMethod368(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.ComponentModel.EventDescriptorCollection Sort(HeatDotNet.MethodInterceptInfo methodIntercept, System.Collections.IComparer comparer)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = comparer;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod352), "LIBRARY", "System.ComponentModel.EventDescriptorCollection.Sort(IComparer)", paramObjs, typeof(System.ComponentModel.EventDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.EventDescriptorCollection)retValue;
		}

		public static System.ComponentModel.EventDescriptorCollection Sort(HeatDotNet.MethodInterceptInfo methodIntercept, System.String[] names, System.Collections.IComparer comparer)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = names;
			paramObjs[2] = comparer;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod353), "LIBRARY", "System.ComponentModel.EventDescriptorCollection.Sort(String[], IComparer)", paramObjs, typeof(System.ComponentModel.EventDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.EventDescriptorCollection)retValue;
		}

		public static System.ComponentModel.EventDescriptorCollection Sort(HeatDotNet.MethodInterceptInfo methodIntercept, System.String[] names)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = names;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod354), "LIBRARY", "System.ComponentModel.EventDescriptorCollection.Sort(String[])", paramObjs, typeof(System.ComponentModel.EventDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.EventDescriptorCollection)retValue;
		}

		public static System.ComponentModel.EventDescriptorCollection Sort(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod355), "LIBRARY", "System.ComponentModel.EventDescriptorCollection.Sort()", paramObjs, typeof(System.ComponentModel.EventDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.EventDescriptorCollection)retValue;
		}

		public static System.ComponentModel.EventDescriptor Find(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Boolean ignoreCase)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = ignoreCase;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod356), "LIBRARY", "System.ComponentModel.EventDescriptorCollection.Find(String, Boolean)", paramObjs, typeof(System.ComponentModel.EventDescriptor), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.EventDescriptor)retValue;
		}

		public static System.ComponentModel.EventDescriptor get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod357), "LIBRARY", "System.ComponentModel.EventDescriptorCollection.get_Item(String)", paramObjs, typeof(System.ComponentModel.EventDescriptor), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.EventDescriptor)retValue;
		}

		public static System.ComponentModel.EventDescriptor get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod358), "LIBRARY", "System.ComponentModel.EventDescriptorCollection.get_Item(Int32)", paramObjs, typeof(System.ComponentModel.EventDescriptor), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.EventDescriptor)retValue;
		}

		public static System.Int32 get_Count(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod359), "LIBRARY", "System.ComponentModel.EventDescriptorCollection.get_Count()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Add(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.EventDescriptor value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod360), "LIBRARY", "System.ComponentModel.EventDescriptorCollection.Add(EventDescriptor)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Clear(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod361), "LIBRARY", "System.ComponentModel.EventDescriptorCollection.Clear()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean Contains(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.EventDescriptor value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod362), "LIBRARY", "System.ComponentModel.EventDescriptorCollection.Contains(EventDescriptor)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.EventDescriptor value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod363), "LIBRARY", "System.ComponentModel.EventDescriptorCollection.IndexOf(EventDescriptor)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Insert(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index, System.ComponentModel.EventDescriptor value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod364), "LIBRARY", "System.ComponentModel.EventDescriptorCollection.Insert(Int32, EventDescriptor)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Remove(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.EventDescriptor value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod365), "LIBRARY", "System.ComponentModel.EventDescriptorCollection.Remove(EventDescriptor)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void RemoveAt(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod366), "LIBRARY", "System.ComponentModel.EventDescriptorCollection.RemoveAt(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Collections.IEnumerator GetEnumerator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod367), "LIBRARY", "System.ComponentModel.EventDescriptorCollection.GetEnumerator()", paramObjs, typeof(System.Collections.IEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IEnumerator)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.ComponentModel.EventDescriptor[] events)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = events;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod368), "LIBRARY", "System.ComponentModel.EventDescriptorCollection.ctor(EventDescriptor[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.EventHandlerList")]
	public class HandlerClass48
	{
		// System.ComponentModel.EventHandlerList.Dispose
		private static bool CallerMethod369(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EventHandlerList.get_Item
		private static bool CallerMethod370(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EventHandlerList.set_Item
		private static bool CallerMethod371(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EventHandlerList.AddHandler
		private static bool CallerMethod372(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EventHandlerList.RemoveHandler
		private static bool CallerMethod373(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.EventHandlerList..ctor
		private static bool CallerMethod374(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Dispose(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod369), "LIBRARY", "System.ComponentModel.EventHandlerList.Dispose()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Delegate get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object key)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = key;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod370), "LIBRARY", "System.ComponentModel.EventHandlerList.get_Item(Object)", paramObjs, typeof(System.Delegate), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Delegate)retValue;
		}

		public static void set_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object key, System.Delegate value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = key;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod371), "LIBRARY", "System.ComponentModel.EventHandlerList.set_Item(Object, Delegate)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddHandler(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object key, System.Delegate value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = key;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod372), "LIBRARY", "System.ComponentModel.EventHandlerList.AddHandler(Object, Delegate)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void RemoveHandler(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object key, System.Delegate value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = key;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod373), "LIBRARY", "System.ComponentModel.EventHandlerList.RemoveHandler(Object, Delegate)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod374), "LIBRARY", "System.ComponentModel.EventHandlerList.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.ExpandableObjectConverter")]
	public class HandlerClass49
	{
		// System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported
		private static bool CallerMethod375(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ExpandableObjectConverter.GetProperties
		private static bool CallerMethod376(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ExpandableObjectConverter..ctor
		private static bool CallerMethod377(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean GetPropertiesSupported(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod375), "LIBRARY", "System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(ITypeDescriptorContext)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.ComponentModel.PropertyDescriptorCollection GetProperties(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Object value, System.Attribute[] attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = value;
			paramObjs[3] = attributes;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod376), "LIBRARY", "System.ComponentModel.ExpandableObjectConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[])", paramObjs, typeof(System.ComponentModel.PropertyDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptorCollection)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod377), "LIBRARY", "System.ComponentModel.ExpandableObjectConverter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.ExtenderProvidedPropertyAttribute")]
	public class HandlerClass50
	{
		// System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute
		private static bool CallerMethod378(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode
		private static bool CallerMethod379(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals
		private static bool CallerMethod380(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ExtenderProvidedPropertyAttribute.get_ExtenderProperty
		private static bool CallerMethod381(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ExtenderProvidedPropertyAttribute.get_Provider
		private static bool CallerMethod382(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ExtenderProvidedPropertyAttribute.get_ReceiverType
		private static bool CallerMethod383(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ExtenderProvidedPropertyAttribute..ctor
		private static bool CallerMethod384(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefaultAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod378), "LIBRARY", "System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod379), "LIBRARY", "System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod380), "LIBRARY", "System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.ComponentModel.PropertyDescriptor get_ExtenderProperty(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod381), "LIBRARY", "System.ComponentModel.ExtenderProvidedPropertyAttribute.get_ExtenderProperty()", paramObjs, typeof(System.ComponentModel.PropertyDescriptor), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptor)retValue;
		}

		public static System.ComponentModel.IExtenderProvider get_Provider(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod382), "LIBRARY", "System.ComponentModel.ExtenderProvidedPropertyAttribute.get_Provider()", paramObjs, typeof(System.ComponentModel.IExtenderProvider), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.IExtenderProvider)retValue;
		}

		public static System.Type get_ReceiverType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod383), "LIBRARY", "System.ComponentModel.ExtenderProvidedPropertyAttribute.get_ReceiverType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod384), "LIBRARY", "System.ComponentModel.ExtenderProvidedPropertyAttribute.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.GuidConverter")]
	public class HandlerClass51
	{
		// System.ComponentModel.GuidConverter.ConvertTo
		private static bool CallerMethod385(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.GuidConverter.ConvertFrom
		private static bool CallerMethod386(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.GuidConverter.CanConvertTo
		private static bool CallerMethod387(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.GuidConverter.CanConvertFrom
		private static bool CallerMethod388(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.GuidConverter..ctor
		private static bool CallerMethod389(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object ConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			paramObjs[4] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod385), "LIBRARY", "System.ComponentModel.GuidConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object ConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod386), "LIBRARY", "System.ComponentModel.GuidConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Boolean CanConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod387), "LIBRARY", "System.ComponentModel.GuidConverter.CanConvertTo(ITypeDescriptorContext, Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean CanConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = sourceType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod388), "LIBRARY", "System.ComponentModel.GuidConverter.CanConvertFrom(ITypeDescriptorContext, Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod389), "LIBRARY", "System.ComponentModel.GuidConverter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.ImmutableObjectAttribute")]
	public class HandlerClass52
	{
		// System.ComponentModel.ImmutableObjectAttribute.IsDefaultAttribute
		private static bool CallerMethod390(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ImmutableObjectAttribute.GetHashCode
		private static bool CallerMethod391(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ImmutableObjectAttribute.Equals
		private static bool CallerMethod392(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ImmutableObjectAttribute.get_Immutable
		private static bool CallerMethod393(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ImmutableObjectAttribute..ctor
		private static bool CallerMethod394(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefaultAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod390), "LIBRARY", "System.ComponentModel.ImmutableObjectAttribute.IsDefaultAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod391), "LIBRARY", "System.ComponentModel.ImmutableObjectAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod392), "LIBRARY", "System.ComponentModel.ImmutableObjectAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_Immutable(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod393), "LIBRARY", "System.ComponentModel.ImmutableObjectAttribute.get_Immutable()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Boolean immutable)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = immutable;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod394), "LIBRARY", "System.ComponentModel.ImmutableObjectAttribute.ctor(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.InstallerTypeAttribute")]
	public class HandlerClass53
	{
		// System.ComponentModel.InstallerTypeAttribute.get_InstallerType
		private static bool CallerMethod395(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.InstallerTypeAttribute.GetHashCode
		private static bool CallerMethod396(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.InstallerTypeAttribute.Equals
		private static bool CallerMethod397(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.InstallerTypeAttribute..ctor
		private static bool CallerMethod398(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.InstallerTypeAttribute..ctor
		private static bool CallerMethod399(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Type get_InstallerType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod395), "LIBRARY", "System.ComponentModel.InstallerTypeAttribute.get_InstallerType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod396), "LIBRARY", "System.ComponentModel.InstallerTypeAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod397), "LIBRARY", "System.ComponentModel.InstallerTypeAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Type installerType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = installerType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod398), "LIBRARY", "System.ComponentModel.InstallerTypeAttribute.ctor(Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String typeName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = typeName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod399), "LIBRARY", "System.ComponentModel.InstallerTypeAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Int16Converter")]
	public class HandlerClass54
	{
		// System.ComponentModel.Int16Converter..ctor
		private static bool CallerMethod400(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod400), "LIBRARY", "System.ComponentModel.Int16Converter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Int32Converter")]
	public class HandlerClass55
	{
		// System.ComponentModel.Int32Converter..ctor
		private static bool CallerMethod401(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod401), "LIBRARY", "System.ComponentModel.Int32Converter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Int64Converter")]
	public class HandlerClass56
	{
		// System.ComponentModel.Int64Converter..ctor
		private static bool CallerMethod402(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod402), "LIBRARY", "System.ComponentModel.Int64Converter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.LicenseContext")]
	public class HandlerClass57
	{
		// System.ComponentModel.LicenseContext.GetService
		private static bool CallerMethod403(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LicenseContext.SetSavedLicenseKey
		private static bool CallerMethod404(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LicenseContext.GetSavedLicenseKey
		private static bool CallerMethod405(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LicenseContext.get_UsageMode
		private static bool CallerMethod406(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LicenseContext..ctor
		private static bool CallerMethod407(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object GetService(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type type)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod403), "SECURITY", "System.ComponentModel.LicenseContext.GetService(Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static void SetSavedLicenseKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type type, System.String key)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			paramObjs[2] = key;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod404), "SECURITY", "System.ComponentModel.LicenseContext.SetSavedLicenseKey(Type, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String GetSavedLicenseKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type type, System.Reflection.Assembly resourceAssembly)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			paramObjs[2] = resourceAssembly;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod405), "SECURITY", "System.ComponentModel.LicenseContext.GetSavedLicenseKey(Type, Assembly)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.ComponentModel.LicenseUsageMode get_UsageMode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod406), "SECURITY", "System.ComponentModel.LicenseContext.get_UsageMode()", paramObjs, typeof(System.ComponentModel.LicenseUsageMode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.LicenseUsageMode)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod407), "SECURITY", "System.ComponentModel.LicenseContext.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.LicenseManager")]
	public class HandlerClass58
	{
		// System.ComponentModel.LicenseManager.get_CurrentContext
		private static bool CallerMethod408(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LicenseManager.set_CurrentContext
		private static bool CallerMethod409(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LicenseManager.get_UsageMode
		private static bool CallerMethod410(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LicenseManager.CreateWithContext
		private static bool CallerMethod411(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LicenseManager.CreateWithContext
		private static bool CallerMethod412(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LicenseManager.IsLicensed
		private static bool CallerMethod413(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LicenseManager.IsValid
		private static bool CallerMethod414(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LicenseManager.IsValid
		private static bool CallerMethod415(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			Array.Copy(methodParams, 0, paramObjs, 1, paramObjs.Length - 1);
			return true;
		}

		// System.ComponentModel.LicenseManager.LockContext
		private static bool CallerMethod416(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LicenseManager.UnlockContext
		private static bool CallerMethod417(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LicenseManager.Validate
		private static bool CallerMethod418(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LicenseManager.Validate
		private static bool CallerMethod419(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.ComponentModel.LicenseContext get_CurrentContext(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod408), "SECURITY", "System.ComponentModel.LicenseManager.get_CurrentContext()", paramObjs, typeof(System.ComponentModel.LicenseContext), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.LicenseContext)retValue;
		}

		public static void set_CurrentContext(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.LicenseContext value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod409), "SECURITY", "System.ComponentModel.LicenseManager.set_CurrentContext(LicenseContext)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.ComponentModel.LicenseUsageMode get_UsageMode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod410), "SECURITY", "System.ComponentModel.LicenseManager.get_UsageMode()", paramObjs, typeof(System.ComponentModel.LicenseUsageMode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.LicenseUsageMode)retValue;
		}

		public static System.Object CreateWithContext(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type type, System.ComponentModel.LicenseContext creationContext)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			paramObjs[2] = creationContext;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod411), "SECURITY", "System.ComponentModel.LicenseManager.CreateWithContext(Type, LicenseContext)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object CreateWithContext(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type type, System.ComponentModel.LicenseContext creationContext, System.Object[] args)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			paramObjs[2] = creationContext;
			paramObjs[3] = args;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod412), "SECURITY", "System.ComponentModel.LicenseManager.CreateWithContext(Type, LicenseContext, Object[])", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Boolean IsLicensed(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type type)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod413), "SECURITY", "System.ComponentModel.LicenseManager.IsLicensed(Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsValid(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type type)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod414), "SECURITY", "System.ComponentModel.LicenseManager.IsValid(Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsValid(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type type, System.Object instance, ref System.ComponentModel.License license)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			paramObjs[2] = instance;
			paramObjs[3] = license;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod415), "SECURITY", "System.ComponentModel.LicenseManager.IsValid(Type, Object, License&)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			license = (System.ComponentModel.License)paramObjs[3];
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void LockContext(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object contextUser)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = contextUser;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod416), "SECURITY", "System.ComponentModel.LicenseManager.LockContext(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void UnlockContext(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object contextUser)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = contextUser;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod417), "SECURITY", "System.ComponentModel.LicenseManager.UnlockContext(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Validate(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type type)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod418), "SECURITY", "System.ComponentModel.LicenseManager.Validate(Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.ComponentModel.License Validate(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type type, System.Object instance)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			paramObjs[2] = instance;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod419), "SECURITY", "System.ComponentModel.LicenseManager.Validate(Type, Object)", paramObjs, typeof(System.ComponentModel.License), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.License)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.LicenseProviderAttribute")]
	public class HandlerClass59
	{
		// System.ComponentModel.LicenseProviderAttribute.get_TypeId
		private static bool CallerMethod420(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LicenseProviderAttribute.GetHashCode
		private static bool CallerMethod421(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LicenseProviderAttribute.Equals
		private static bool CallerMethod422(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LicenseProviderAttribute.get_LicenseProvider
		private static bool CallerMethod423(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LicenseProviderAttribute..ctor
		private static bool CallerMethod424(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LicenseProviderAttribute..ctor
		private static bool CallerMethod425(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LicenseProviderAttribute..ctor
		private static bool CallerMethod426(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object get_TypeId(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod420), "SECURITY", "System.ComponentModel.LicenseProviderAttribute.get_TypeId()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod421), "SECURITY", "System.ComponentModel.LicenseProviderAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod422), "SECURITY", "System.ComponentModel.LicenseProviderAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Type get_LicenseProvider(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod423), "SECURITY", "System.ComponentModel.LicenseProviderAttribute.get_LicenseProvider()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod424), "SECURITY", "System.ComponentModel.LicenseProviderAttribute.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String typeName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = typeName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod425), "SECURITY", "System.ComponentModel.LicenseProviderAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Type type)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = type;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod426), "SECURITY", "System.ComponentModel.LicenseProviderAttribute.ctor(Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.LicFileLicenseProvider")]
	public class HandlerClass60
	{
		// System.ComponentModel.LicFileLicenseProvider.GetLicense
		private static bool CallerMethod427(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LicFileLicenseProvider..ctor
		private static bool CallerMethod428(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.ComponentModel.License GetLicense(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.LicenseContext context, System.Type type, System.Object instance, System.Boolean allowExceptions)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = type;
			paramObjs[3] = instance;
			paramObjs[4] = allowExceptions;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod427), "LIBRARY", "System.ComponentModel.LicFileLicenseProvider.GetLicense(LicenseContext, Type, Object, Boolean)", paramObjs, typeof(System.ComponentModel.License), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.License)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod428), "LIBRARY", "System.ComponentModel.LicFileLicenseProvider.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.ListBindableAttribute")]
	public class HandlerClass61
	{
		// System.ComponentModel.ListBindableAttribute.IsDefaultAttribute
		private static bool CallerMethod429(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ListBindableAttribute.GetHashCode
		private static bool CallerMethod430(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ListBindableAttribute.Equals
		private static bool CallerMethod431(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ListBindableAttribute.get_ListBindable
		private static bool CallerMethod432(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ListBindableAttribute..ctor
		private static bool CallerMethod433(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ListBindableAttribute..ctor
		private static bool CallerMethod434(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefaultAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod429), "LIBRARY", "System.ComponentModel.ListBindableAttribute.IsDefaultAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod430), "LIBRARY", "System.ComponentModel.ListBindableAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod431), "LIBRARY", "System.ComponentModel.ListBindableAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_ListBindable(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod432), "LIBRARY", "System.ComponentModel.ListBindableAttribute.get_ListBindable()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Boolean listBindable)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = listBindable;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod433), "LIBRARY", "System.ComponentModel.ListBindableAttribute.ctor(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.ComponentModel.BindableSupport flags)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = flags;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod434), "LIBRARY", "System.ComponentModel.ListBindableAttribute.ctor(BindableSupport)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.ListChangedEventArgs")]
	public class HandlerClass62
	{
		// System.ComponentModel.ListChangedEventArgs.get_ListChangedType
		private static bool CallerMethod435(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ListChangedEventArgs.get_NewIndex
		private static bool CallerMethod436(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ListChangedEventArgs.get_OldIndex
		private static bool CallerMethod437(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ListChangedEventArgs..ctor
		private static bool CallerMethod438(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ListChangedEventArgs..ctor
		private static bool CallerMethod439(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ListChangedEventArgs..ctor
		private static bool CallerMethod440(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.ComponentModel.ListChangedType get_ListChangedType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod435), "LIBRARY", "System.ComponentModel.ListChangedEventArgs.get_ListChangedType()", paramObjs, typeof(System.ComponentModel.ListChangedType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.ListChangedType)retValue;
		}

		public static System.Int32 get_NewIndex(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod436), "LIBRARY", "System.ComponentModel.ListChangedEventArgs.get_NewIndex()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_OldIndex(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod437), "LIBRARY", "System.ComponentModel.ListChangedEventArgs.get_OldIndex()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.ComponentModel.ListChangedType listChangedType, System.Int32 newIndex)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = listChangedType;
			paramObjs[2] = newIndex;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod438), "LIBRARY", "System.ComponentModel.ListChangedEventArgs.ctor(ListChangedType, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.ComponentModel.ListChangedType listChangedType, System.ComponentModel.PropertyDescriptor propDesc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = listChangedType;
			paramObjs[2] = propDesc;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod439), "LIBRARY", "System.ComponentModel.ListChangedEventArgs.ctor(ListChangedType, PropertyDescriptor)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.ComponentModel.ListChangedType listChangedType, System.Int32 newIndex, System.Int32 oldIndex)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = listChangedType;
			paramObjs[2] = newIndex;
			paramObjs[3] = oldIndex;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod440), "LIBRARY", "System.ComponentModel.ListChangedEventArgs.ctor(ListChangedType, Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.LocalizableAttribute")]
	public class HandlerClass63
	{
		// System.ComponentModel.LocalizableAttribute.IsDefaultAttribute
		private static bool CallerMethod441(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LocalizableAttribute.GetHashCode
		private static bool CallerMethod442(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LocalizableAttribute.Equals
		private static bool CallerMethod443(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LocalizableAttribute.get_IsLocalizable
		private static bool CallerMethod444(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.LocalizableAttribute..ctor
		private static bool CallerMethod445(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefaultAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod441), "LIBRARY", "System.ComponentModel.LocalizableAttribute.IsDefaultAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod442), "LIBRARY", "System.ComponentModel.LocalizableAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod443), "LIBRARY", "System.ComponentModel.LocalizableAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsLocalizable(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod444), "LIBRARY", "System.ComponentModel.LocalizableAttribute.get_IsLocalizable()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Boolean isLocalizable)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = isLocalizable;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod445), "LIBRARY", "System.ComponentModel.LocalizableAttribute.ctor(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.MarshalByValueComponent")]
	public class HandlerClass64
	{
		// System.ComponentModel.MarshalByValueComponent.GetService
		private static bool CallerMethod446(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.MarshalByValueComponent.Dispose
		private static bool CallerMethod447(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.MarshalByValueComponent.remove_Disposed
		private static bool CallerMethod448(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.MarshalByValueComponent.add_Disposed
		private static bool CallerMethod449(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.MarshalByValueComponent.set_Site
		private static bool CallerMethod450(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.MarshalByValueComponent.get_Site
		private static bool CallerMethod451(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.MarshalByValueComponent.get_DesignMode
		private static bool CallerMethod452(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.MarshalByValueComponent.get_Container
		private static bool CallerMethod453(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.MarshalByValueComponent.ToString
		private static bool CallerMethod454(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.MarshalByValueComponent..ctor
		private static bool CallerMethod455(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object GetService(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type service)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = service;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod446), "LIBRARY", "System.ComponentModel.MarshalByValueComponent.GetService(Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static void Dispose(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod447), "LIBRARY", "System.ComponentModel.MarshalByValueComponent.Dispose()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void remove_Disposed(HeatDotNet.MethodInterceptInfo methodIntercept, System.EventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod448), "LIBRARY", "System.ComponentModel.MarshalByValueComponent.remove_Disposed(EventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void add_Disposed(HeatDotNet.MethodInterceptInfo methodIntercept, System.EventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod449), "LIBRARY", "System.ComponentModel.MarshalByValueComponent.add_Disposed(EventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_Site(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ISite value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod450), "LIBRARY", "System.ComponentModel.MarshalByValueComponent.set_Site(ISite)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.ComponentModel.ISite get_Site(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod451), "LIBRARY", "System.ComponentModel.MarshalByValueComponent.get_Site()", paramObjs, typeof(System.ComponentModel.ISite), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.ISite)retValue;
		}

		public static System.Boolean get_DesignMode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod452), "LIBRARY", "System.ComponentModel.MarshalByValueComponent.get_DesignMode()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.ComponentModel.IContainer get_Container(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod453), "LIBRARY", "System.ComponentModel.MarshalByValueComponent.get_Container()", paramObjs, typeof(System.ComponentModel.IContainer), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.IContainer)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod454), "LIBRARY", "System.ComponentModel.MarshalByValueComponent.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod455), "LIBRARY", "System.ComponentModel.MarshalByValueComponent.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.AttributeCollection")]
	public class HandlerClass65
	{
		// System.ComponentModel.AttributeCollection.CopyTo
		private static bool CallerMethod456(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AttributeCollection.get_Item
		private static bool CallerMethod457(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AttributeCollection.get_Item
		private static bool CallerMethod458(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AttributeCollection.get_Count
		private static bool CallerMethod459(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AttributeCollection.Contains
		private static bool CallerMethod460(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AttributeCollection.Contains
		private static bool CallerMethod461(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AttributeCollection.GetEnumerator
		private static bool CallerMethod462(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AttributeCollection.Matches
		private static bool CallerMethod463(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AttributeCollection.Matches
		private static bool CallerMethod464(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.AttributeCollection..ctor
		private static bool CallerMethod465(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void CopyTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Array array, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod456), "LIBRARY", "System.ComponentModel.AttributeCollection.CopyTo(Array, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Attribute get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type attributeType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod457), "LIBRARY", "System.ComponentModel.AttributeCollection.get_Item(Type)", paramObjs, typeof(System.Attribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Attribute)retValue;
		}

		public static System.Attribute get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod458), "LIBRARY", "System.ComponentModel.AttributeCollection.get_Item(Int32)", paramObjs, typeof(System.Attribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Attribute)retValue;
		}

		public static System.Int32 get_Count(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod459), "LIBRARY", "System.ComponentModel.AttributeCollection.get_Count()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Contains(HeatDotNet.MethodInterceptInfo methodIntercept, System.Attribute attribute)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attribute;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod460), "LIBRARY", "System.ComponentModel.AttributeCollection.Contains(Attribute)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean Contains(HeatDotNet.MethodInterceptInfo methodIntercept, System.Attribute[] attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributes;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod461), "LIBRARY", "System.ComponentModel.AttributeCollection.Contains(Attribute[])", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Collections.IEnumerator GetEnumerator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod462), "LIBRARY", "System.ComponentModel.AttributeCollection.GetEnumerator()", paramObjs, typeof(System.Collections.IEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IEnumerator)retValue;
		}

		public static System.Boolean Matches(HeatDotNet.MethodInterceptInfo methodIntercept, System.Attribute attribute)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attribute;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod463), "LIBRARY", "System.ComponentModel.AttributeCollection.Matches(Attribute)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean Matches(HeatDotNet.MethodInterceptInfo methodIntercept, System.Attribute[] attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributes;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod464), "LIBRARY", "System.ComponentModel.AttributeCollection.Matches(Attribute[])", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Attribute[] attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = attributes;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod465), "LIBRARY", "System.ComponentModel.AttributeCollection.ctor(Attribute[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.MergablePropertyAttribute")]
	public class HandlerClass66
	{
		// System.ComponentModel.MergablePropertyAttribute.IsDefaultAttribute
		private static bool CallerMethod466(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.MergablePropertyAttribute.GetHashCode
		private static bool CallerMethod467(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.MergablePropertyAttribute.Equals
		private static bool CallerMethod468(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.MergablePropertyAttribute.get_AllowMerge
		private static bool CallerMethod469(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.MergablePropertyAttribute..ctor
		private static bool CallerMethod470(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefaultAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod466), "LIBRARY", "System.ComponentModel.MergablePropertyAttribute.IsDefaultAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod467), "LIBRARY", "System.ComponentModel.MergablePropertyAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod468), "LIBRARY", "System.ComponentModel.MergablePropertyAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_AllowMerge(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod469), "LIBRARY", "System.ComponentModel.MergablePropertyAttribute.get_AllowMerge()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Boolean allowMerge)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = allowMerge;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod470), "LIBRARY", "System.ComponentModel.MergablePropertyAttribute.ctor(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.PropertyChangedEventArgs")]
	public class HandlerClass67
	{
		// System.ComponentModel.PropertyChangedEventArgs.get_PropertyName
		private static bool CallerMethod471(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyChangedEventArgs..ctor
		private static bool CallerMethod472(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_PropertyName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod471), "LIBRARY", "System.ComponentModel.PropertyChangedEventArgs.get_PropertyName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String propertyName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = propertyName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod472), "LIBRARY", "System.ComponentModel.PropertyChangedEventArgs.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.PropertyDescriptorCollection")]
	public class HandlerClass68
	{
		// System.ComponentModel.PropertyDescriptorCollection.GetEnumerator
		private static bool CallerMethod473(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptorCollection.CopyTo
		private static bool CallerMethod474(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptorCollection.Find
		private static bool CallerMethod475(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptorCollection.Sort
		private static bool CallerMethod476(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptorCollection.Sort
		private static bool CallerMethod477(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptorCollection.Sort
		private static bool CallerMethod478(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptorCollection.Sort
		private static bool CallerMethod479(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptorCollection.get_Item
		private static bool CallerMethod480(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptorCollection.get_Item
		private static bool CallerMethod481(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptorCollection.get_Count
		private static bool CallerMethod482(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptorCollection.Add
		private static bool CallerMethod483(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptorCollection.Clear
		private static bool CallerMethod484(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptorCollection.Contains
		private static bool CallerMethod485(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptorCollection.IndexOf
		private static bool CallerMethod486(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptorCollection.Insert
		private static bool CallerMethod487(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptorCollection.Remove
		private static bool CallerMethod488(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptorCollection.RemoveAt
		private static bool CallerMethod489(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyDescriptorCollection..ctor
		private static bool CallerMethod490(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Collections.IEnumerator GetEnumerator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod473), "LIBRARY", "System.ComponentModel.PropertyDescriptorCollection.GetEnumerator()", paramObjs, typeof(System.Collections.IEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IEnumerator)retValue;
		}

		public static void CopyTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Array array, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod474), "LIBRARY", "System.ComponentModel.PropertyDescriptorCollection.CopyTo(Array, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.ComponentModel.PropertyDescriptor Find(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Boolean ignoreCase)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = ignoreCase;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod475), "LIBRARY", "System.ComponentModel.PropertyDescriptorCollection.Find(String, Boolean)", paramObjs, typeof(System.ComponentModel.PropertyDescriptor), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptor)retValue;
		}

		public static System.ComponentModel.PropertyDescriptorCollection Sort(HeatDotNet.MethodInterceptInfo methodIntercept, System.Collections.IComparer comparer)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = comparer;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod476), "LIBRARY", "System.ComponentModel.PropertyDescriptorCollection.Sort(IComparer)", paramObjs, typeof(System.ComponentModel.PropertyDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptorCollection)retValue;
		}

		public static System.ComponentModel.PropertyDescriptorCollection Sort(HeatDotNet.MethodInterceptInfo methodIntercept, System.String[] names, System.Collections.IComparer comparer)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = names;
			paramObjs[2] = comparer;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod477), "LIBRARY", "System.ComponentModel.PropertyDescriptorCollection.Sort(String[], IComparer)", paramObjs, typeof(System.ComponentModel.PropertyDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptorCollection)retValue;
		}

		public static System.ComponentModel.PropertyDescriptorCollection Sort(HeatDotNet.MethodInterceptInfo methodIntercept, System.String[] names)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = names;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod478), "LIBRARY", "System.ComponentModel.PropertyDescriptorCollection.Sort(String[])", paramObjs, typeof(System.ComponentModel.PropertyDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptorCollection)retValue;
		}

		public static System.ComponentModel.PropertyDescriptorCollection Sort(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod479), "LIBRARY", "System.ComponentModel.PropertyDescriptorCollection.Sort()", paramObjs, typeof(System.ComponentModel.PropertyDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptorCollection)retValue;
		}

		public static System.ComponentModel.PropertyDescriptor get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod480), "LIBRARY", "System.ComponentModel.PropertyDescriptorCollection.get_Item(String)", paramObjs, typeof(System.ComponentModel.PropertyDescriptor), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptor)retValue;
		}

		public static System.ComponentModel.PropertyDescriptor get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod481), "LIBRARY", "System.ComponentModel.PropertyDescriptorCollection.get_Item(Int32)", paramObjs, typeof(System.ComponentModel.PropertyDescriptor), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptor)retValue;
		}

		public static System.Int32 get_Count(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod482), "LIBRARY", "System.ComponentModel.PropertyDescriptorCollection.get_Count()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Add(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.PropertyDescriptor value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod483), "LIBRARY", "System.ComponentModel.PropertyDescriptorCollection.Add(PropertyDescriptor)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Clear(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod484), "LIBRARY", "System.ComponentModel.PropertyDescriptorCollection.Clear()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean Contains(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.PropertyDescriptor value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod485), "LIBRARY", "System.ComponentModel.PropertyDescriptorCollection.Contains(PropertyDescriptor)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.PropertyDescriptor value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod486), "LIBRARY", "System.ComponentModel.PropertyDescriptorCollection.IndexOf(PropertyDescriptor)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Insert(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index, System.ComponentModel.PropertyDescriptor value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod487), "LIBRARY", "System.ComponentModel.PropertyDescriptorCollection.Insert(Int32, PropertyDescriptor)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Remove(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.PropertyDescriptor value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod488), "LIBRARY", "System.ComponentModel.PropertyDescriptorCollection.Remove(PropertyDescriptor)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void RemoveAt(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod489), "LIBRARY", "System.ComponentModel.PropertyDescriptorCollection.RemoveAt(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.ComponentModel.PropertyDescriptor[] properties)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = properties;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod490), "LIBRARY", "System.ComponentModel.PropertyDescriptorCollection.ctor(PropertyDescriptor[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.ProvidePropertyAttribute")]
	public class HandlerClass69
	{
		// System.ComponentModel.ProvidePropertyAttribute.get_TypeId
		private static bool CallerMethod491(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ProvidePropertyAttribute.GetHashCode
		private static bool CallerMethod492(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ProvidePropertyAttribute.Equals
		private static bool CallerMethod493(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ProvidePropertyAttribute.get_PropertyName
		private static bool CallerMethod494(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ProvidePropertyAttribute.get_ReceiverTypeName
		private static bool CallerMethod495(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ProvidePropertyAttribute..ctor
		private static bool CallerMethod496(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ProvidePropertyAttribute..ctor
		private static bool CallerMethod497(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object get_TypeId(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod491), "LIBRARY", "System.ComponentModel.ProvidePropertyAttribute.get_TypeId()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod492), "LIBRARY", "System.ComponentModel.ProvidePropertyAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod493), "LIBRARY", "System.ComponentModel.ProvidePropertyAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_PropertyName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod494), "LIBRARY", "System.ComponentModel.ProvidePropertyAttribute.get_PropertyName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_ReceiverTypeName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod495), "LIBRARY", "System.ComponentModel.ProvidePropertyAttribute.get_ReceiverTypeName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String propertyName, System.Type receiverType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = propertyName;
			paramObjs[2] = receiverType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod496), "LIBRARY", "System.ComponentModel.ProvidePropertyAttribute.ctor(String, Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String propertyName, System.String receiverTypeName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = propertyName;
			paramObjs[2] = receiverTypeName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod497), "LIBRARY", "System.ComponentModel.ProvidePropertyAttribute.ctor(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.ReadOnlyAttribute")]
	public class HandlerClass70
	{
		// System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute
		private static bool CallerMethod498(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ReadOnlyAttribute.GetHashCode
		private static bool CallerMethod499(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ReadOnlyAttribute.Equals
		private static bool CallerMethod500(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ReadOnlyAttribute.get_IsReadOnly
		private static bool CallerMethod501(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ReadOnlyAttribute..ctor
		private static bool CallerMethod502(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefaultAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod498), "LIBRARY", "System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod499), "LIBRARY", "System.ComponentModel.ReadOnlyAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod500), "LIBRARY", "System.ComponentModel.ReadOnlyAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsReadOnly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod501), "LIBRARY", "System.ComponentModel.ReadOnlyAttribute.get_IsReadOnly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Boolean isReadOnly)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = isReadOnly;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod502), "LIBRARY", "System.ComponentModel.ReadOnlyAttribute.ctor(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.RecommendedAsConfigurableAttribute")]
	public class HandlerClass71
	{
		// System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute
		private static bool CallerMethod503(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode
		private static bool CallerMethod504(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.RecommendedAsConfigurableAttribute.Equals
		private static bool CallerMethod505(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.RecommendedAsConfigurableAttribute.get_RecommendedAsConfigurable
		private static bool CallerMethod506(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.RecommendedAsConfigurableAttribute..ctor
		private static bool CallerMethod507(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefaultAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod503), "LIBRARY", "System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod504), "LIBRARY", "System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod505), "LIBRARY", "System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_RecommendedAsConfigurable(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod506), "LIBRARY", "System.ComponentModel.RecommendedAsConfigurableAttribute.get_RecommendedAsConfigurable()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Boolean recommendedAsConfigurable)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = recommendedAsConfigurable;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod507), "LIBRARY", "System.ComponentModel.RecommendedAsConfigurableAttribute.ctor(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.RefreshEventArgs")]
	public class HandlerClass72
	{
		// System.ComponentModel.RefreshEventArgs.get_ComponentChanged
		private static bool CallerMethod508(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.RefreshEventArgs.get_TypeChanged
		private static bool CallerMethod509(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.RefreshEventArgs..ctor
		private static bool CallerMethod510(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.RefreshEventArgs..ctor
		private static bool CallerMethod511(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object get_ComponentChanged(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod508), "LIBRARY", "System.ComponentModel.RefreshEventArgs.get_ComponentChanged()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Type get_TypeChanged(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod509), "LIBRARY", "System.ComponentModel.RefreshEventArgs.get_TypeChanged()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Object componentChanged)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = componentChanged;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod510), "LIBRARY", "System.ComponentModel.RefreshEventArgs.ctor(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Type typeChanged)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = typeChanged;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod511), "LIBRARY", "System.ComponentModel.RefreshEventArgs.ctor(Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.RunInstallerAttribute")]
	public class HandlerClass73
	{
		// System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute
		private static bool CallerMethod512(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.RunInstallerAttribute.GetHashCode
		private static bool CallerMethod513(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.RunInstallerAttribute.Equals
		private static bool CallerMethod514(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.RunInstallerAttribute.get_RunInstaller
		private static bool CallerMethod515(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.RunInstallerAttribute..ctor
		private static bool CallerMethod516(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefaultAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod512), "LIBRARY", "System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod513), "LIBRARY", "System.ComponentModel.RunInstallerAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod514), "LIBRARY", "System.ComponentModel.RunInstallerAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_RunInstaller(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod515), "LIBRARY", "System.ComponentModel.RunInstallerAttribute.get_RunInstaller()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Boolean runInstaller)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = runInstaller;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod516), "LIBRARY", "System.ComponentModel.RunInstallerAttribute.ctor(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.SByteConverter")]
	public class HandlerClass74
	{
		// System.ComponentModel.SByteConverter..ctor
		private static bool CallerMethod517(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod517), "LIBRARY", "System.ComponentModel.SByteConverter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.SingleConverter")]
	public class HandlerClass75
	{
		// System.ComponentModel.SingleConverter..ctor
		private static bool CallerMethod518(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod518), "LIBRARY", "System.ComponentModel.SingleConverter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.StringConverter")]
	public class HandlerClass76
	{
		// System.ComponentModel.StringConverter.ConvertFrom
		private static bool CallerMethod519(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.StringConverter.CanConvertFrom
		private static bool CallerMethod520(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.StringConverter..ctor
		private static bool CallerMethod521(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object ConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod519), "LIBRARY", "System.ComponentModel.StringConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Boolean CanConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = sourceType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod520), "LIBRARY", "System.ComponentModel.StringConverter.CanConvertFrom(ITypeDescriptorContext, Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod521), "LIBRARY", "System.ComponentModel.StringConverter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.SyntaxCheck")]
	public class HandlerClass77
	{
		// System.ComponentModel.SyntaxCheck.CheckMachineName
		private static bool CallerMethod522(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.SyntaxCheck.CheckPath
		private static bool CallerMethod523(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.SyntaxCheck.CheckRootedPath
		private static bool CallerMethod524(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean CheckMachineName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod522), "LIBRARY", "System.ComponentModel.SyntaxCheck.CheckMachineName(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean CheckPath(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod523), "LIBRARY", "System.ComponentModel.SyntaxCheck.CheckPath(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean CheckRootedPath(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod524), "LIBRARY", "System.ComponentModel.SyntaxCheck.CheckRootedPath(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.TimeSpanConverter")]
	public class HandlerClass78
	{
		// System.ComponentModel.TimeSpanConverter.ConvertTo
		private static bool CallerMethod525(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TimeSpanConverter.ConvertFrom
		private static bool CallerMethod526(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TimeSpanConverter.CanConvertTo
		private static bool CallerMethod527(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TimeSpanConverter.CanConvertFrom
		private static bool CallerMethod528(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TimeSpanConverter..ctor
		private static bool CallerMethod529(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object ConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			paramObjs[4] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod525), "LIBRARY", "System.ComponentModel.TimeSpanConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object ConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod526), "LIBRARY", "System.ComponentModel.TimeSpanConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Boolean CanConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod527), "LIBRARY", "System.ComponentModel.TimeSpanConverter.CanConvertTo(ITypeDescriptorContext, Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean CanConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = sourceType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod528), "LIBRARY", "System.ComponentModel.TimeSpanConverter.CanConvertFrom(ITypeDescriptorContext, Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod529), "LIBRARY", "System.ComponentModel.TimeSpanConverter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.ToolboxItemFilterAttribute")]
	public class HandlerClass79
	{
		// System.ComponentModel.ToolboxItemFilterAttribute.Match
		private static bool CallerMethod530(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ToolboxItemFilterAttribute.get_TypeId
		private static bool CallerMethod531(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode
		private static bool CallerMethod532(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ToolboxItemFilterAttribute.Equals
		private static bool CallerMethod533(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ToolboxItemFilterAttribute.get_FilterString
		private static bool CallerMethod534(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ToolboxItemFilterAttribute.get_FilterType
		private static bool CallerMethod535(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ToolboxItemFilterAttribute..ctor
		private static bool CallerMethod536(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ToolboxItemFilterAttribute..ctor
		private static bool CallerMethod537(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean Match(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod530), "LIBRARY", "System.ComponentModel.ToolboxItemFilterAttribute.Match(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Object get_TypeId(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod531), "LIBRARY", "System.ComponentModel.ToolboxItemFilterAttribute.get_TypeId()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod532), "LIBRARY", "System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod533), "LIBRARY", "System.ComponentModel.ToolboxItemFilterAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_FilterString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod534), "LIBRARY", "System.ComponentModel.ToolboxItemFilterAttribute.get_FilterString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.ComponentModel.ToolboxItemFilterType get_FilterType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod535), "LIBRARY", "System.ComponentModel.ToolboxItemFilterAttribute.get_FilterType()", paramObjs, typeof(System.ComponentModel.ToolboxItemFilterType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.ToolboxItemFilterType)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String filterString)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = filterString;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod536), "LIBRARY", "System.ComponentModel.ToolboxItemFilterAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String filterString, System.ComponentModel.ToolboxItemFilterType filterType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = filterString;
			paramObjs[2] = filterType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod537), "LIBRARY", "System.ComponentModel.ToolboxItemFilterAttribute.ctor(String, ToolboxItemFilterType)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.TypeConverterAttribute")]
	public class HandlerClass80
	{
		// System.ComponentModel.TypeConverterAttribute.GetHashCode
		private static bool CallerMethod538(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverterAttribute.Equals
		private static bool CallerMethod539(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverterAttribute.get_ConverterTypeName
		private static bool CallerMethod540(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverterAttribute..ctor
		private static bool CallerMethod541(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverterAttribute..ctor
		private static bool CallerMethod542(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeConverterAttribute..ctor
		private static bool CallerMethod543(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod538), "LIBRARY", "System.ComponentModel.TypeConverterAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod539), "LIBRARY", "System.ComponentModel.TypeConverterAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_ConverterTypeName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod540), "LIBRARY", "System.ComponentModel.TypeConverterAttribute.get_ConverterTypeName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod541), "LIBRARY", "System.ComponentModel.TypeConverterAttribute.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Type type)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = type;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod542), "LIBRARY", "System.ComponentModel.TypeConverterAttribute.ctor(Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String typeName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = typeName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod543), "LIBRARY", "System.ComponentModel.TypeConverterAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.TypeDescriptor")]
	public class HandlerClass81
	{
		// System.ComponentModel.TypeDescriptor.get_ComNativeDescriptorHandler
		private static bool CallerMethod544(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.set_ComNativeDescriptorHandler
		private static bool CallerMethod545(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.add_Refreshed
		private static bool CallerMethod546(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.remove_Refreshed
		private static bool CallerMethod547(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.AddEditorTable
		private static bool CallerMethod548(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.CreateDesigner
		private static bool CallerMethod549(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.CreateEvent
		private static bool CallerMethod550(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.CreateEvent
		private static bool CallerMethod551(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.CreateProperty
		private static bool CallerMethod552(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.CreateProperty
		private static bool CallerMethod553(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetAttributes
		private static bool CallerMethod554(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetAttributes
		private static bool CallerMethod555(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetAttributes
		private static bool CallerMethod556(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetClassName
		private static bool CallerMethod557(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetClassName
		private static bool CallerMethod558(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetComponentName
		private static bool CallerMethod559(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetComponentName
		private static bool CallerMethod560(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetConverter
		private static bool CallerMethod561(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetConverter
		private static bool CallerMethod562(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetConverter
		private static bool CallerMethod563(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetDefaultEvent
		private static bool CallerMethod564(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetDefaultEvent
		private static bool CallerMethod565(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetDefaultEvent
		private static bool CallerMethod566(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetDefaultProperty
		private static bool CallerMethod567(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetDefaultProperty
		private static bool CallerMethod568(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetDefaultProperty
		private static bool CallerMethod569(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetEditor
		private static bool CallerMethod570(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetEditor
		private static bool CallerMethod571(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetEditor
		private static bool CallerMethod572(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetEvents
		private static bool CallerMethod573(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetEvents
		private static bool CallerMethod574(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetEvents
		private static bool CallerMethod575(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetEvents
		private static bool CallerMethod576(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetEvents
		private static bool CallerMethod577(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetEvents
		private static bool CallerMethod578(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetProperties
		private static bool CallerMethod579(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetProperties
		private static bool CallerMethod580(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetProperties
		private static bool CallerMethod581(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetProperties
		private static bool CallerMethod582(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetProperties
		private static bool CallerMethod583(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.GetProperties
		private static bool CallerMethod584(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.Refresh
		private static bool CallerMethod585(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.Refresh
		private static bool CallerMethod586(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.Refresh
		private static bool CallerMethod587(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.Refresh
		private static bool CallerMethod588(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeDescriptor.SortDescriptorArray
		private static bool CallerMethod589(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.ComponentModel.IComNativeDescriptorHandler get_ComNativeDescriptorHandler(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod544), "LIBRARY", "System.ComponentModel.TypeDescriptor.get_ComNativeDescriptorHandler()", paramObjs, typeof(System.ComponentModel.IComNativeDescriptorHandler), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.IComNativeDescriptorHandler)retValue;
		}

		public static void set_ComNativeDescriptorHandler(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.IComNativeDescriptorHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod545), "LIBRARY", "System.ComponentModel.TypeDescriptor.set_ComNativeDescriptorHandler(IComNativeDescriptorHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void add_Refreshed(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.RefreshEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod546), "LIBRARY", "System.ComponentModel.TypeDescriptor.add_Refreshed(RefreshEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void remove_Refreshed(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.RefreshEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod547), "LIBRARY", "System.ComponentModel.TypeDescriptor.remove_Refreshed(RefreshEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddEditorTable(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type editorBaseType, System.Collections.Hashtable table)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = editorBaseType;
			paramObjs[2] = table;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod548), "LIBRARY", "System.ComponentModel.TypeDescriptor.AddEditorTable(Type, Hashtable)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.ComponentModel.Design.IDesigner CreateDesigner(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.IComponent component, System.Type designerBaseType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			paramObjs[2] = designerBaseType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod549), "LIBRARY", "System.ComponentModel.TypeDescriptor.CreateDesigner(IComponent, Type)", paramObjs, typeof(System.ComponentModel.Design.IDesigner), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.Design.IDesigner)retValue;
		}

		public static System.ComponentModel.EventDescriptor CreateEvent(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type componentType, System.String name, System.Type type, System.Attribute[] attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = componentType;
			paramObjs[2] = name;
			paramObjs[3] = type;
			paramObjs[4] = attributes;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod550), "LIBRARY", "System.ComponentModel.TypeDescriptor.CreateEvent(Type, String, Type, Attribute[])", paramObjs, typeof(System.ComponentModel.EventDescriptor), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.EventDescriptor)retValue;
		}

		public static System.ComponentModel.EventDescriptor CreateEvent(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type componentType, System.ComponentModel.EventDescriptor oldEventDescriptor, System.Attribute[] attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = componentType;
			paramObjs[2] = oldEventDescriptor;
			paramObjs[3] = attributes;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod551), "LIBRARY", "System.ComponentModel.TypeDescriptor.CreateEvent(Type, EventDescriptor, Attribute[])", paramObjs, typeof(System.ComponentModel.EventDescriptor), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.EventDescriptor)retValue;
		}

		public static System.ComponentModel.PropertyDescriptor CreateProperty(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type componentType, System.String name, System.Type type, System.Attribute[] attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = componentType;
			paramObjs[2] = name;
			paramObjs[3] = type;
			paramObjs[4] = attributes;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod552), "LIBRARY", "System.ComponentModel.TypeDescriptor.CreateProperty(Type, String, Type, Attribute[])", paramObjs, typeof(System.ComponentModel.PropertyDescriptor), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptor)retValue;
		}

		public static System.ComponentModel.PropertyDescriptor CreateProperty(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type componentType, System.ComponentModel.PropertyDescriptor oldPropertyDescriptor, System.Attribute[] attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = componentType;
			paramObjs[2] = oldPropertyDescriptor;
			paramObjs[3] = attributes;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod553), "LIBRARY", "System.ComponentModel.TypeDescriptor.CreateProperty(Type, PropertyDescriptor, Attribute[])", paramObjs, typeof(System.ComponentModel.PropertyDescriptor), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptor)retValue;
		}

		public static System.ComponentModel.AttributeCollection GetAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type componentType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = componentType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod554), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetAttributes(Type)", paramObjs, typeof(System.ComponentModel.AttributeCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.AttributeCollection)retValue;
		}

		public static System.ComponentModel.AttributeCollection GetAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod555), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetAttributes(Object)", paramObjs, typeof(System.ComponentModel.AttributeCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.AttributeCollection)retValue;
		}

		public static System.ComponentModel.AttributeCollection GetAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component, System.Boolean noCustomTypeDesc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			paramObjs[2] = noCustomTypeDesc;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod556), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetAttributes(Object, Boolean)", paramObjs, typeof(System.ComponentModel.AttributeCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.AttributeCollection)retValue;
		}

		public static System.String GetClassName(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod557), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetClassName(Object)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetClassName(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component, System.Boolean noCustomTypeDesc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			paramObjs[2] = noCustomTypeDesc;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod558), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetClassName(Object, Boolean)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetComponentName(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod559), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetComponentName(Object)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetComponentName(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component, System.Boolean noCustomTypeDesc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			paramObjs[2] = noCustomTypeDesc;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod560), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetComponentName(Object, Boolean)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.ComponentModel.TypeConverter GetConverter(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod561), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetConverter(Object)", paramObjs, typeof(System.ComponentModel.TypeConverter), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.TypeConverter)retValue;
		}

		public static System.ComponentModel.TypeConverter GetConverter(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component, System.Boolean noCustomTypeDesc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			paramObjs[2] = noCustomTypeDesc;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod562), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetConverter(Object, Boolean)", paramObjs, typeof(System.ComponentModel.TypeConverter), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.TypeConverter)retValue;
		}

		public static System.ComponentModel.TypeConverter GetConverter(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type type)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod563), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetConverter(Type)", paramObjs, typeof(System.ComponentModel.TypeConverter), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.TypeConverter)retValue;
		}

		public static System.ComponentModel.EventDescriptor GetDefaultEvent(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type componentType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = componentType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod564), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetDefaultEvent(Type)", paramObjs, typeof(System.ComponentModel.EventDescriptor), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.EventDescriptor)retValue;
		}

		public static System.ComponentModel.EventDescriptor GetDefaultEvent(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod565), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object)", paramObjs, typeof(System.ComponentModel.EventDescriptor), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.EventDescriptor)retValue;
		}

		public static System.ComponentModel.EventDescriptor GetDefaultEvent(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component, System.Boolean noCustomTypeDesc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			paramObjs[2] = noCustomTypeDesc;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod566), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object, Boolean)", paramObjs, typeof(System.ComponentModel.EventDescriptor), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.EventDescriptor)retValue;
		}

		public static System.ComponentModel.PropertyDescriptor GetDefaultProperty(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type componentType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = componentType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod567), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetDefaultProperty(Type)", paramObjs, typeof(System.ComponentModel.PropertyDescriptor), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptor)retValue;
		}

		public static System.ComponentModel.PropertyDescriptor GetDefaultProperty(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod568), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object)", paramObjs, typeof(System.ComponentModel.PropertyDescriptor), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptor)retValue;
		}

		public static System.ComponentModel.PropertyDescriptor GetDefaultProperty(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component, System.Boolean noCustomTypeDesc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			paramObjs[2] = noCustomTypeDesc;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod569), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object, Boolean)", paramObjs, typeof(System.ComponentModel.PropertyDescriptor), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptor)retValue;
		}

		public static System.Object GetEditor(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component, System.Type editorBaseType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			paramObjs[2] = editorBaseType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod570), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetEditor(Object, Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object GetEditor(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component, System.Type editorBaseType, System.Boolean noCustomTypeDesc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			paramObjs[2] = editorBaseType;
			paramObjs[3] = noCustomTypeDesc;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod571), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetEditor(Object, Type, Boolean)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object GetEditor(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type type, System.Type editorBaseType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			paramObjs[2] = editorBaseType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod572), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetEditor(Type, Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.ComponentModel.EventDescriptorCollection GetEvents(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type componentType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = componentType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod573), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetEvents(Type)", paramObjs, typeof(System.ComponentModel.EventDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.EventDescriptorCollection)retValue;
		}

		public static System.ComponentModel.EventDescriptorCollection GetEvents(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod574), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetEvents(Object)", paramObjs, typeof(System.ComponentModel.EventDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.EventDescriptorCollection)retValue;
		}

		public static System.ComponentModel.EventDescriptorCollection GetEvents(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component, System.Boolean noCustomTypeDesc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			paramObjs[2] = noCustomTypeDesc;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod575), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetEvents(Object, Boolean)", paramObjs, typeof(System.ComponentModel.EventDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.EventDescriptorCollection)retValue;
		}

		public static System.ComponentModel.EventDescriptorCollection GetEvents(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type componentType, System.Attribute[] attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = componentType;
			paramObjs[2] = attributes;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod576), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetEvents(Type, Attribute[])", paramObjs, typeof(System.ComponentModel.EventDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.EventDescriptorCollection)retValue;
		}

		public static System.ComponentModel.EventDescriptorCollection GetEvents(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component, System.Attribute[] attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			paramObjs[2] = attributes;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod577), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetEvents(Object, Attribute[])", paramObjs, typeof(System.ComponentModel.EventDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.EventDescriptorCollection)retValue;
		}

		public static System.ComponentModel.EventDescriptorCollection GetEvents(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component, System.Attribute[] attributes, System.Boolean noCustomTypeDesc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			paramObjs[2] = attributes;
			paramObjs[3] = noCustomTypeDesc;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod578), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetEvents(Object, Attribute[], Boolean)", paramObjs, typeof(System.ComponentModel.EventDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.EventDescriptorCollection)retValue;
		}

		public static System.ComponentModel.PropertyDescriptorCollection GetProperties(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type componentType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = componentType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod579), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetProperties(Type)", paramObjs, typeof(System.ComponentModel.PropertyDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptorCollection)retValue;
		}

		public static System.ComponentModel.PropertyDescriptorCollection GetProperties(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod580), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetProperties(Object)", paramObjs, typeof(System.ComponentModel.PropertyDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptorCollection)retValue;
		}

		public static System.ComponentModel.PropertyDescriptorCollection GetProperties(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component, System.Boolean noCustomTypeDesc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			paramObjs[2] = noCustomTypeDesc;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod581), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetProperties(Object, Boolean)", paramObjs, typeof(System.ComponentModel.PropertyDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptorCollection)retValue;
		}

		public static System.ComponentModel.PropertyDescriptorCollection GetProperties(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type componentType, System.Attribute[] attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = componentType;
			paramObjs[2] = attributes;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod582), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetProperties(Type, Attribute[])", paramObjs, typeof(System.ComponentModel.PropertyDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptorCollection)retValue;
		}

		public static System.ComponentModel.PropertyDescriptorCollection GetProperties(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component, System.Attribute[] attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			paramObjs[2] = attributes;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod583), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetProperties(Object, Attribute[])", paramObjs, typeof(System.ComponentModel.PropertyDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptorCollection)retValue;
		}

		public static System.ComponentModel.PropertyDescriptorCollection GetProperties(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component, System.Attribute[] attributes, System.Boolean noCustomTypeDesc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			paramObjs[2] = attributes;
			paramObjs[3] = noCustomTypeDesc;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod584), "LIBRARY", "System.ComponentModel.TypeDescriptor.GetProperties(Object, Attribute[], Boolean)", paramObjs, typeof(System.ComponentModel.PropertyDescriptorCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyDescriptorCollection)retValue;
		}

		public static void Refresh(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object component)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = component;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod585), "LIBRARY", "System.ComponentModel.TypeDescriptor.Refresh(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Refresh(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type type)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod586), "LIBRARY", "System.ComponentModel.TypeDescriptor.Refresh(Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Refresh(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Module module)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = module;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod587), "LIBRARY", "System.ComponentModel.TypeDescriptor.Refresh(Module)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Refresh(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Assembly assembly)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = assembly;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod588), "LIBRARY", "System.ComponentModel.TypeDescriptor.Refresh(Assembly)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SortDescriptorArray(HeatDotNet.MethodInterceptInfo methodIntercept, System.Collections.IList infos)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = infos;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod589), "LIBRARY", "System.ComponentModel.TypeDescriptor.SortDescriptorArray(IList)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.TypeListConverter")]
	public class HandlerClass82
	{
		// System.ComponentModel.TypeListConverter.GetStandardValuesSupported
		private static bool CallerMethod590(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeListConverter.GetStandardValuesExclusive
		private static bool CallerMethod591(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeListConverter.GetStandardValues
		private static bool CallerMethod592(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeListConverter.ConvertTo
		private static bool CallerMethod593(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeListConverter.ConvertFrom
		private static bool CallerMethod594(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeListConverter.CanConvertTo
		private static bool CallerMethod595(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.TypeListConverter.CanConvertFrom
		private static bool CallerMethod596(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean GetStandardValuesSupported(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod590), "LIBRARY", "System.ComponentModel.TypeListConverter.GetStandardValuesSupported(ITypeDescriptorContext)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean GetStandardValuesExclusive(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod591), "LIBRARY", "System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(ITypeDescriptorContext)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod592), "LIBRARY", "System.ComponentModel.TypeListConverter.GetStandardValues(ITypeDescriptorContext)", paramObjs, typeof(System.ComponentModel.TypeConverter.StandardValuesCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.TypeConverter.StandardValuesCollection)retValue;
		}

		public static System.Object ConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			paramObjs[4] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod593), "LIBRARY", "System.ComponentModel.TypeListConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object ConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = culture;
			paramObjs[3] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod594), "LIBRARY", "System.ComponentModel.TypeListConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Boolean CanConvertTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = destinationType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod595), "LIBRARY", "System.ComponentModel.TypeListConverter.CanConvertTo(ITypeDescriptorContext, Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean CanConvertFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			paramObjs[2] = sourceType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod596), "LIBRARY", "System.ComponentModel.TypeListConverter.CanConvertFrom(ITypeDescriptorContext, Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.UInt16Converter")]
	public class HandlerClass83
	{
		// System.ComponentModel.UInt16Converter..ctor
		private static bool CallerMethod597(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod597), "LIBRARY", "System.ComponentModel.UInt16Converter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.UInt32Converter")]
	public class HandlerClass84
	{
		// System.ComponentModel.UInt32Converter..ctor
		private static bool CallerMethod598(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod598), "LIBRARY", "System.ComponentModel.UInt32Converter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.UInt64Converter")]
	public class HandlerClass85
	{
		// System.ComponentModel.UInt64Converter..ctor
		private static bool CallerMethod599(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod599), "LIBRARY", "System.ComponentModel.UInt64Converter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.Switch")]
	public class HandlerClass86
	{
		// System.Diagnostics.Switch.get_DisplayName
		private static bool CallerMethod600(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Switch.get_Description
		private static bool CallerMethod601(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_DisplayName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod600), "PROCESS", "System.Diagnostics.Switch.get_DisplayName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Description(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod601), "PROCESS", "System.Diagnostics.Switch.get_Description()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.BooleanSwitch")]
	public class HandlerClass87
	{
		// System.Diagnostics.BooleanSwitch.get_Enabled
		private static bool CallerMethod602(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.BooleanSwitch.set_Enabled
		private static bool CallerMethod603(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.BooleanSwitch..ctor
		private static bool CallerMethod604(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean get_Enabled(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod602), "PROCESS", "System.Diagnostics.BooleanSwitch.get_Enabled()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_Enabled(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod603), "PROCESS", "System.Diagnostics.BooleanSwitch.set_Enabled(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String displayName, System.String description)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = displayName;
			paramObjs[2] = description;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod604), "PROCESS", "System.Diagnostics.BooleanSwitch.ctor(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.Debug")]
	public class HandlerClass88
	{
		// System.Diagnostics.Debug.get_Listeners
		private static bool CallerMethod605(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.get_AutoFlush
		private static bool CallerMethod606(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.set_AutoFlush
		private static bool CallerMethod607(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.get_IndentLevel
		private static bool CallerMethod608(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.set_IndentLevel
		private static bool CallerMethod609(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.get_IndentSize
		private static bool CallerMethod610(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.set_IndentSize
		private static bool CallerMethod611(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.Flush
		private static bool CallerMethod612(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.Close
		private static bool CallerMethod613(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.Assert
		private static bool CallerMethod614(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.Assert
		private static bool CallerMethod615(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.Assert
		private static bool CallerMethod616(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.Fail
		private static bool CallerMethod617(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.Fail
		private static bool CallerMethod618(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.Write
		private static bool CallerMethod619(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.Write
		private static bool CallerMethod620(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.Write
		private static bool CallerMethod621(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.Write
		private static bool CallerMethod622(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.WriteLine
		private static bool CallerMethod623(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.WriteLine
		private static bool CallerMethod624(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.WriteLine
		private static bool CallerMethod625(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.WriteLine
		private static bool CallerMethod626(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.WriteIf
		private static bool CallerMethod627(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.WriteIf
		private static bool CallerMethod628(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.WriteIf
		private static bool CallerMethod629(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.WriteIf
		private static bool CallerMethod630(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.WriteLineIf
		private static bool CallerMethod631(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.WriteLineIf
		private static bool CallerMethod632(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.WriteLineIf
		private static bool CallerMethod633(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.WriteLineIf
		private static bool CallerMethod634(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.Indent
		private static bool CallerMethod635(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Debug.Unindent
		private static bool CallerMethod636(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Diagnostics.TraceListenerCollection get_Listeners(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod605), "PROCESS", "System.Diagnostics.Debug.get_Listeners()", paramObjs, typeof(System.Diagnostics.TraceListenerCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.TraceListenerCollection)retValue;
		}

		public static System.Boolean get_AutoFlush(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod606), "PROCESS", "System.Diagnostics.Debug.get_AutoFlush()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_AutoFlush(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod607), "PROCESS", "System.Diagnostics.Debug.set_AutoFlush(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_IndentLevel(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod608), "PROCESS", "System.Diagnostics.Debug.get_IndentLevel()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_IndentLevel(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod609), "PROCESS", "System.Diagnostics.Debug.set_IndentLevel(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_IndentSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod610), "PROCESS", "System.Diagnostics.Debug.get_IndentSize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_IndentSize(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod611), "PROCESS", "System.Diagnostics.Debug.set_IndentSize(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Flush(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod612), "PROCESS", "System.Diagnostics.Debug.Flush()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod613), "PROCESS", "System.Diagnostics.Debug.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Assert(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod614), "PROCESS", "System.Diagnostics.Debug.Assert(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Assert(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			paramObjs[2] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod615), "PROCESS", "System.Diagnostics.Debug.Assert(Boolean, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Assert(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition, System.String message, System.String detailMessage)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			paramObjs[2] = message;
			paramObjs[3] = detailMessage;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod616), "PROCESS", "System.Diagnostics.Debug.Assert(Boolean, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Fail(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod617), "PROCESS", "System.Diagnostics.Debug.Fail(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Fail(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message, System.String detailMessage)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			paramObjs[2] = detailMessage;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod618), "PROCESS", "System.Diagnostics.Debug.Fail(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod619), "PROCESS", "System.Diagnostics.Debug.Write(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod620), "PROCESS", "System.Diagnostics.Debug.Write(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			paramObjs[2] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod621), "PROCESS", "System.Diagnostics.Debug.Write(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			paramObjs[2] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod622), "PROCESS", "System.Diagnostics.Debug.Write(Object, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod623), "PROCESS", "System.Diagnostics.Debug.WriteLine(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod624), "PROCESS", "System.Diagnostics.Debug.WriteLine(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			paramObjs[2] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod625), "PROCESS", "System.Diagnostics.Debug.WriteLine(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			paramObjs[2] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod626), "PROCESS", "System.Diagnostics.Debug.WriteLine(Object, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteIf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			paramObjs[2] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod627), "PROCESS", "System.Diagnostics.Debug.WriteIf(Boolean, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteIf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod628), "PROCESS", "System.Diagnostics.Debug.WriteIf(Boolean, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteIf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition, System.String message, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			paramObjs[2] = message;
			paramObjs[3] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod629), "PROCESS", "System.Diagnostics.Debug.WriteIf(Boolean, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteIf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition, System.Object value, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			paramObjs[2] = value;
			paramObjs[3] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod630), "PROCESS", "System.Diagnostics.Debug.WriteIf(Boolean, Object, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLineIf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			paramObjs[2] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod631), "PROCESS", "System.Diagnostics.Debug.WriteLineIf(Boolean, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLineIf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod632), "PROCESS", "System.Diagnostics.Debug.WriteLineIf(Boolean, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLineIf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition, System.String message, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			paramObjs[2] = message;
			paramObjs[3] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod633), "PROCESS", "System.Diagnostics.Debug.WriteLineIf(Boolean, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLineIf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition, System.Object value, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			paramObjs[2] = value;
			paramObjs[3] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod634), "PROCESS", "System.Diagnostics.Debug.WriteLineIf(Boolean, Object, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Indent(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod635), "PROCESS", "System.Diagnostics.Debug.Indent()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Unindent(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod636), "PROCESS", "System.Diagnostics.Debug.Unindent()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.TraceListener")]
	public class HandlerClass89
	{
		// System.Diagnostics.TraceListener.Dispose
		private static bool CallerMethod637(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListener.WriteLine
		private static bool CallerMethod638(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListener.WriteLine
		private static bool CallerMethod639(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListener.WriteLine
		private static bool CallerMethod640(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListener.Write
		private static bool CallerMethod641(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListener.Write
		private static bool CallerMethod642(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListener.Write
		private static bool CallerMethod643(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListener.Fail
		private static bool CallerMethod644(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListener.Fail
		private static bool CallerMethod645(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListener.Flush
		private static bool CallerMethod646(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListener.Close
		private static bool CallerMethod647(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListener.set_Name
		private static bool CallerMethod648(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListener.get_Name
		private static bool CallerMethod649(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListener.get_IndentLevel
		private static bool CallerMethod650(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListener.set_IndentLevel
		private static bool CallerMethod651(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListener.get_IndentSize
		private static bool CallerMethod652(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListener.set_IndentSize
		private static bool CallerMethod653(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Dispose(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod637), "PROCESS", "System.Diagnostics.TraceListener.Dispose()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object o, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = o;
			paramObjs[2] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod638), "PROCESS", "System.Diagnostics.TraceListener.WriteLine(Object, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			paramObjs[2] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod639), "PROCESS", "System.Diagnostics.TraceListener.WriteLine(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object o)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = o;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod640), "PROCESS", "System.Diagnostics.TraceListener.WriteLine(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object o, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = o;
			paramObjs[2] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod641), "PROCESS", "System.Diagnostics.TraceListener.Write(Object, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			paramObjs[2] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod642), "PROCESS", "System.Diagnostics.TraceListener.Write(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object o)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = o;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod643), "PROCESS", "System.Diagnostics.TraceListener.Write(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Fail(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message, System.String detailMessage)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			paramObjs[2] = detailMessage;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod644), "PROCESS", "System.Diagnostics.TraceListener.Fail(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Fail(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod645), "PROCESS", "System.Diagnostics.TraceListener.Fail(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Flush(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod646), "PROCESS", "System.Diagnostics.TraceListener.Flush()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod647), "PROCESS", "System.Diagnostics.TraceListener.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_Name(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod648), "PROCESS", "System.Diagnostics.TraceListener.set_Name(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod649), "PROCESS", "System.Diagnostics.TraceListener.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_IndentLevel(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod650), "PROCESS", "System.Diagnostics.TraceListener.get_IndentLevel()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_IndentLevel(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod651), "PROCESS", "System.Diagnostics.TraceListener.set_IndentLevel(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_IndentSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod652), "PROCESS", "System.Diagnostics.TraceListener.get_IndentSize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_IndentSize(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod653), "PROCESS", "System.Diagnostics.TraceListener.set_IndentSize(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.DefaultTraceListener")]
	public class HandlerClass90
	{
		// System.Diagnostics.DefaultTraceListener.WriteLine
		private static bool CallerMethod654(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.DefaultTraceListener.Write
		private static bool CallerMethod655(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.DefaultTraceListener.Fail
		private static bool CallerMethod656(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.DefaultTraceListener.Fail
		private static bool CallerMethod657(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.DefaultTraceListener.get_AssertUiEnabled
		private static bool CallerMethod658(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.DefaultTraceListener.set_AssertUiEnabled
		private static bool CallerMethod659(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.DefaultTraceListener.get_LogFileName
		private static bool CallerMethod660(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.DefaultTraceListener.set_LogFileName
		private static bool CallerMethod661(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.DefaultTraceListener..ctor
		private static bool CallerMethod662(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod654), "PROCESS", "System.Diagnostics.DefaultTraceListener.WriteLine(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod655), "PROCESS", "System.Diagnostics.DefaultTraceListener.Write(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Fail(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message, System.String detailMessage)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			paramObjs[2] = detailMessage;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod656), "PROCESS", "System.Diagnostics.DefaultTraceListener.Fail(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Fail(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod657), "PROCESS", "System.Diagnostics.DefaultTraceListener.Fail(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_AssertUiEnabled(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod658), "PROCESS", "System.Diagnostics.DefaultTraceListener.get_AssertUiEnabled()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_AssertUiEnabled(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod659), "PROCESS", "System.Diagnostics.DefaultTraceListener.set_AssertUiEnabled(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_LogFileName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod660), "PROCESS", "System.Diagnostics.DefaultTraceListener.get_LogFileName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_LogFileName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod661), "PROCESS", "System.Diagnostics.DefaultTraceListener.set_LogFileName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod662), "PROCESS", "System.Diagnostics.DefaultTraceListener.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.TextWriterTraceListener")]
	public class HandlerClass91
	{
		// System.Diagnostics.TextWriterTraceListener.WriteLine
		private static bool CallerMethod663(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TextWriterTraceListener.Write
		private static bool CallerMethod664(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TextWriterTraceListener.Flush
		private static bool CallerMethod665(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TextWriterTraceListener.Close
		private static bool CallerMethod666(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TextWriterTraceListener.get_Writer
		private static bool CallerMethod667(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TextWriterTraceListener.set_Writer
		private static bool CallerMethod668(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TextWriterTraceListener..ctor
		private static bool CallerMethod669(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TextWriterTraceListener..ctor
		private static bool CallerMethod670(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TextWriterTraceListener..ctor
		private static bool CallerMethod671(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TextWriterTraceListener..ctor
		private static bool CallerMethod672(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TextWriterTraceListener..ctor
		private static bool CallerMethod673(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TextWriterTraceListener..ctor
		private static bool CallerMethod674(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TextWriterTraceListener..ctor
		private static bool CallerMethod675(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod663), "PROCESS", "System.Diagnostics.TextWriterTraceListener.WriteLine(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod664), "PROCESS", "System.Diagnostics.TextWriterTraceListener.Write(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Flush(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod665), "PROCESS", "System.Diagnostics.TextWriterTraceListener.Flush()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod666), "PROCESS", "System.Diagnostics.TextWriterTraceListener.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IO.TextWriter get_Writer(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod667), "PROCESS", "System.Diagnostics.TextWriterTraceListener.get_Writer()", paramObjs, typeof(System.IO.TextWriter), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.TextWriter)retValue;
		}

		public static void set_Writer(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.TextWriter value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod668), "PROCESS", "System.Diagnostics.TextWriterTraceListener.set_Writer(TextWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod669), "PROCESS", "System.Diagnostics.TextWriterTraceListener.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream stream)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = stream;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod670), "PROCESS", "System.Diagnostics.TextWriterTraceListener.ctor(Stream)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream stream, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = stream;
			paramObjs[2] = name;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod671), "PROCESS", "System.Diagnostics.TextWriterTraceListener.ctor(Stream, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.TextWriter writer)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = writer;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod672), "PROCESS", "System.Diagnostics.TextWriterTraceListener.ctor(TextWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.TextWriter writer, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = writer;
			paramObjs[2] = name;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod673), "PROCESS", "System.Diagnostics.TextWriterTraceListener.ctor(TextWriter, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String fileName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = fileName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod674), "PROCESS", "System.Diagnostics.TextWriterTraceListener.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String fileName, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = fileName;
			paramObjs[2] = name;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod675), "PROCESS", "System.Diagnostics.TextWriterTraceListener.ctor(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.Trace")]
	public class HandlerClass92
	{
		// System.Diagnostics.Trace.get_Listeners
		private static bool CallerMethod676(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.get_AutoFlush
		private static bool CallerMethod677(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.set_AutoFlush
		private static bool CallerMethod678(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.get_IndentLevel
		private static bool CallerMethod679(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.set_IndentLevel
		private static bool CallerMethod680(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.get_IndentSize
		private static bool CallerMethod681(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.set_IndentSize
		private static bool CallerMethod682(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.Flush
		private static bool CallerMethod683(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.Close
		private static bool CallerMethod684(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.Assert
		private static bool CallerMethod685(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.Assert
		private static bool CallerMethod686(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.Assert
		private static bool CallerMethod687(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.Fail
		private static bool CallerMethod688(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.Fail
		private static bool CallerMethod689(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.Write
		private static bool CallerMethod690(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.Write
		private static bool CallerMethod691(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.Write
		private static bool CallerMethod692(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.Write
		private static bool CallerMethod693(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.WriteLine
		private static bool CallerMethod694(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.WriteLine
		private static bool CallerMethod695(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.WriteLine
		private static bool CallerMethod696(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.WriteLine
		private static bool CallerMethod697(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.WriteIf
		private static bool CallerMethod698(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.WriteIf
		private static bool CallerMethod699(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.WriteIf
		private static bool CallerMethod700(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.WriteIf
		private static bool CallerMethod701(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.WriteLineIf
		private static bool CallerMethod702(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.WriteLineIf
		private static bool CallerMethod703(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.WriteLineIf
		private static bool CallerMethod704(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.WriteLineIf
		private static bool CallerMethod705(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.Indent
		private static bool CallerMethod706(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Trace.Unindent
		private static bool CallerMethod707(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Diagnostics.TraceListenerCollection get_Listeners(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod676), "PROCESS", "System.Diagnostics.Trace.get_Listeners()", paramObjs, typeof(System.Diagnostics.TraceListenerCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.TraceListenerCollection)retValue;
		}

		public static System.Boolean get_AutoFlush(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod677), "PROCESS", "System.Diagnostics.Trace.get_AutoFlush()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_AutoFlush(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod678), "PROCESS", "System.Diagnostics.Trace.set_AutoFlush(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_IndentLevel(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod679), "PROCESS", "System.Diagnostics.Trace.get_IndentLevel()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_IndentLevel(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod680), "PROCESS", "System.Diagnostics.Trace.set_IndentLevel(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_IndentSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod681), "PROCESS", "System.Diagnostics.Trace.get_IndentSize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_IndentSize(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod682), "PROCESS", "System.Diagnostics.Trace.set_IndentSize(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Flush(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod683), "PROCESS", "System.Diagnostics.Trace.Flush()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod684), "PROCESS", "System.Diagnostics.Trace.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Assert(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod685), "PROCESS", "System.Diagnostics.Trace.Assert(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Assert(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			paramObjs[2] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod686), "PROCESS", "System.Diagnostics.Trace.Assert(Boolean, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Assert(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition, System.String message, System.String detailMessage)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			paramObjs[2] = message;
			paramObjs[3] = detailMessage;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod687), "PROCESS", "System.Diagnostics.Trace.Assert(Boolean, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Fail(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod688), "PROCESS", "System.Diagnostics.Trace.Fail(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Fail(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message, System.String detailMessage)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			paramObjs[2] = detailMessage;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod689), "PROCESS", "System.Diagnostics.Trace.Fail(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod690), "PROCESS", "System.Diagnostics.Trace.Write(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod691), "PROCESS", "System.Diagnostics.Trace.Write(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			paramObjs[2] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod692), "PROCESS", "System.Diagnostics.Trace.Write(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			paramObjs[2] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod693), "PROCESS", "System.Diagnostics.Trace.Write(Object, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod694), "PROCESS", "System.Diagnostics.Trace.WriteLine(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod695), "PROCESS", "System.Diagnostics.Trace.WriteLine(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			paramObjs[2] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod696), "PROCESS", "System.Diagnostics.Trace.WriteLine(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			paramObjs[2] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod697), "PROCESS", "System.Diagnostics.Trace.WriteLine(Object, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteIf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			paramObjs[2] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod698), "PROCESS", "System.Diagnostics.Trace.WriteIf(Boolean, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteIf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod699), "PROCESS", "System.Diagnostics.Trace.WriteIf(Boolean, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteIf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition, System.String message, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			paramObjs[2] = message;
			paramObjs[3] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod700), "PROCESS", "System.Diagnostics.Trace.WriteIf(Boolean, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteIf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition, System.Object value, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			paramObjs[2] = value;
			paramObjs[3] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod701), "PROCESS", "System.Diagnostics.Trace.WriteIf(Boolean, Object, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLineIf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			paramObjs[2] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod702), "PROCESS", "System.Diagnostics.Trace.WriteLineIf(Boolean, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLineIf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod703), "PROCESS", "System.Diagnostics.Trace.WriteLineIf(Boolean, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLineIf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition, System.String message, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			paramObjs[2] = message;
			paramObjs[3] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod704), "PROCESS", "System.Diagnostics.Trace.WriteLineIf(Boolean, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLineIf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean condition, System.Object value, System.String category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = condition;
			paramObjs[2] = value;
			paramObjs[3] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod705), "PROCESS", "System.Diagnostics.Trace.WriteLineIf(Boolean, Object, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Indent(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod706), "PROCESS", "System.Diagnostics.Trace.Indent()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Unindent(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod707), "PROCESS", "System.Diagnostics.Trace.Unindent()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.TraceListenerCollection")]
	public class HandlerClass93
	{
		// System.Diagnostics.TraceListenerCollection.GetEnumerator
		private static bool CallerMethod708(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListenerCollection.get_Count
		private static bool CallerMethod709(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListenerCollection.RemoveAt
		private static bool CallerMethod710(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListenerCollection.Clear
		private static bool CallerMethod711(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListenerCollection.get_Item
		private static bool CallerMethod712(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListenerCollection.set_Item
		private static bool CallerMethod713(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListenerCollection.get_Item
		private static bool CallerMethod714(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListenerCollection.Add
		private static bool CallerMethod715(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListenerCollection.AddRange
		private static bool CallerMethod716(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListenerCollection.AddRange
		private static bool CallerMethod717(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListenerCollection.Contains
		private static bool CallerMethod718(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListenerCollection.CopyTo
		private static bool CallerMethod719(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListenerCollection.IndexOf
		private static bool CallerMethod720(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListenerCollection.Insert
		private static bool CallerMethod721(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListenerCollection.Remove
		private static bool CallerMethod722(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceListenerCollection.Remove
		private static bool CallerMethod723(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Collections.IEnumerator GetEnumerator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod708), "PROCESS", "System.Diagnostics.TraceListenerCollection.GetEnumerator()", paramObjs, typeof(System.Collections.IEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IEnumerator)retValue;
		}

		public static System.Int32 get_Count(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod709), "PROCESS", "System.Diagnostics.TraceListenerCollection.get_Count()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void RemoveAt(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod710), "PROCESS", "System.Diagnostics.TraceListenerCollection.RemoveAt(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Clear(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod711), "PROCESS", "System.Diagnostics.TraceListenerCollection.Clear()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Diagnostics.TraceListener get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 i)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = i;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod712), "PROCESS", "System.Diagnostics.TraceListenerCollection.get_Item(Int32)", paramObjs, typeof(System.Diagnostics.TraceListener), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.TraceListener)retValue;
		}

		public static void set_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 i, System.Diagnostics.TraceListener value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = i;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod713), "PROCESS", "System.Diagnostics.TraceListenerCollection.set_Item(Int32, TraceListener)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Diagnostics.TraceListener get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod714), "PROCESS", "System.Diagnostics.TraceListenerCollection.get_Item(String)", paramObjs, typeof(System.Diagnostics.TraceListener), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.TraceListener)retValue;
		}

		public static System.Int32 Add(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.TraceListener listener)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = listener;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod715), "PROCESS", "System.Diagnostics.TraceListenerCollection.Add(TraceListener)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void AddRange(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.TraceListener[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod716), "PROCESS", "System.Diagnostics.TraceListenerCollection.AddRange(TraceListener[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddRange(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.TraceListenerCollection value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod717), "PROCESS", "System.Diagnostics.TraceListenerCollection.AddRange(TraceListenerCollection)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean Contains(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.TraceListener listener)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = listener;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod718), "PROCESS", "System.Diagnostics.TraceListenerCollection.Contains(TraceListener)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void CopyTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.TraceListener[] listeners, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = listeners;
			paramObjs[2] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod719), "PROCESS", "System.Diagnostics.TraceListenerCollection.CopyTo(TraceListener[], Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.TraceListener listener)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = listener;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod720), "PROCESS", "System.Diagnostics.TraceListenerCollection.IndexOf(TraceListener)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Insert(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index, System.Diagnostics.TraceListener listener)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			paramObjs[2] = listener;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod721), "PROCESS", "System.Diagnostics.TraceListenerCollection.Insert(Int32, TraceListener)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Remove(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.TraceListener listener)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = listener;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod722), "PROCESS", "System.Diagnostics.TraceListenerCollection.Remove(TraceListener)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Remove(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod723), "PROCESS", "System.Diagnostics.TraceListenerCollection.Remove(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.TraceSwitch")]
	public class HandlerClass94
	{
		// System.Diagnostics.TraceSwitch.get_Level
		private static bool CallerMethod724(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceSwitch.set_Level
		private static bool CallerMethod725(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceSwitch.get_TraceError
		private static bool CallerMethod726(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceSwitch.get_TraceWarning
		private static bool CallerMethod727(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceSwitch.get_TraceInfo
		private static bool CallerMethod728(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceSwitch.get_TraceVerbose
		private static bool CallerMethod729(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.TraceSwitch..ctor
		private static bool CallerMethod730(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Diagnostics.TraceLevel get_Level(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod724), "PROCESS", "System.Diagnostics.TraceSwitch.get_Level()", paramObjs, typeof(System.Diagnostics.TraceLevel), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.TraceLevel)retValue;
		}

		public static void set_Level(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.TraceLevel value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod725), "PROCESS", "System.Diagnostics.TraceSwitch.set_Level(TraceLevel)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_TraceError(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod726), "PROCESS", "System.Diagnostics.TraceSwitch.get_TraceError()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_TraceWarning(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod727), "PROCESS", "System.Diagnostics.TraceSwitch.get_TraceWarning()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_TraceInfo(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod728), "PROCESS", "System.Diagnostics.TraceSwitch.get_TraceInfo()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_TraceVerbose(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod729), "PROCESS", "System.Diagnostics.TraceSwitch.get_TraceVerbose()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String displayName, System.String description)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = displayName;
			paramObjs[2] = description;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod730), "PROCESS", "System.Diagnostics.TraceSwitch.ctor(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.ActiveDesignerEventArgs")]
	public class HandlerClass95
	{
		// System.ComponentModel.Design.ActiveDesignerEventArgs.get_OldDesigner
		private static bool CallerMethod731(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.ActiveDesignerEventArgs.get_NewDesigner
		private static bool CallerMethod732(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.ActiveDesignerEventArgs..ctor
		private static bool CallerMethod733(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.ComponentModel.Design.IDesignerHost get_OldDesigner(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod731), "LIBRARY", "System.ComponentModel.Design.ActiveDesignerEventArgs.get_OldDesigner()", paramObjs, typeof(System.ComponentModel.Design.IDesignerHost), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.Design.IDesignerHost)retValue;
		}

		public static System.ComponentModel.Design.IDesignerHost get_NewDesigner(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod732), "LIBRARY", "System.ComponentModel.Design.ActiveDesignerEventArgs.get_NewDesigner()", paramObjs, typeof(System.ComponentModel.Design.IDesignerHost), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.Design.IDesignerHost)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.ComponentModel.Design.IDesignerHost oldDesigner, System.ComponentModel.Design.IDesignerHost newDesigner)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = oldDesigner;
			paramObjs[2] = newDesigner;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod733), "LIBRARY", "System.ComponentModel.Design.ActiveDesignerEventArgs.ctor(IDesignerHost, IDesignerHost)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.CommandID")]
	public class HandlerClass96
	{
		// System.ComponentModel.Design.CommandID.get_Guid
		private static bool CallerMethod734(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.CommandID.get_ID
		private static bool CallerMethod735(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.CommandID.GetHashCode
		private static bool CallerMethod736(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.CommandID.Equals
		private static bool CallerMethod737(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.CommandID.ToString
		private static bool CallerMethod738(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.CommandID..ctor
		private static bool CallerMethod739(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Guid get_Guid(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod734), "LIBRARY", "System.ComponentModel.Design.CommandID.get_Guid()", paramObjs, typeof(System.Guid), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Guid)retValue;
		}

		public static System.Int32 get_ID(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod735), "LIBRARY", "System.ComponentModel.Design.CommandID.get_ID()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod736), "LIBRARY", "System.ComponentModel.Design.CommandID.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod737), "LIBRARY", "System.ComponentModel.Design.CommandID.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod738), "LIBRARY", "System.ComponentModel.Design.CommandID.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Guid menuGroup, System.Int32 commandID)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = menuGroup;
			paramObjs[2] = commandID;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod739), "LIBRARY", "System.ComponentModel.Design.CommandID.ctor(Guid, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.ComponentChangedEventArgs")]
	public class HandlerClass97
	{
		// System.ComponentModel.Design.ComponentChangedEventArgs.get_Component
		private static bool CallerMethod740(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.ComponentChangedEventArgs.get_Member
		private static bool CallerMethod741(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.ComponentChangedEventArgs.get_NewValue
		private static bool CallerMethod742(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.ComponentChangedEventArgs.get_OldValue
		private static bool CallerMethod743(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.ComponentChangedEventArgs..ctor
		private static bool CallerMethod744(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object get_Component(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod740), "LIBRARY", "System.ComponentModel.Design.ComponentChangedEventArgs.get_Component()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.ComponentModel.MemberDescriptor get_Member(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod741), "LIBRARY", "System.ComponentModel.Design.ComponentChangedEventArgs.get_Member()", paramObjs, typeof(System.ComponentModel.MemberDescriptor), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.MemberDescriptor)retValue;
		}

		public static System.Object get_NewValue(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod742), "LIBRARY", "System.ComponentModel.Design.ComponentChangedEventArgs.get_NewValue()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object get_OldValue(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod743), "LIBRARY", "System.ComponentModel.Design.ComponentChangedEventArgs.get_OldValue()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Object component, System.ComponentModel.MemberDescriptor member, System.Object oldValue, System.Object newValue)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = component;
			paramObjs[2] = member;
			paramObjs[3] = oldValue;
			paramObjs[4] = newValue;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod744), "LIBRARY", "System.ComponentModel.Design.ComponentChangedEventArgs.ctor(Object, MemberDescriptor, Object, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.ComponentChangingEventArgs")]
	public class HandlerClass98
	{
		// System.ComponentModel.Design.ComponentChangingEventArgs.get_Component
		private static bool CallerMethod745(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.ComponentChangingEventArgs.get_Member
		private static bool CallerMethod746(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.ComponentChangingEventArgs..ctor
		private static bool CallerMethod747(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object get_Component(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod745), "LIBRARY", "System.ComponentModel.Design.ComponentChangingEventArgs.get_Component()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.ComponentModel.MemberDescriptor get_Member(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod746), "LIBRARY", "System.ComponentModel.Design.ComponentChangingEventArgs.get_Member()", paramObjs, typeof(System.ComponentModel.MemberDescriptor), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.MemberDescriptor)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Object component, System.ComponentModel.MemberDescriptor member)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = component;
			paramObjs[2] = member;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod747), "LIBRARY", "System.ComponentModel.Design.ComponentChangingEventArgs.ctor(Object, MemberDescriptor)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.ComponentEventArgs")]
	public class HandlerClass99
	{
		// System.ComponentModel.Design.ComponentEventArgs.get_Component
		private static bool CallerMethod748(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.ComponentEventArgs..ctor
		private static bool CallerMethod749(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.ComponentModel.IComponent get_Component(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod748), "LIBRARY", "System.ComponentModel.Design.ComponentEventArgs.get_Component()", paramObjs, typeof(System.ComponentModel.IComponent), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.IComponent)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.ComponentModel.IComponent component)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = component;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod749), "LIBRARY", "System.ComponentModel.Design.ComponentEventArgs.ctor(IComponent)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.ComponentRenameEventArgs")]
	public class HandlerClass100
	{
		// System.ComponentModel.Design.ComponentRenameEventArgs.get_NewName
		private static bool CallerMethod750(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.ComponentRenameEventArgs.get_OldName
		private static bool CallerMethod751(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.ComponentRenameEventArgs.get_Component
		private static bool CallerMethod752(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.ComponentRenameEventArgs..ctor
		private static bool CallerMethod753(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_NewName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod750), "LIBRARY", "System.ComponentModel.Design.ComponentRenameEventArgs.get_NewName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_OldName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod751), "LIBRARY", "System.ComponentModel.Design.ComponentRenameEventArgs.get_OldName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Object get_Component(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod752), "LIBRARY", "System.ComponentModel.Design.ComponentRenameEventArgs.get_Component()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Object component, System.String oldName, System.String newName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = component;
			paramObjs[2] = oldName;
			paramObjs[3] = newName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod753), "LIBRARY", "System.ComponentModel.Design.ComponentRenameEventArgs.ctor(Object, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.DesignerTransaction")]
	public class HandlerClass101
	{
		// System.ComponentModel.Design.DesignerTransaction.get_Canceled
		private static bool CallerMethod754(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerTransaction.get_Committed
		private static bool CallerMethod755(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerTransaction.get_Description
		private static bool CallerMethod756(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerTransaction.Cancel
		private static bool CallerMethod757(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerTransaction.Commit
		private static bool CallerMethod758(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerTransaction..ctor
		private static bool CallerMethod759(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerTransaction..ctor
		private static bool CallerMethod760(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean get_Canceled(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod754), "LIBRARY", "System.ComponentModel.Design.DesignerTransaction.get_Canceled()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_Committed(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod755), "LIBRARY", "System.ComponentModel.Design.DesignerTransaction.get_Committed()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_Description(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod756), "LIBRARY", "System.ComponentModel.Design.DesignerTransaction.get_Description()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void Cancel(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod757), "LIBRARY", "System.ComponentModel.Design.DesignerTransaction.Cancel()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Commit(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod758), "LIBRARY", "System.ComponentModel.Design.DesignerTransaction.Commit()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod759), "LIBRARY", "System.ComponentModel.Design.DesignerTransaction.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String description)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = description;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod760), "LIBRARY", "System.ComponentModel.Design.DesignerTransaction.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.DesignerTransactionCloseEventArgs")]
	public class HandlerClass102
	{
		// System.ComponentModel.Design.DesignerTransactionCloseEventArgs.get_TransactionCommitted
		private static bool CallerMethod761(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerTransactionCloseEventArgs..ctor
		private static bool CallerMethod762(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean get_TransactionCommitted(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod761), "LIBRARY", "System.ComponentModel.Design.DesignerTransactionCloseEventArgs.get_TransactionCommitted()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Boolean commit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = commit;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod762), "LIBRARY", "System.ComponentModel.Design.DesignerTransactionCloseEventArgs.ctor(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.MenuCommand")]
	public class HandlerClass103
	{
		// System.ComponentModel.Design.MenuCommand.get_OleStatus
		private static bool CallerMethod763(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.MenuCommand.Invoke
		private static bool CallerMethod764(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.MenuCommand.get_CommandID
		private static bool CallerMethod765(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.MenuCommand.set_Visible
		private static bool CallerMethod766(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.MenuCommand.get_Visible
		private static bool CallerMethod767(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.MenuCommand.set_Supported
		private static bool CallerMethod768(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.MenuCommand.get_Supported
		private static bool CallerMethod769(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.MenuCommand.set_Enabled
		private static bool CallerMethod770(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.MenuCommand.get_Enabled
		private static bool CallerMethod771(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.MenuCommand.set_Checked
		private static bool CallerMethod772(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.MenuCommand.get_Checked
		private static bool CallerMethod773(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.MenuCommand.ToString
		private static bool CallerMethod774(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.MenuCommand.add_CommandChanged
		private static bool CallerMethod775(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.MenuCommand.remove_CommandChanged
		private static bool CallerMethod776(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.MenuCommand..ctor
		private static bool CallerMethod777(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 get_OleStatus(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod763), "LIBRARY", "System.ComponentModel.Design.MenuCommand.get_OleStatus()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Invoke(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod764), "LIBRARY", "System.ComponentModel.Design.MenuCommand.Invoke()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.ComponentModel.Design.CommandID get_CommandID(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod765), "LIBRARY", "System.ComponentModel.Design.MenuCommand.get_CommandID()", paramObjs, typeof(System.ComponentModel.Design.CommandID), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.Design.CommandID)retValue;
		}

		public static void set_Visible(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod766), "LIBRARY", "System.ComponentModel.Design.MenuCommand.set_Visible(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_Visible(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod767), "LIBRARY", "System.ComponentModel.Design.MenuCommand.get_Visible()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_Supported(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod768), "LIBRARY", "System.ComponentModel.Design.MenuCommand.set_Supported(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_Supported(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod769), "LIBRARY", "System.ComponentModel.Design.MenuCommand.get_Supported()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_Enabled(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod770), "LIBRARY", "System.ComponentModel.Design.MenuCommand.set_Enabled(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_Enabled(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod771), "LIBRARY", "System.ComponentModel.Design.MenuCommand.get_Enabled()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_Checked(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod772), "LIBRARY", "System.ComponentModel.Design.MenuCommand.set_Checked(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_Checked(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod773), "LIBRARY", "System.ComponentModel.Design.MenuCommand.get_Checked()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod774), "LIBRARY", "System.ComponentModel.Design.MenuCommand.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void add_CommandChanged(HeatDotNet.MethodInterceptInfo methodIntercept, System.EventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod775), "LIBRARY", "System.ComponentModel.Design.MenuCommand.add_CommandChanged(EventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void remove_CommandChanged(HeatDotNet.MethodInterceptInfo methodIntercept, System.EventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod776), "LIBRARY", "System.ComponentModel.Design.MenuCommand.remove_CommandChanged(EventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.EventHandler handler, System.ComponentModel.Design.CommandID command)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = handler;
			paramObjs[2] = command;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod777), "LIBRARY", "System.ComponentModel.Design.MenuCommand.ctor(EventHandler, CommandID)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.DesignerVerb")]
	public class HandlerClass104
	{
		// System.ComponentModel.Design.DesignerVerb.ToString
		private static bool CallerMethod778(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerVerb.get_Text
		private static bool CallerMethod779(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerVerb..ctor
		private static bool CallerMethod780(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerVerb..ctor
		private static bool CallerMethod781(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod778), "LIBRARY", "System.ComponentModel.Design.DesignerVerb.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Text(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod779), "LIBRARY", "System.ComponentModel.Design.DesignerVerb.get_Text()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String text, System.EventHandler handler)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = text;
			paramObjs[2] = handler;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod780), "LIBRARY", "System.ComponentModel.Design.DesignerVerb.ctor(String, EventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String text, System.EventHandler handler, System.ComponentModel.Design.CommandID startCommandID)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = text;
			paramObjs[2] = handler;
			paramObjs[3] = startCommandID;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod781), "LIBRARY", "System.ComponentModel.Design.DesignerVerb.ctor(String, EventHandler, CommandID)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.DesignerVerbCollection")]
	public class HandlerClass105
	{
		// System.ComponentModel.Design.DesignerVerbCollection.get_Item
		private static bool CallerMethod782(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerVerbCollection.set_Item
		private static bool CallerMethod783(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerVerbCollection.Add
		private static bool CallerMethod784(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerVerbCollection.AddRange
		private static bool CallerMethod785(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerVerbCollection.AddRange
		private static bool CallerMethod786(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerVerbCollection.Insert
		private static bool CallerMethod787(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerVerbCollection.IndexOf
		private static bool CallerMethod788(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerVerbCollection.Contains
		private static bool CallerMethod789(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerVerbCollection.Remove
		private static bool CallerMethod790(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerVerbCollection.CopyTo
		private static bool CallerMethod791(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerVerbCollection..ctor
		private static bool CallerMethod792(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerVerbCollection..ctor
		private static bool CallerMethod793(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.ComponentModel.Design.DesignerVerb get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod782), "LIBRARY", "System.ComponentModel.Design.DesignerVerbCollection.get_Item(Int32)", paramObjs, typeof(System.ComponentModel.Design.DesignerVerb), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.Design.DesignerVerb)retValue;
		}

		public static void set_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index, System.ComponentModel.Design.DesignerVerb value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod783), "LIBRARY", "System.ComponentModel.Design.DesignerVerbCollection.set_Item(Int32, DesignerVerb)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 Add(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.Design.DesignerVerb value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod784), "LIBRARY", "System.ComponentModel.Design.DesignerVerbCollection.Add(DesignerVerb)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void AddRange(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.Design.DesignerVerb[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod785), "LIBRARY", "System.ComponentModel.Design.DesignerVerbCollection.AddRange(DesignerVerb[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddRange(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.Design.DesignerVerbCollection value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod786), "LIBRARY", "System.ComponentModel.Design.DesignerVerbCollection.AddRange(DesignerVerbCollection)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Insert(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index, System.ComponentModel.Design.DesignerVerb value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod787), "LIBRARY", "System.ComponentModel.Design.DesignerVerbCollection.Insert(Int32, DesignerVerb)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.Design.DesignerVerb value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod788), "LIBRARY", "System.ComponentModel.Design.DesignerVerbCollection.IndexOf(DesignerVerb)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Contains(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.Design.DesignerVerb value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod789), "LIBRARY", "System.ComponentModel.Design.DesignerVerbCollection.Contains(DesignerVerb)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void Remove(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.Design.DesignerVerb value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod790), "LIBRARY", "System.ComponentModel.Design.DesignerVerbCollection.Remove(DesignerVerb)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void CopyTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.Design.DesignerVerb[] array, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod791), "LIBRARY", "System.ComponentModel.Design.DesignerVerbCollection.CopyTo(DesignerVerb[], Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod792), "LIBRARY", "System.ComponentModel.Design.DesignerVerbCollection.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.ComponentModel.Design.DesignerVerb[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod793), "LIBRARY", "System.ComponentModel.Design.DesignerVerbCollection.ctor(DesignerVerb[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.DesigntimeLicenseContext")]
	public class HandlerClass106
	{
		// System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey
		private static bool CallerMethod794(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey
		private static bool CallerMethod795(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesigntimeLicenseContext.get_UsageMode
		private static bool CallerMethod796(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesigntimeLicenseContext..ctor
		private static bool CallerMethod797(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void SetSavedLicenseKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type type, System.String key)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			paramObjs[2] = key;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod794), "LIBRARY", "System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(Type, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String GetSavedLicenseKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type type, System.Reflection.Assembly resourceAssembly)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			paramObjs[2] = resourceAssembly;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod795), "LIBRARY", "System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(Type, Assembly)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.ComponentModel.LicenseUsageMode get_UsageMode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod796), "LIBRARY", "System.ComponentModel.Design.DesigntimeLicenseContext.get_UsageMode()", paramObjs, typeof(System.ComponentModel.LicenseUsageMode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.LicenseUsageMode)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod797), "LIBRARY", "System.ComponentModel.Design.DesigntimeLicenseContext.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.DesigntimeLicenseContextSerializer")]
	public class HandlerClass107
	{
		// System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize
		private static bool CallerMethod798(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Serialize(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.Stream o, System.String cryptoKey, System.ComponentModel.Design.DesigntimeLicenseContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = o;
			paramObjs[2] = cryptoKey;
			paramObjs[3] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod798), "LIBRARY", "System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(Stream, String, DesigntimeLicenseContext)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.DesignerCollection")]
	public class HandlerClass108
	{
		// System.ComponentModel.Design.DesignerCollection.get_Item
		private static bool CallerMethod799(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerCollection.get_Count
		private static bool CallerMethod800(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerCollection.GetEnumerator
		private static bool CallerMethod801(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerCollection..ctor
		private static bool CallerMethod802(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerCollection..ctor
		private static bool CallerMethod803(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.ComponentModel.Design.IDesignerHost get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod799), "LIBRARY", "System.ComponentModel.Design.DesignerCollection.get_Item(Int32)", paramObjs, typeof(System.ComponentModel.Design.IDesignerHost), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.Design.IDesignerHost)retValue;
		}

		public static System.Int32 get_Count(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod800), "LIBRARY", "System.ComponentModel.Design.DesignerCollection.get_Count()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Collections.IEnumerator GetEnumerator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod801), "LIBRARY", "System.ComponentModel.Design.DesignerCollection.GetEnumerator()", paramObjs, typeof(System.Collections.IEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IEnumerator)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.ComponentModel.Design.IDesignerHost[] designers)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = designers;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod802), "LIBRARY", "System.ComponentModel.Design.DesignerCollection.ctor(IDesignerHost[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Collections.IList designers)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = designers;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod803), "LIBRARY", "System.ComponentModel.Design.DesignerCollection.ctor(IList)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.DesignerEventArgs")]
	public class HandlerClass109
	{
		// System.ComponentModel.Design.DesignerEventArgs.get_Designer
		private static bool CallerMethod804(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.DesignerEventArgs..ctor
		private static bool CallerMethod805(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.ComponentModel.Design.IDesignerHost get_Designer(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod804), "LIBRARY", "System.ComponentModel.Design.DesignerEventArgs.get_Designer()", paramObjs, typeof(System.ComponentModel.Design.IDesignerHost), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.Design.IDesignerHost)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.ComponentModel.Design.IDesignerHost host)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = host;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod805), "LIBRARY", "System.ComponentModel.Design.DesignerEventArgs.ctor(IDesignerHost)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.InheritanceAttribute")]
	public class HandlerClass110
	{
		// System.ComponentModel.InheritanceAttribute.IsDefaultAttribute
		private static bool CallerMethod806(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.InheritanceAttribute.GetHashCode
		private static bool CallerMethod807(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.InheritanceAttribute.Equals
		private static bool CallerMethod808(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.InheritanceAttribute.ToString
		private static bool CallerMethod809(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.InheritanceAttribute.get_InheritanceLevel
		private static bool CallerMethod810(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.InheritanceAttribute..ctor
		private static bool CallerMethod811(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.InheritanceAttribute..ctor
		private static bool CallerMethod812(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefaultAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod806), "LIBRARY", "System.ComponentModel.InheritanceAttribute.IsDefaultAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod807), "LIBRARY", "System.ComponentModel.InheritanceAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod808), "LIBRARY", "System.ComponentModel.InheritanceAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod809), "LIBRARY", "System.ComponentModel.InheritanceAttribute.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.ComponentModel.InheritanceLevel get_InheritanceLevel(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod810), "LIBRARY", "System.ComponentModel.InheritanceAttribute.get_InheritanceLevel()", paramObjs, typeof(System.ComponentModel.InheritanceLevel), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.InheritanceLevel)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod811), "LIBRARY", "System.ComponentModel.InheritanceAttribute.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.ComponentModel.InheritanceLevel inheritanceLevel)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = inheritanceLevel;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod812), "LIBRARY", "System.ComponentModel.InheritanceAttribute.ctor(InheritanceLevel)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.NotifyParentPropertyAttribute")]
	public class HandlerClass111
	{
		// System.ComponentModel.NotifyParentPropertyAttribute.IsDefaultAttribute
		private static bool CallerMethod813(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.NotifyParentPropertyAttribute.GetHashCode
		private static bool CallerMethod814(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.NotifyParentPropertyAttribute.Equals
		private static bool CallerMethod815(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.NotifyParentPropertyAttribute.get_NotifyParent
		private static bool CallerMethod816(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.NotifyParentPropertyAttribute..ctor
		private static bool CallerMethod817(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefaultAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod813), "LIBRARY", "System.ComponentModel.NotifyParentPropertyAttribute.IsDefaultAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod814), "LIBRARY", "System.ComponentModel.NotifyParentPropertyAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod815), "LIBRARY", "System.ComponentModel.NotifyParentPropertyAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_NotifyParent(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod816), "LIBRARY", "System.ComponentModel.NotifyParentPropertyAttribute.get_NotifyParent()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Boolean notifyParent)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = notifyParent;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod817), "LIBRARY", "System.ComponentModel.NotifyParentPropertyAttribute.ctor(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.ParenthesizePropertyNameAttribute")]
	public class HandlerClass112
	{
		// System.ComponentModel.ParenthesizePropertyNameAttribute.IsDefaultAttribute
		private static bool CallerMethod818(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ParenthesizePropertyNameAttribute.GetHashCode
		private static bool CallerMethod819(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ParenthesizePropertyNameAttribute.Equals
		private static bool CallerMethod820(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ParenthesizePropertyNameAttribute.get_NeedParenthesis
		private static bool CallerMethod821(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ParenthesizePropertyNameAttribute..ctor
		private static bool CallerMethod822(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ParenthesizePropertyNameAttribute..ctor
		private static bool CallerMethod823(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefaultAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod818), "LIBRARY", "System.ComponentModel.ParenthesizePropertyNameAttribute.IsDefaultAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod819), "LIBRARY", "System.ComponentModel.ParenthesizePropertyNameAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object o)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = o;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod820), "LIBRARY", "System.ComponentModel.ParenthesizePropertyNameAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_NeedParenthesis(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod821), "LIBRARY", "System.ComponentModel.ParenthesizePropertyNameAttribute.get_NeedParenthesis()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod822), "LIBRARY", "System.ComponentModel.ParenthesizePropertyNameAttribute.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Boolean needParenthesis)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = needParenthesis;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod823), "LIBRARY", "System.ComponentModel.ParenthesizePropertyNameAttribute.ctor(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.PropertyTabAttribute")]
	public class HandlerClass113
	{
		// System.ComponentModel.PropertyTabAttribute.GetHashCode
		private static bool CallerMethod824(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyTabAttribute.Equals
		private static bool CallerMethod825(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyTabAttribute.get_TabClasses
		private static bool CallerMethod826(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyTabAttribute.get_TabScopes
		private static bool CallerMethod827(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyTabAttribute.Equals
		private static bool CallerMethod828(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyTabAttribute..ctor
		private static bool CallerMethod829(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyTabAttribute..ctor
		private static bool CallerMethod830(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyTabAttribute..ctor
		private static bool CallerMethod831(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyTabAttribute..ctor
		private static bool CallerMethod832(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.PropertyTabAttribute..ctor
		private static bool CallerMethod833(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod824), "LIBRARY", "System.ComponentModel.PropertyTabAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object other)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = other;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod825), "LIBRARY", "System.ComponentModel.PropertyTabAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Type[] get_TabClasses(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod826), "LIBRARY", "System.ComponentModel.PropertyTabAttribute.get_TabClasses()", paramObjs, typeof(System.Type[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type[])retValue;
		}

		public static System.ComponentModel.PropertyTabScope[] get_TabScopes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod827), "LIBRARY", "System.ComponentModel.PropertyTabAttribute.get_TabScopes()", paramObjs, typeof(System.ComponentModel.PropertyTabScope[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.PropertyTabScope[])retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.PropertyTabAttribute other)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = other;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod828), "LIBRARY", "System.ComponentModel.PropertyTabAttribute.Equals(PropertyTabAttribute)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod829), "LIBRARY", "System.ComponentModel.PropertyTabAttribute.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Type tabClass)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = tabClass;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod830), "LIBRARY", "System.ComponentModel.PropertyTabAttribute.ctor(Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String tabClassName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = tabClassName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod831), "LIBRARY", "System.ComponentModel.PropertyTabAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Type tabClass, System.ComponentModel.PropertyTabScope tabScope)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = tabClass;
			paramObjs[2] = tabScope;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod832), "LIBRARY", "System.ComponentModel.PropertyTabAttribute.ctor(Type, PropertyTabScope)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String tabClassName, System.ComponentModel.PropertyTabScope tabScope)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = tabClassName;
			paramObjs[2] = tabScope;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod833), "LIBRARY", "System.ComponentModel.PropertyTabAttribute.ctor(String, PropertyTabScope)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.RefreshPropertiesAttribute")]
	public class HandlerClass114
	{
		// System.ComponentModel.RefreshPropertiesAttribute.IsDefaultAttribute
		private static bool CallerMethod834(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.RefreshPropertiesAttribute.GetHashCode
		private static bool CallerMethod835(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.RefreshPropertiesAttribute.Equals
		private static bool CallerMethod836(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.RefreshPropertiesAttribute.get_RefreshProperties
		private static bool CallerMethod837(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.RefreshPropertiesAttribute..ctor
		private static bool CallerMethod838(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefaultAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod834), "LIBRARY", "System.ComponentModel.RefreshPropertiesAttribute.IsDefaultAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod835), "LIBRARY", "System.ComponentModel.RefreshPropertiesAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod836), "LIBRARY", "System.ComponentModel.RefreshPropertiesAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.ComponentModel.RefreshProperties get_RefreshProperties(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod837), "LIBRARY", "System.ComponentModel.RefreshPropertiesAttribute.get_RefreshProperties()", paramObjs, typeof(System.ComponentModel.RefreshProperties), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.RefreshProperties)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.ComponentModel.RefreshProperties refresh)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = refresh;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod838), "LIBRARY", "System.ComponentModel.RefreshPropertiesAttribute.ctor(RefreshProperties)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.ServiceContainer")]
	public class HandlerClass115
	{
		// System.ComponentModel.Design.ServiceContainer.GetService
		private static bool CallerMethod839(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.ServiceContainer.RemoveService
		private static bool CallerMethod840(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.ServiceContainer.RemoveService
		private static bool CallerMethod841(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.ServiceContainer.AddService
		private static bool CallerMethod842(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.ServiceContainer.AddService
		private static bool CallerMethod843(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.ServiceContainer.AddService
		private static bool CallerMethod844(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.ServiceContainer.AddService
		private static bool CallerMethod845(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.ServiceContainer..ctor
		private static bool CallerMethod846(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.ServiceContainer..ctor
		private static bool CallerMethod847(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object GetService(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type serviceType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = serviceType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod839), "LIBRARY", "System.ComponentModel.Design.ServiceContainer.GetService(Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static void RemoveService(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type serviceType, System.Boolean promote)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = serviceType;
			paramObjs[2] = promote;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod840), "LIBRARY", "System.ComponentModel.Design.ServiceContainer.RemoveService(Type, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void RemoveService(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type serviceType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = serviceType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod841), "LIBRARY", "System.ComponentModel.Design.ServiceContainer.RemoveService(Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddService(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type serviceType, System.ComponentModel.Design.ServiceCreatorCallback callback, System.Boolean promote)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = serviceType;
			paramObjs[2] = callback;
			paramObjs[3] = promote;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod842), "LIBRARY", "System.ComponentModel.Design.ServiceContainer.AddService(Type, ServiceCreatorCallback, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddService(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type serviceType, System.ComponentModel.Design.ServiceCreatorCallback callback)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = serviceType;
			paramObjs[2] = callback;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod843), "LIBRARY", "System.ComponentModel.Design.ServiceContainer.AddService(Type, ServiceCreatorCallback)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddService(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type serviceType, System.Object serviceInstance, System.Boolean promote)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = serviceType;
			paramObjs[2] = serviceInstance;
			paramObjs[3] = promote;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod844), "LIBRARY", "System.ComponentModel.Design.ServiceContainer.AddService(Type, Object, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddService(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type serviceType, System.Object serviceInstance)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = serviceType;
			paramObjs[2] = serviceInstance;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod845), "LIBRARY", "System.ComponentModel.Design.ServiceContainer.AddService(Type, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod846), "LIBRARY", "System.ComponentModel.Design.ServiceContainer.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IServiceProvider parentProvider)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = parentProvider;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod847), "LIBRARY", "System.ComponentModel.Design.ServiceContainer.ctor(IServiceProvider)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.StandardCommands")]
	public class HandlerClass116
	{
		// System.ComponentModel.Design.StandardCommands..ctor
		private static bool CallerMethod848(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod848), "LIBRARY", "System.ComponentModel.Design.StandardCommands.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.StandardToolWindows")]
	public class HandlerClass117
	{
		// System.ComponentModel.Design.StandardToolWindows..ctor
		private static bool CallerMethod849(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod849), "LIBRARY", "System.ComponentModel.Design.StandardToolWindows.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.ToolboxItemAttribute")]
	public class HandlerClass118
	{
		// System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute
		private static bool CallerMethod850(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ToolboxItemAttribute.GetHashCode
		private static bool CallerMethod851(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ToolboxItemAttribute.Equals
		private static bool CallerMethod852(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ToolboxItemAttribute.get_ToolboxItemType
		private static bool CallerMethod853(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ToolboxItemAttribute.get_ToolboxItemTypeName
		private static bool CallerMethod854(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ToolboxItemAttribute..ctor
		private static bool CallerMethod855(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ToolboxItemAttribute..ctor
		private static bool CallerMethod856(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.ToolboxItemAttribute..ctor
		private static bool CallerMethod857(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefaultAttribute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod850), "LIBRARY", "System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod851), "LIBRARY", "System.ComponentModel.ToolboxItemAttribute.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod852), "LIBRARY", "System.ComponentModel.ToolboxItemAttribute.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Type get_ToolboxItemType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod853), "LIBRARY", "System.ComponentModel.ToolboxItemAttribute.get_ToolboxItemType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.String get_ToolboxItemTypeName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod854), "LIBRARY", "System.ComponentModel.ToolboxItemAttribute.get_ToolboxItemTypeName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Boolean defaultType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = defaultType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod855), "LIBRARY", "System.ComponentModel.ToolboxItemAttribute.ctor(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String toolboxItemTypeName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = toolboxItemTypeName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod856), "LIBRARY", "System.ComponentModel.ToolboxItemAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Type toolboxItemType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = toolboxItemType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod857), "LIBRARY", "System.ComponentModel.ToolboxItemAttribute.ctor(Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.Serialization.ContextStack")]
	public class HandlerClass119
	{
		// System.ComponentModel.Design.Serialization.ContextStack.get_Current
		private static bool CallerMethod858(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.ContextStack.get_Item
		private static bool CallerMethod859(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.ContextStack.get_Item
		private static bool CallerMethod860(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.ContextStack.Pop
		private static bool CallerMethod861(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.ContextStack.Push
		private static bool CallerMethod862(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.ContextStack..ctor
		private static bool CallerMethod863(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object get_Current(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod858), "LIBRARY", "System.ComponentModel.Design.Serialization.ContextStack.get_Current()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 level)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = level;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod859), "LIBRARY", "System.ComponentModel.Design.Serialization.ContextStack.get_Item(Int32)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type type)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod860), "LIBRARY", "System.ComponentModel.Design.Serialization.ContextStack.get_Item(Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object Pop(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod861), "LIBRARY", "System.ComponentModel.Design.Serialization.ContextStack.Pop()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static void Push(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = context;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod862), "LIBRARY", "System.ComponentModel.Design.Serialization.ContextStack.Push(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod863), "LIBRARY", "System.ComponentModel.Design.Serialization.ContextStack.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.Serialization.DesignerLoader")]
	public class HandlerClass120
	{
		// System.ComponentModel.Design.Serialization.DesignerLoader.Flush
		private static bool CallerMethod864(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.DesignerLoader.get_Loading
		private static bool CallerMethod865(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Flush(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod864), "LIBRARY", "System.ComponentModel.Design.Serialization.DesignerLoader.Flush()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_Loading(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod865), "LIBRARY", "System.ComponentModel.Design.Serialization.DesignerLoader.get_Loading()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.Serialization.DesignerSerializerAttribute")]
	public class HandlerClass121
	{
		// System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.get_TypeId
		private static bool CallerMethod866(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.get_SerializerTypeName
		private static bool CallerMethod867(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.get_SerializerBaseTypeName
		private static bool CallerMethod868(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.DesignerSerializerAttribute..ctor
		private static bool CallerMethod869(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.DesignerSerializerAttribute..ctor
		private static bool CallerMethod870(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.DesignerSerializerAttribute..ctor
		private static bool CallerMethod871(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object get_TypeId(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod866), "LIBRARY", "System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.get_TypeId()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.String get_SerializerTypeName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod867), "LIBRARY", "System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.get_SerializerTypeName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_SerializerBaseTypeName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod868), "LIBRARY", "System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.get_SerializerBaseTypeName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Type serializerType, System.Type baseSerializerType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = serializerType;
			paramObjs[2] = baseSerializerType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod869), "LIBRARY", "System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.ctor(Type, Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String serializerTypeName, System.Type baseSerializerType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = serializerTypeName;
			paramObjs[2] = baseSerializerType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod870), "LIBRARY", "System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.ctor(String, Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String serializerTypeName, System.String baseSerializerTypeName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = serializerTypeName;
			paramObjs[2] = baseSerializerTypeName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod871), "LIBRARY", "System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.ctor(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.Serialization.InstanceDescriptor")]
	public class HandlerClass122
	{
		// System.ComponentModel.Design.Serialization.InstanceDescriptor.get_Arguments
		private static bool CallerMethod872(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.InstanceDescriptor.get_IsComplete
		private static bool CallerMethod873(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.InstanceDescriptor.get_MemberInfo
		private static bool CallerMethod874(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke
		private static bool CallerMethod875(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.InstanceDescriptor..ctor
		private static bool CallerMethod876(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.InstanceDescriptor..ctor
		private static bool CallerMethod877(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Collections.ICollection get_Arguments(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod872), "LIBRARY", "System.ComponentModel.Design.Serialization.InstanceDescriptor.get_Arguments()", paramObjs, typeof(System.Collections.ICollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.ICollection)retValue;
		}

		public static System.Boolean get_IsComplete(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod873), "LIBRARY", "System.ComponentModel.Design.Serialization.InstanceDescriptor.get_IsComplete()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Reflection.MemberInfo get_MemberInfo(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod874), "LIBRARY", "System.ComponentModel.Design.Serialization.InstanceDescriptor.get_MemberInfo()", paramObjs, typeof(System.Reflection.MemberInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MemberInfo)retValue;
		}

		public static System.Object Invoke(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod875), "LIBRARY", "System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Reflection.MemberInfo member, System.Collections.ICollection arguments)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = member;
			paramObjs[2] = arguments;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod876), "LIBRARY", "System.ComponentModel.Design.Serialization.InstanceDescriptor.ctor(MemberInfo, ICollection)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Reflection.MemberInfo member, System.Collections.ICollection arguments, System.Boolean isComplete)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = member;
			paramObjs[2] = arguments;
			paramObjs[3] = isComplete;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod877), "LIBRARY", "System.ComponentModel.Design.Serialization.InstanceDescriptor.ctor(MemberInfo, ICollection, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.Serialization.ResolveNameEventArgs")]
	public class HandlerClass123
	{
		// System.ComponentModel.Design.Serialization.ResolveNameEventArgs.get_Name
		private static bool CallerMethod878(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.ResolveNameEventArgs.get_Value
		private static bool CallerMethod879(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.ResolveNameEventArgs.set_Value
		private static bool CallerMethod880(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.ResolveNameEventArgs..ctor
		private static bool CallerMethod881(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod878), "LIBRARY", "System.ComponentModel.Design.Serialization.ResolveNameEventArgs.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Object get_Value(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod879), "LIBRARY", "System.ComponentModel.Design.Serialization.ResolveNameEventArgs.get_Value()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static void set_Value(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod880), "LIBRARY", "System.ComponentModel.Design.Serialization.ResolveNameEventArgs.set_Value(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = name;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod881), "LIBRARY", "System.ComponentModel.Design.Serialization.ResolveNameEventArgs.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute")]
	public class HandlerClass124
	{
		// System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.get_TypeId
		private static bool CallerMethod882(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.get_Reloadable
		private static bool CallerMethod883(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.get_SerializerTypeName
		private static bool CallerMethod884(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.get_SerializerBaseTypeName
		private static bool CallerMethod885(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute..ctor
		private static bool CallerMethod886(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute..ctor
		private static bool CallerMethod887(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute..ctor
		private static bool CallerMethod888(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object get_TypeId(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod882), "LIBRARY", "System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.get_TypeId()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Boolean get_Reloadable(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod883), "LIBRARY", "System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.get_Reloadable()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_SerializerTypeName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod884), "LIBRARY", "System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.get_SerializerTypeName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_SerializerBaseTypeName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod885), "LIBRARY", "System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.get_SerializerBaseTypeName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Type serializerType, System.Type baseSerializerType, System.Boolean reloadable)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = serializerType;
			paramObjs[2] = baseSerializerType;
			paramObjs[3] = reloadable;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod886), "LIBRARY", "System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.ctor(Type, Type, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String serializerTypeName, System.Type baseSerializerType, System.Boolean reloadable)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = serializerTypeName;
			paramObjs[2] = baseSerializerType;
			paramObjs[3] = reloadable;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod887), "LIBRARY", "System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.ctor(String, Type, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String serializerTypeName, System.String baseSerializerTypeName, System.Boolean reloadable)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = serializerTypeName;
			paramObjs[2] = baseSerializerTypeName;
			paramObjs[3] = reloadable;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod888), "LIBRARY", "System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.ctor(String, String, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Permissions.ResourcePermissionBase")]
	public class HandlerClass125
	{
		// System.Security.Permissions.ResourcePermissionBase.IsUnrestricted
		private static bool CallerMethod889(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Permissions.ResourcePermissionBase.FromXml
		private static bool CallerMethod890(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Permissions.ResourcePermissionBase.ToXml
		private static bool CallerMethod891(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Permissions.ResourcePermissionBase.IsSubsetOf
		private static bool CallerMethod892(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Permissions.ResourcePermissionBase.Union
		private static bool CallerMethod893(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Permissions.ResourcePermissionBase.Intersect
		private static bool CallerMethod894(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Permissions.ResourcePermissionBase.Copy
		private static bool CallerMethod895(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsUnrestricted(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod889), "SECURITY", "System.Security.Permissions.ResourcePermissionBase.IsUnrestricted()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void FromXml(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.SecurityElement securityElement)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = securityElement;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod890), "SECURITY", "System.Security.Permissions.ResourcePermissionBase.FromXml(SecurityElement)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Security.SecurityElement ToXml(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod891), "SECURITY", "System.Security.Permissions.ResourcePermissionBase.ToXml()", paramObjs, typeof(System.Security.SecurityElement), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.SecurityElement)retValue;
		}

		public static System.Boolean IsSubsetOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.IPermission target)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = target;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod892), "SECURITY", "System.Security.Permissions.ResourcePermissionBase.IsSubsetOf(IPermission)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Security.IPermission Union(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.IPermission target)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = target;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod893), "SECURITY", "System.Security.Permissions.ResourcePermissionBase.Union(IPermission)", paramObjs, typeof(System.Security.IPermission), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.IPermission)retValue;
		}

		public static System.Security.IPermission Intersect(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.IPermission target)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = target;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod894), "SECURITY", "System.Security.Permissions.ResourcePermissionBase.Intersect(IPermission)", paramObjs, typeof(System.Security.IPermission), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.IPermission)retValue;
		}

		public static System.Security.IPermission Copy(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod895), "SECURITY", "System.Security.Permissions.ResourcePermissionBase.Copy()", paramObjs, typeof(System.Security.IPermission), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.IPermission)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Permissions.ResourcePermissionBaseEntry")]
	public class HandlerClass126
	{
		// System.Security.Permissions.ResourcePermissionBaseEntry.get_PermissionAccess
		private static bool CallerMethod896(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Permissions.ResourcePermissionBaseEntry.get_PermissionAccessPath
		private static bool CallerMethod897(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Permissions.ResourcePermissionBaseEntry..ctor
		private static bool CallerMethod898(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Permissions.ResourcePermissionBaseEntry..ctor
		private static bool CallerMethod899(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 get_PermissionAccess(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod896), "SECURITY", "System.Security.Permissions.ResourcePermissionBaseEntry.get_PermissionAccess()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String[] get_PermissionAccessPath(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod897), "SECURITY", "System.Security.Permissions.ResourcePermissionBaseEntry.get_PermissionAccessPath()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod898), "SECURITY", "System.Security.Permissions.ResourcePermissionBaseEntry.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int32 permissionAccess, System.String[] permissionAccessPath)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = permissionAccess;
			paramObjs[2] = permissionAccessPath;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod899), "SECURITY", "System.Security.Permissions.ResourcePermissionBaseEntry.ctor(Int32, String[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Uri")]
	public class HandlerClass127
	{
		// System.Uri.GetHashCode
		private static bool CallerMethod900(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.Equals
		private static bool CallerMethod901(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.ToString
		private static bool CallerMethod902(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.get_AbsolutePath
		private static bool CallerMethod903(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.get_AbsoluteUri
		private static bool CallerMethod904(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.get_Authority
		private static bool CallerMethod905(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.get_Fragment
		private static bool CallerMethod906(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.get_Host
		private static bool CallerMethod907(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.get_HostNameType
		private static bool CallerMethod908(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.get_IsDefaultPort
		private static bool CallerMethod909(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.get_IsFile
		private static bool CallerMethod910(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.get_IsLoopback
		private static bool CallerMethod911(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.get_IsUnc
		private static bool CallerMethod912(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.get_LocalPath
		private static bool CallerMethod913(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.get_PathAndQuery
		private static bool CallerMethod914(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.get_Port
		private static bool CallerMethod915(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.get_Query
		private static bool CallerMethod916(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.get_Scheme
		private static bool CallerMethod917(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.get_Segments
		private static bool CallerMethod918(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.get_UserEscaped
		private static bool CallerMethod919(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.get_UserInfo
		private static bool CallerMethod920(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.GetLeftPart
		private static bool CallerMethod921(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.MakeRelative
		private static bool CallerMethod922(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.CheckHostName
		private static bool CallerMethod923(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.CheckSchemeName
		private static bool CallerMethod924(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.FromHex
		private static bool CallerMethod925(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.HexEscape
		private static bool CallerMethod926(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.HexUnescape
		private static bool CallerMethod927(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			Array.Copy(methodParams, 0, paramObjs, 1, paramObjs.Length - 1);
			return true;
		}

		// System.Uri.IsHexDigit
		private static bool CallerMethod928(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri.IsHexEncoding
		private static bool CallerMethod929(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri..ctor
		private static bool CallerMethod930(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri..ctor
		private static bool CallerMethod931(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri..ctor
		private static bool CallerMethod932(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Uri..ctor
		private static bool CallerMethod933(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod900), "NETWORK", "System.Uri.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object comparand)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = comparand;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod901), "NETWORK", "System.Uri.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod902), "NETWORK", "System.Uri.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_AbsolutePath(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod903), "NETWORK", "System.Uri.get_AbsolutePath()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_AbsoluteUri(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod904), "NETWORK", "System.Uri.get_AbsoluteUri()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Authority(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod905), "NETWORK", "System.Uri.get_Authority()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Fragment(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod906), "NETWORK", "System.Uri.get_Fragment()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Host(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod907), "NETWORK", "System.Uri.get_Host()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.UriHostNameType get_HostNameType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod908), "NETWORK", "System.Uri.get_HostNameType()", paramObjs, typeof(System.UriHostNameType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.UriHostNameType)retValue;
		}

		public static System.Boolean get_IsDefaultPort(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod909), "NETWORK", "System.Uri.get_IsDefaultPort()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsFile(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod910), "NETWORK", "System.Uri.get_IsFile()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsLoopback(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod911), "NETWORK", "System.Uri.get_IsLoopback()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsUnc(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod912), "NETWORK", "System.Uri.get_IsUnc()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_LocalPath(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod913), "NETWORK", "System.Uri.get_LocalPath()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_PathAndQuery(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod914), "NETWORK", "System.Uri.get_PathAndQuery()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_Port(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod915), "NETWORK", "System.Uri.get_Port()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String get_Query(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod916), "NETWORK", "System.Uri.get_Query()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Scheme(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod917), "NETWORK", "System.Uri.get_Scheme()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String[] get_Segments(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod918), "NETWORK", "System.Uri.get_Segments()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.Boolean get_UserEscaped(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod919), "NETWORK", "System.Uri.get_UserEscaped()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_UserInfo(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod920), "NETWORK", "System.Uri.get_UserInfo()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetLeftPart(HeatDotNet.MethodInterceptInfo methodIntercept, System.UriPartial part)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = part;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod921), "NETWORK", "System.Uri.GetLeftPart(UriPartial)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String MakeRelative(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri toUri)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = toUri;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod922), "NETWORK", "System.Uri.MakeRelative(Uri)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.UriHostNameType CheckHostName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod923), "NETWORK", "System.Uri.CheckHostName(String)", paramObjs, typeof(System.UriHostNameType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.UriHostNameType)retValue;
		}

		public static System.Boolean CheckSchemeName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String schemeName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = schemeName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod924), "NETWORK", "System.Uri.CheckSchemeName(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 FromHex(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char digit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = digit;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod925), "NETWORK", "System.Uri.FromHex(Char)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String HexEscape(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char character)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = character;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod926), "NETWORK", "System.Uri.HexEscape(Char)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Char HexUnescape(HeatDotNet.MethodInterceptInfo methodIntercept, System.String pattern, ref System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = pattern;
			paramObjs[2] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod927), "NETWORK", "System.Uri.HexUnescape(String, Int32&)", paramObjs, typeof(System.Char), ref retValue, ref exception);
			index = (System.Int32)paramObjs[2];
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Char)retValue;
		}

		public static System.Boolean IsHexDigit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char character)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = character;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod928), "NETWORK", "System.Uri.IsHexDigit(Char)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsHexEncoding(HeatDotNet.MethodInterceptInfo methodIntercept, System.String pattern, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = pattern;
			paramObjs[2] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod929), "NETWORK", "System.Uri.IsHexEncoding(String, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String uriString)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = uriString;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod930), "NETWORK", "System.Uri.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String uriString, System.Boolean dontEscape)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = uriString;
			paramObjs[2] = dontEscape;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod931), "NETWORK", "System.Uri.ctor(String, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Uri baseUri, System.String relativeUri)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = baseUri;
			paramObjs[2] = relativeUri;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod932), "NETWORK", "System.Uri.ctor(Uri, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Uri baseUri, System.String relativeUri, System.Boolean dontEscape)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = baseUri;
			paramObjs[2] = relativeUri;
			paramObjs[3] = dontEscape;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod933), "NETWORK", "System.Uri.ctor(Uri, String, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.AuthenticationManager")]
	public class HandlerClass128
	{
		// System.Net.AuthenticationManager.Authenticate
		private static bool CallerMethod934(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.AuthenticationManager.PreAuthenticate
		private static bool CallerMethod935(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.AuthenticationManager.Register
		private static bool CallerMethod936(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.AuthenticationManager.Unregister
		private static bool CallerMethod937(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.AuthenticationManager.Unregister
		private static bool CallerMethod938(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.AuthenticationManager.get_RegisteredModules
		private static bool CallerMethod939(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Net.Authorization Authenticate(HeatDotNet.MethodInterceptInfo methodIntercept, System.String challenge, System.Net.WebRequest request, System.Net.ICredentials credentials)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = challenge;
			paramObjs[2] = request;
			paramObjs[3] = credentials;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod934), "NETWORK", "System.Net.AuthenticationManager.Authenticate(String, WebRequest, ICredentials)", paramObjs, typeof(System.Net.Authorization), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.Authorization)retValue;
		}

		public static System.Net.Authorization PreAuthenticate(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.WebRequest request, System.Net.ICredentials credentials)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = request;
			paramObjs[2] = credentials;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod935), "NETWORK", "System.Net.AuthenticationManager.PreAuthenticate(WebRequest, ICredentials)", paramObjs, typeof(System.Net.Authorization), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.Authorization)retValue;
		}

		public static void Register(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.IAuthenticationModule authenticationModule)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = authenticationModule;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod936), "NETWORK", "System.Net.AuthenticationManager.Register(IAuthenticationModule)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Unregister(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.IAuthenticationModule authenticationModule)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = authenticationModule;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod937), "NETWORK", "System.Net.AuthenticationManager.Unregister(IAuthenticationModule)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Unregister(HeatDotNet.MethodInterceptInfo methodIntercept, System.String authenticationScheme)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = authenticationScheme;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod938), "NETWORK", "System.Net.AuthenticationManager.Unregister(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Collections.IEnumerator get_RegisteredModules(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod939), "NETWORK", "System.Net.AuthenticationManager.get_RegisteredModules()", paramObjs, typeof(System.Collections.IEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IEnumerator)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.Authorization")]
	public class HandlerClass129
	{
		// System.Net.Authorization.get_Message
		private static bool CallerMethod940(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Authorization.get_ConnectionGroupId
		private static bool CallerMethod941(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Authorization.get_Complete
		private static bool CallerMethod942(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Authorization.get_ProtectionRealm
		private static bool CallerMethod943(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Authorization.set_ProtectionRealm
		private static bool CallerMethod944(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Authorization..ctor
		private static bool CallerMethod945(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Authorization..ctor
		private static bool CallerMethod946(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Authorization..ctor
		private static bool CallerMethod947(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_Message(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod940), "NETWORK", "System.Net.Authorization.get_Message()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_ConnectionGroupId(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod941), "NETWORK", "System.Net.Authorization.get_ConnectionGroupId()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean get_Complete(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod942), "NETWORK", "System.Net.Authorization.get_Complete()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String[] get_ProtectionRealm(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod943), "NETWORK", "System.Net.Authorization.get_ProtectionRealm()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static void set_ProtectionRealm(HeatDotNet.MethodInterceptInfo methodIntercept, System.String[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod944), "NETWORK", "System.Net.Authorization.set_ProtectionRealm(String[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String token)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = token;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod945), "NETWORK", "System.Net.Authorization.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String token, System.Boolean finished)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = token;
			paramObjs[2] = finished;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod946), "NETWORK", "System.Net.Authorization.ctor(String, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String token, System.Boolean finished, System.String connectionGroupId)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = token;
			paramObjs[2] = finished;
			paramObjs[3] = connectionGroupId;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod947), "NETWORK", "System.Net.Authorization.ctor(String, Boolean, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.Cookie")]
	public class HandlerClass130
	{
		// System.Net.Cookie.GetHashCode
		private static bool CallerMethod948(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.Equals
		private static bool CallerMethod949(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.ToString
		private static bool CallerMethod950(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.get_Comment
		private static bool CallerMethod951(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.set_Comment
		private static bool CallerMethod952(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.get_CommentUri
		private static bool CallerMethod953(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.set_CommentUri
		private static bool CallerMethod954(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.get_Discard
		private static bool CallerMethod955(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.set_Discard
		private static bool CallerMethod956(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.get_Domain
		private static bool CallerMethod957(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.set_Domain
		private static bool CallerMethod958(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.get_Expired
		private static bool CallerMethod959(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.set_Expired
		private static bool CallerMethod960(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.get_Expires
		private static bool CallerMethod961(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.set_Expires
		private static bool CallerMethod962(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.get_Name
		private static bool CallerMethod963(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.set_Name
		private static bool CallerMethod964(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.get_Path
		private static bool CallerMethod965(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.set_Path
		private static bool CallerMethod966(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.get_Port
		private static bool CallerMethod967(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.set_Port
		private static bool CallerMethod968(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.get_Secure
		private static bool CallerMethod969(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.set_Secure
		private static bool CallerMethod970(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.get_TimeStamp
		private static bool CallerMethod971(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.get_Value
		private static bool CallerMethod972(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.set_Value
		private static bool CallerMethod973(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.get_Version
		private static bool CallerMethod974(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie.set_Version
		private static bool CallerMethod975(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie..ctor
		private static bool CallerMethod976(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie..ctor
		private static bool CallerMethod977(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie..ctor
		private static bool CallerMethod978(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Cookie..ctor
		private static bool CallerMethod979(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod948), "NETWORK", "System.Net.Cookie.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object comparand)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = comparand;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod949), "NETWORK", "System.Net.Cookie.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod950), "NETWORK", "System.Net.Cookie.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Comment(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod951), "NETWORK", "System.Net.Cookie.get_Comment()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Comment(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod952), "NETWORK", "System.Net.Cookie.set_Comment(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Uri get_CommentUri(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod953), "NETWORK", "System.Net.Cookie.get_CommentUri()", paramObjs, typeof(System.Uri), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Uri)retValue;
		}

		public static void set_CommentUri(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod954), "NETWORK", "System.Net.Cookie.set_CommentUri(Uri)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_Discard(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod955), "NETWORK", "System.Net.Cookie.get_Discard()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_Discard(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod956), "NETWORK", "System.Net.Cookie.set_Discard(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Domain(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod957), "NETWORK", "System.Net.Cookie.get_Domain()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Domain(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod958), "NETWORK", "System.Net.Cookie.set_Domain(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_Expired(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod959), "NETWORK", "System.Net.Cookie.get_Expired()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_Expired(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod960), "NETWORK", "System.Net.Cookie.set_Expired(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.DateTime get_Expires(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod961), "NETWORK", "System.Net.Cookie.get_Expires()", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static void set_Expires(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod962), "NETWORK", "System.Net.Cookie.set_Expires(DateTime)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod963), "NETWORK", "System.Net.Cookie.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Name(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod964), "NETWORK", "System.Net.Cookie.set_Name(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Path(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod965), "NETWORK", "System.Net.Cookie.get_Path()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Path(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod966), "NETWORK", "System.Net.Cookie.set_Path(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Port(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod967), "NETWORK", "System.Net.Cookie.get_Port()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Port(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod968), "NETWORK", "System.Net.Cookie.set_Port(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_Secure(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod969), "NETWORK", "System.Net.Cookie.get_Secure()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_Secure(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod970), "NETWORK", "System.Net.Cookie.set_Secure(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.DateTime get_TimeStamp(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod971), "NETWORK", "System.Net.Cookie.get_TimeStamp()", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.String get_Value(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod972), "NETWORK", "System.Net.Cookie.get_Value()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Value(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod973), "NETWORK", "System.Net.Cookie.set_Value(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_Version(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod974), "NETWORK", "System.Net.Cookie.get_Version()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_Version(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod975), "NETWORK", "System.Net.Cookie.set_Version(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod976), "NETWORK", "System.Net.Cookie.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String name, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = name;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod977), "NETWORK", "System.Net.Cookie.ctor(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String name, System.String value, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = name;
			paramObjs[2] = value;
			paramObjs[3] = path;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod978), "NETWORK", "System.Net.Cookie.ctor(String, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String name, System.String value, System.String path, System.String domain)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = name;
			paramObjs[2] = value;
			paramObjs[3] = path;
			paramObjs[4] = domain;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod979), "NETWORK", "System.Net.Cookie.ctor(String, String, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.CookieCollection")]
	public class HandlerClass131
	{
		// System.Net.CookieCollection.GetEnumerator
		private static bool CallerMethod980(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieCollection.get_IsSynchronized
		private static bool CallerMethod981(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieCollection.get_SyncRoot
		private static bool CallerMethod982(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieCollection.get_Count
		private static bool CallerMethod983(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieCollection.CopyTo
		private static bool CallerMethod984(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieCollection.get_IsReadOnly
		private static bool CallerMethod985(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieCollection.get_Item
		private static bool CallerMethod986(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieCollection.get_Item
		private static bool CallerMethod987(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieCollection.Add
		private static bool CallerMethod988(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieCollection.Add
		private static bool CallerMethod989(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieCollection..ctor
		private static bool CallerMethod990(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Collections.IEnumerator GetEnumerator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod980), "NETWORK", "System.Net.CookieCollection.GetEnumerator()", paramObjs, typeof(System.Collections.IEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IEnumerator)retValue;
		}

		public static System.Boolean get_IsSynchronized(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod981), "NETWORK", "System.Net.CookieCollection.get_IsSynchronized()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Object get_SyncRoot(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod982), "NETWORK", "System.Net.CookieCollection.get_SyncRoot()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Int32 get_Count(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod983), "NETWORK", "System.Net.CookieCollection.get_Count()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void CopyTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Array array, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod984), "NETWORK", "System.Net.CookieCollection.CopyTo(Array, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_IsReadOnly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod985), "NETWORK", "System.Net.CookieCollection.get_IsReadOnly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Net.Cookie get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod986), "NETWORK", "System.Net.CookieCollection.get_Item(Int32)", paramObjs, typeof(System.Net.Cookie), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.Cookie)retValue;
		}

		public static System.Net.Cookie get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod987), "NETWORK", "System.Net.CookieCollection.get_Item(String)", paramObjs, typeof(System.Net.Cookie), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.Cookie)retValue;
		}

		public static void Add(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.Cookie cookie)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = cookie;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod988), "NETWORK", "System.Net.CookieCollection.Add(Cookie)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Add(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.CookieCollection cookies)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = cookies;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod989), "NETWORK", "System.Net.CookieCollection.Add(CookieCollection)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod990), "NETWORK", "System.Net.CookieCollection.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.CookieContainer")]
	public class HandlerClass132
	{
		// System.Net.CookieContainer.get_Capacity
		private static bool CallerMethod991(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieContainer.set_Capacity
		private static bool CallerMethod992(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieContainer.get_Count
		private static bool CallerMethod993(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieContainer.get_MaxCookieSize
		private static bool CallerMethod994(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieContainer.set_MaxCookieSize
		private static bool CallerMethod995(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieContainer.get_PerDomainCapacity
		private static bool CallerMethod996(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieContainer.set_PerDomainCapacity
		private static bool CallerMethod997(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieContainer.Add
		private static bool CallerMethod998(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieContainer.Add
		private static bool CallerMethod999(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieContainer.Add
		private static bool CallerMethod1000(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieContainer.Add
		private static bool CallerMethod1001(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieContainer.GetCookies
		private static bool CallerMethod1002(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieContainer.GetCookieHeader
		private static bool CallerMethod1003(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieContainer.SetCookies
		private static bool CallerMethod1004(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieContainer..ctor
		private static bool CallerMethod1005(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieContainer..ctor
		private static bool CallerMethod1006(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CookieContainer..ctor
		private static bool CallerMethod1007(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 get_Capacity(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod991), "NETWORK", "System.Net.CookieContainer.get_Capacity()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_Capacity(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod992), "NETWORK", "System.Net.CookieContainer.set_Capacity(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_Count(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod993), "NETWORK", "System.Net.CookieContainer.get_Count()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_MaxCookieSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod994), "NETWORK", "System.Net.CookieContainer.get_MaxCookieSize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_MaxCookieSize(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod995), "NETWORK", "System.Net.CookieContainer.set_MaxCookieSize(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_PerDomainCapacity(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod996), "NETWORK", "System.Net.CookieContainer.get_PerDomainCapacity()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_PerDomainCapacity(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod997), "NETWORK", "System.Net.CookieContainer.set_PerDomainCapacity(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Add(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.Cookie cookie)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = cookie;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod998), "NETWORK", "System.Net.CookieContainer.Add(Cookie)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Add(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.CookieCollection cookies)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = cookies;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod999), "NETWORK", "System.Net.CookieContainer.Add(CookieCollection)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Add(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri uri, System.Net.Cookie cookie)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = uri;
			paramObjs[2] = cookie;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1000), "NETWORK", "System.Net.CookieContainer.Add(Uri, Cookie)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Add(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri uri, System.Net.CookieCollection cookies)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = uri;
			paramObjs[2] = cookies;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1001), "NETWORK", "System.Net.CookieContainer.Add(Uri, CookieCollection)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.CookieCollection GetCookies(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri uri)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = uri;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1002), "NETWORK", "System.Net.CookieContainer.GetCookies(Uri)", paramObjs, typeof(System.Net.CookieCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.CookieCollection)retValue;
		}

		public static System.String GetCookieHeader(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri uri)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = uri;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1003), "NETWORK", "System.Net.CookieContainer.GetCookieHeader(Uri)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void SetCookies(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri uri, System.String cookieHeader)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = uri;
			paramObjs[2] = cookieHeader;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1004), "NETWORK", "System.Net.CookieContainer.SetCookies(Uri, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1005), "NETWORK", "System.Net.CookieContainer.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int32 capacity)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = capacity;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1006), "NETWORK", "System.Net.CookieContainer.ctor(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int32 capacity, System.Int32 perDomainCapacity, System.Int32 maxCookieSize)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = capacity;
			paramObjs[2] = perDomainCapacity;
			paramObjs[3] = maxCookieSize;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1007), "NETWORK", "System.Net.CookieContainer.ctor(Int32, Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.CredentialCache")]
	public class HandlerClass133
	{
		// System.Net.CredentialCache.GetEnumerator
		private static bool CallerMethod1008(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CredentialCache.GetCredential
		private static bool CallerMethod1009(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CredentialCache.Add
		private static bool CallerMethod1010(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CredentialCache.Remove
		private static bool CallerMethod1011(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CredentialCache.get_DefaultCredentials
		private static bool CallerMethod1012(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.CredentialCache..ctor
		private static bool CallerMethod1013(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Collections.IEnumerator GetEnumerator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1008), "NETWORK", "System.Net.CredentialCache.GetEnumerator()", paramObjs, typeof(System.Collections.IEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IEnumerator)retValue;
		}

		public static System.Net.NetworkCredential GetCredential(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri uriPrefix, System.String authType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = uriPrefix;
			paramObjs[2] = authType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1009), "NETWORK", "System.Net.CredentialCache.GetCredential(Uri, String)", paramObjs, typeof(System.Net.NetworkCredential), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.NetworkCredential)retValue;
		}

		public static void Add(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri uriPrefix, System.String authType, System.Net.NetworkCredential cred)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = uriPrefix;
			paramObjs[2] = authType;
			paramObjs[3] = cred;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1010), "NETWORK", "System.Net.CredentialCache.Add(Uri, String, NetworkCredential)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Remove(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri uriPrefix, System.String authType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = uriPrefix;
			paramObjs[2] = authType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1011), "NETWORK", "System.Net.CredentialCache.Remove(Uri, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.ICredentials get_DefaultCredentials(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1012), "NETWORK", "System.Net.CredentialCache.get_DefaultCredentials()", paramObjs, typeof(System.Net.ICredentials), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.ICredentials)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1013), "NETWORK", "System.Net.CredentialCache.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.NetworkCredential")]
	public class HandlerClass134
	{
		// System.Net.NetworkCredential.GetCredential
		private static bool CallerMethod1014(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.NetworkCredential.get_UserName
		private static bool CallerMethod1015(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.NetworkCredential.set_UserName
		private static bool CallerMethod1016(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.NetworkCredential.get_Password
		private static bool CallerMethod1017(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.NetworkCredential.set_Password
		private static bool CallerMethod1018(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.NetworkCredential.get_Domain
		private static bool CallerMethod1019(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.NetworkCredential.set_Domain
		private static bool CallerMethod1020(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.NetworkCredential..ctor
		private static bool CallerMethod1021(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.NetworkCredential..ctor
		private static bool CallerMethod1022(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.NetworkCredential..ctor
		private static bool CallerMethod1023(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Net.NetworkCredential GetCredential(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri uri, System.String authType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = uri;
			paramObjs[2] = authType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1014), "NETWORK", "System.Net.NetworkCredential.GetCredential(Uri, String)", paramObjs, typeof(System.Net.NetworkCredential), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.NetworkCredential)retValue;
		}

		public static System.String get_UserName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1015), "NETWORK", "System.Net.NetworkCredential.get_UserName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_UserName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1016), "NETWORK", "System.Net.NetworkCredential.set_UserName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Password(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1017), "NETWORK", "System.Net.NetworkCredential.get_Password()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Password(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1018), "NETWORK", "System.Net.NetworkCredential.set_Password(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Domain(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1019), "NETWORK", "System.Net.NetworkCredential.get_Domain()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Domain(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1020), "NETWORK", "System.Net.NetworkCredential.set_Domain(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1021), "NETWORK", "System.Net.NetworkCredential.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String userName, System.String password)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = userName;
			paramObjs[2] = password;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1022), "NETWORK", "System.Net.NetworkCredential.ctor(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String userName, System.String password, System.String domain)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = userName;
			paramObjs[2] = password;
			paramObjs[3] = domain;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1023), "NETWORK", "System.Net.NetworkCredential.ctor(String, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.Dns")]
	public class HandlerClass135
	{
		// System.Net.Dns.GetHostByName
		private static bool CallerMethod1024(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Dns.GetHostByAddress
		private static bool CallerMethod1025(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Dns.GetHostByAddress
		private static bool CallerMethod1026(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Dns.GetHostName
		private static bool CallerMethod1027(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Dns.Resolve
		private static bool CallerMethod1028(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Dns.BeginGetHostByName
		private static bool CallerMethod1029(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Dns.EndGetHostByName
		private static bool CallerMethod1030(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Dns.BeginResolve
		private static bool CallerMethod1031(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Dns.EndResolve
		private static bool CallerMethod1032(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Net.IPHostEntry GetHostByName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String hostName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = hostName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1024), "NETWORK", "System.Net.Dns.GetHostByName(String)", paramObjs, typeof(System.Net.IPHostEntry), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.IPHostEntry)retValue;
		}

		public static System.Net.IPHostEntry GetHostByAddress(HeatDotNet.MethodInterceptInfo methodIntercept, System.String address)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = address;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1025), "NETWORK", "System.Net.Dns.GetHostByAddress(String)", paramObjs, typeof(System.Net.IPHostEntry), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.IPHostEntry)retValue;
		}

		public static System.Net.IPHostEntry GetHostByAddress(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.IPAddress address)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = address;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1026), "NETWORK", "System.Net.Dns.GetHostByAddress(IPAddress)", paramObjs, typeof(System.Net.IPHostEntry), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.IPHostEntry)retValue;
		}

		public static System.String GetHostName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1027), "NETWORK", "System.Net.Dns.GetHostName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Net.IPHostEntry Resolve(HeatDotNet.MethodInterceptInfo methodIntercept, System.String hostName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = hostName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1028), "NETWORK", "System.Net.Dns.Resolve(String)", paramObjs, typeof(System.Net.IPHostEntry), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.IPHostEntry)retValue;
		}

		public static System.IAsyncResult BeginGetHostByName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String hostName, System.AsyncCallback requestCallback, System.Object stateObject)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = hostName;
			paramObjs[2] = requestCallback;
			paramObjs[3] = stateObject;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1029), "NETWORK", "System.Net.Dns.BeginGetHostByName(String, AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static System.Net.IPHostEntry EndGetHostByName(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1030), "NETWORK", "System.Net.Dns.EndGetHostByName(IAsyncResult)", paramObjs, typeof(System.Net.IPHostEntry), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.IPHostEntry)retValue;
		}

		public static System.IAsyncResult BeginResolve(HeatDotNet.MethodInterceptInfo methodIntercept, System.String hostName, System.AsyncCallback requestCallback, System.Object stateObject)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = hostName;
			paramObjs[2] = requestCallback;
			paramObjs[3] = stateObject;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1031), "NETWORK", "System.Net.Dns.BeginResolve(String, AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static System.Net.IPHostEntry EndResolve(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1032), "NETWORK", "System.Net.Dns.EndResolve(IAsyncResult)", paramObjs, typeof(System.Net.IPHostEntry), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.IPHostEntry)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.DnsPermissionAttribute")]
	public class HandlerClass136
	{
		// System.Net.DnsPermissionAttribute.CreatePermission
		private static bool CallerMethod1033(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.DnsPermissionAttribute..ctor
		private static bool CallerMethod1034(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Security.IPermission CreatePermission(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1033), "NETWORK", "System.Net.DnsPermissionAttribute.CreatePermission()", paramObjs, typeof(System.Security.IPermission), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.IPermission)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Permissions.SecurityAction action)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = action;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1034), "NETWORK", "System.Net.DnsPermissionAttribute.ctor(SecurityAction)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.DnsPermission")]
	public class HandlerClass137
	{
		// System.Net.DnsPermission.IsUnrestricted
		private static bool CallerMethod1035(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.DnsPermission.FromXml
		private static bool CallerMethod1036(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.DnsPermission.ToXml
		private static bool CallerMethod1037(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.DnsPermission.IsSubsetOf
		private static bool CallerMethod1038(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.DnsPermission.Union
		private static bool CallerMethod1039(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.DnsPermission.Intersect
		private static bool CallerMethod1040(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.DnsPermission.Copy
		private static bool CallerMethod1041(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.DnsPermission..ctor
		private static bool CallerMethod1042(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsUnrestricted(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1035), "NETWORK", "System.Net.DnsPermission.IsUnrestricted()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void FromXml(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.SecurityElement securityElement)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = securityElement;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1036), "NETWORK", "System.Net.DnsPermission.FromXml(SecurityElement)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Security.SecurityElement ToXml(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1037), "NETWORK", "System.Net.DnsPermission.ToXml()", paramObjs, typeof(System.Security.SecurityElement), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.SecurityElement)retValue;
		}

		public static System.Boolean IsSubsetOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.IPermission target)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = target;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1038), "NETWORK", "System.Net.DnsPermission.IsSubsetOf(IPermission)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Security.IPermission Union(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.IPermission target)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = target;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1039), "NETWORK", "System.Net.DnsPermission.Union(IPermission)", paramObjs, typeof(System.Security.IPermission), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.IPermission)retValue;
		}

		public static System.Security.IPermission Intersect(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.IPermission target)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = target;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1040), "NETWORK", "System.Net.DnsPermission.Intersect(IPermission)", paramObjs, typeof(System.Security.IPermission), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.IPermission)retValue;
		}

		public static System.Security.IPermission Copy(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1041), "NETWORK", "System.Net.DnsPermission.Copy()", paramObjs, typeof(System.Security.IPermission), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.IPermission)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Permissions.PermissionState state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = state;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1042), "NETWORK", "System.Net.DnsPermission.ctor(PermissionState)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.EndPoint")]
	public class HandlerClass138
	{
		// System.Net.EndPoint.Create
		private static bool CallerMethod1043(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.EndPoint.Serialize
		private static bool CallerMethod1044(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.EndPoint.get_AddressFamily
		private static bool CallerMethod1045(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Net.EndPoint Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.SocketAddress socketAddress)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = socketAddress;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1043), "NETWORK", "System.Net.EndPoint.Create(SocketAddress)", paramObjs, typeof(System.Net.EndPoint), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.EndPoint)retValue;
		}

		public static System.Net.SocketAddress Serialize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1044), "NETWORK", "System.Net.EndPoint.Serialize()", paramObjs, typeof(System.Net.SocketAddress), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.SocketAddress)retValue;
		}

		public static System.Net.Sockets.AddressFamily get_AddressFamily(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1045), "NETWORK", "System.Net.EndPoint.get_AddressFamily()", paramObjs, typeof(System.Net.Sockets.AddressFamily), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.Sockets.AddressFamily)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.WebRequest")]
	public class HandlerClass139
	{
		// System.Net.WebRequest.Abort
		private static bool CallerMethod1046(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.EndGetRequestStream
		private static bool CallerMethod1047(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.BeginGetRequestStream
		private static bool CallerMethod1048(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.EndGetResponse
		private static bool CallerMethod1049(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.BeginGetResponse
		private static bool CallerMethod1050(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.GetResponse
		private static bool CallerMethod1051(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.GetRequestStream
		private static bool CallerMethod1052(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.set_Timeout
		private static bool CallerMethod1053(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.get_Timeout
		private static bool CallerMethod1054(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.set_PreAuthenticate
		private static bool CallerMethod1055(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.get_PreAuthenticate
		private static bool CallerMethod1056(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.set_Proxy
		private static bool CallerMethod1057(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.get_Proxy
		private static bool CallerMethod1058(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.set_Credentials
		private static bool CallerMethod1059(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.get_Credentials
		private static bool CallerMethod1060(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.set_ContentType
		private static bool CallerMethod1061(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.get_ContentType
		private static bool CallerMethod1062(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.set_ContentLength
		private static bool CallerMethod1063(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.get_ContentLength
		private static bool CallerMethod1064(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.set_Headers
		private static bool CallerMethod1065(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.get_Headers
		private static bool CallerMethod1066(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.set_ConnectionGroupName
		private static bool CallerMethod1067(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.get_ConnectionGroupName
		private static bool CallerMethod1068(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.get_RequestUri
		private static bool CallerMethod1069(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.set_Method
		private static bool CallerMethod1070(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.get_Method
		private static bool CallerMethod1071(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.Create
		private static bool CallerMethod1072(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.Create
		private static bool CallerMethod1073(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.CreateDefault
		private static bool CallerMethod1074(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebRequest.RegisterPrefix
		private static bool CallerMethod1075(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Abort(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1046), "NETWORK", "System.Net.WebRequest.Abort()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IO.Stream EndGetRequestStream(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1047), "NETWORK", "System.Net.WebRequest.EndGetRequestStream(IAsyncResult)", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static System.IAsyncResult BeginGetRequestStream(HeatDotNet.MethodInterceptInfo methodIntercept, System.AsyncCallback callback, System.Object state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = callback;
			paramObjs[2] = state;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1048), "NETWORK", "System.Net.WebRequest.BeginGetRequestStream(AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static System.Net.WebResponse EndGetResponse(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1049), "NETWORK", "System.Net.WebRequest.EndGetResponse(IAsyncResult)", paramObjs, typeof(System.Net.WebResponse), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.WebResponse)retValue;
		}

		public static System.IAsyncResult BeginGetResponse(HeatDotNet.MethodInterceptInfo methodIntercept, System.AsyncCallback callback, System.Object state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = callback;
			paramObjs[2] = state;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1050), "NETWORK", "System.Net.WebRequest.BeginGetResponse(AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static System.Net.WebResponse GetResponse(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1051), "NETWORK", "System.Net.WebRequest.GetResponse()", paramObjs, typeof(System.Net.WebResponse), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.WebResponse)retValue;
		}

		public static System.IO.Stream GetRequestStream(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1052), "NETWORK", "System.Net.WebRequest.GetRequestStream()", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static void set_Timeout(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1053), "NETWORK", "System.Net.WebRequest.set_Timeout(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_Timeout(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1054), "NETWORK", "System.Net.WebRequest.get_Timeout()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_PreAuthenticate(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1055), "NETWORK", "System.Net.WebRequest.set_PreAuthenticate(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_PreAuthenticate(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1056), "NETWORK", "System.Net.WebRequest.get_PreAuthenticate()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_Proxy(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.IWebProxy value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1057), "NETWORK", "System.Net.WebRequest.set_Proxy(IWebProxy)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.IWebProxy get_Proxy(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1058), "NETWORK", "System.Net.WebRequest.get_Proxy()", paramObjs, typeof(System.Net.IWebProxy), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.IWebProxy)retValue;
		}

		public static void set_Credentials(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.ICredentials value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1059), "NETWORK", "System.Net.WebRequest.set_Credentials(ICredentials)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.ICredentials get_Credentials(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1060), "NETWORK", "System.Net.WebRequest.get_Credentials()", paramObjs, typeof(System.Net.ICredentials), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.ICredentials)retValue;
		}

		public static void set_ContentType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1061), "NETWORK", "System.Net.WebRequest.set_ContentType(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_ContentType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1062), "NETWORK", "System.Net.WebRequest.get_ContentType()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_ContentLength(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1063), "NETWORK", "System.Net.WebRequest.set_ContentLength(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int64 get_ContentLength(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1064), "NETWORK", "System.Net.WebRequest.get_ContentLength()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static void set_Headers(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.WebHeaderCollection value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1065), "NETWORK", "System.Net.WebRequest.set_Headers(WebHeaderCollection)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.WebHeaderCollection get_Headers(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1066), "NETWORK", "System.Net.WebRequest.get_Headers()", paramObjs, typeof(System.Net.WebHeaderCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.WebHeaderCollection)retValue;
		}

		public static void set_ConnectionGroupName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1067), "NETWORK", "System.Net.WebRequest.set_ConnectionGroupName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_ConnectionGroupName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1068), "NETWORK", "System.Net.WebRequest.get_ConnectionGroupName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Uri get_RequestUri(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1069), "NETWORK", "System.Net.WebRequest.get_RequestUri()", paramObjs, typeof(System.Uri), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Uri)retValue;
		}

		public static void set_Method(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1070), "NETWORK", "System.Net.WebRequest.set_Method(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Method(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1071), "NETWORK", "System.Net.WebRequest.get_Method()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Net.WebRequest Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.String requestUriString)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = requestUriString;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1072), "NETWORK", "System.Net.WebRequest.Create(String)", paramObjs, typeof(System.Net.WebRequest), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.WebRequest)retValue;
		}

		public static System.Net.WebRequest Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri requestUri)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = requestUri;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1073), "NETWORK", "System.Net.WebRequest.Create(Uri)", paramObjs, typeof(System.Net.WebRequest), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.WebRequest)retValue;
		}

		public static System.Net.WebRequest CreateDefault(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri requestUri)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = requestUri;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1074), "NETWORK", "System.Net.WebRequest.CreateDefault(Uri)", paramObjs, typeof(System.Net.WebRequest), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.WebRequest)retValue;
		}

		public static System.Boolean RegisterPrefix(HeatDotNet.MethodInterceptInfo methodIntercept, System.String prefix, System.Net.IWebRequestCreate creator)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = prefix;
			paramObjs[2] = creator;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1075), "NETWORK", "System.Net.WebRequest.RegisterPrefix(String, IWebRequestCreate)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.FileWebRequest")]
	public class HandlerClass140
	{
		// System.Net.FileWebRequest.EndGetRequestStream
		private static bool CallerMethod1076(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.BeginGetRequestStream
		private static bool CallerMethod1077(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.EndGetResponse
		private static bool CallerMethod1078(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.BeginGetResponse
		private static bool CallerMethod1079(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.GetResponse
		private static bool CallerMethod1080(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.GetRequestStream
		private static bool CallerMethod1081(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.set_Timeout
		private static bool CallerMethod1082(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.get_Timeout
		private static bool CallerMethod1083(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.set_PreAuthenticate
		private static bool CallerMethod1084(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.get_PreAuthenticate
		private static bool CallerMethod1085(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.set_Proxy
		private static bool CallerMethod1086(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.get_Proxy
		private static bool CallerMethod1087(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.set_Credentials
		private static bool CallerMethod1088(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.get_Credentials
		private static bool CallerMethod1089(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.set_ContentType
		private static bool CallerMethod1090(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.get_ContentType
		private static bool CallerMethod1091(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.set_ContentLength
		private static bool CallerMethod1092(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.get_ContentLength
		private static bool CallerMethod1093(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.get_Headers
		private static bool CallerMethod1094(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.set_ConnectionGroupName
		private static bool CallerMethod1095(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.get_ConnectionGroupName
		private static bool CallerMethod1096(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.get_RequestUri
		private static bool CallerMethod1097(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.set_Method
		private static bool CallerMethod1098(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebRequest.get_Method
		private static bool CallerMethod1099(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.IO.Stream EndGetRequestStream(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1076), "NETWORK", "System.Net.FileWebRequest.EndGetRequestStream(IAsyncResult)", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static System.IAsyncResult BeginGetRequestStream(HeatDotNet.MethodInterceptInfo methodIntercept, System.AsyncCallback callback, System.Object state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = callback;
			paramObjs[2] = state;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1077), "NETWORK", "System.Net.FileWebRequest.BeginGetRequestStream(AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static System.Net.WebResponse EndGetResponse(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1078), "NETWORK", "System.Net.FileWebRequest.EndGetResponse(IAsyncResult)", paramObjs, typeof(System.Net.WebResponse), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.WebResponse)retValue;
		}

		public static System.IAsyncResult BeginGetResponse(HeatDotNet.MethodInterceptInfo methodIntercept, System.AsyncCallback callback, System.Object state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = callback;
			paramObjs[2] = state;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1079), "NETWORK", "System.Net.FileWebRequest.BeginGetResponse(AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static System.Net.WebResponse GetResponse(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1080), "NETWORK", "System.Net.FileWebRequest.GetResponse()", paramObjs, typeof(System.Net.WebResponse), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.WebResponse)retValue;
		}

		public static System.IO.Stream GetRequestStream(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1081), "NETWORK", "System.Net.FileWebRequest.GetRequestStream()", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static void set_Timeout(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1082), "NETWORK", "System.Net.FileWebRequest.set_Timeout(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_Timeout(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1083), "NETWORK", "System.Net.FileWebRequest.get_Timeout()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_PreAuthenticate(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1084), "NETWORK", "System.Net.FileWebRequest.set_PreAuthenticate(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_PreAuthenticate(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1085), "NETWORK", "System.Net.FileWebRequest.get_PreAuthenticate()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_Proxy(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.IWebProxy value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1086), "NETWORK", "System.Net.FileWebRequest.set_Proxy(IWebProxy)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.IWebProxy get_Proxy(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1087), "NETWORK", "System.Net.FileWebRequest.get_Proxy()", paramObjs, typeof(System.Net.IWebProxy), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.IWebProxy)retValue;
		}

		public static void set_Credentials(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.ICredentials value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1088), "NETWORK", "System.Net.FileWebRequest.set_Credentials(ICredentials)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.ICredentials get_Credentials(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1089), "NETWORK", "System.Net.FileWebRequest.get_Credentials()", paramObjs, typeof(System.Net.ICredentials), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.ICredentials)retValue;
		}

		public static void set_ContentType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1090), "NETWORK", "System.Net.FileWebRequest.set_ContentType(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_ContentType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1091), "NETWORK", "System.Net.FileWebRequest.get_ContentType()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_ContentLength(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1092), "NETWORK", "System.Net.FileWebRequest.set_ContentLength(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int64 get_ContentLength(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1093), "NETWORK", "System.Net.FileWebRequest.get_ContentLength()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.Net.WebHeaderCollection get_Headers(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1094), "NETWORK", "System.Net.FileWebRequest.get_Headers()", paramObjs, typeof(System.Net.WebHeaderCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.WebHeaderCollection)retValue;
		}

		public static void set_ConnectionGroupName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1095), "NETWORK", "System.Net.FileWebRequest.set_ConnectionGroupName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_ConnectionGroupName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1096), "NETWORK", "System.Net.FileWebRequest.get_ConnectionGroupName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Uri get_RequestUri(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1097), "NETWORK", "System.Net.FileWebRequest.get_RequestUri()", paramObjs, typeof(System.Uri), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Uri)retValue;
		}

		public static void set_Method(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1098), "NETWORK", "System.Net.FileWebRequest.set_Method(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Method(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1099), "NETWORK", "System.Net.FileWebRequest.get_Method()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.WebResponse")]
	public class HandlerClass141
	{
		// System.Net.WebResponse.get_Headers
		private static bool CallerMethod1100(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebResponse.get_ResponseUri
		private static bool CallerMethod1101(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebResponse.GetResponseStream
		private static bool CallerMethod1102(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebResponse.set_ContentType
		private static bool CallerMethod1103(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebResponse.get_ContentType
		private static bool CallerMethod1104(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebResponse.set_ContentLength
		private static bool CallerMethod1105(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebResponse.get_ContentLength
		private static bool CallerMethod1106(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebResponse.Close
		private static bool CallerMethod1107(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Net.WebHeaderCollection get_Headers(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1100), "NETWORK", "System.Net.WebResponse.get_Headers()", paramObjs, typeof(System.Net.WebHeaderCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.WebHeaderCollection)retValue;
		}

		public static System.Uri get_ResponseUri(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1101), "NETWORK", "System.Net.WebResponse.get_ResponseUri()", paramObjs, typeof(System.Uri), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Uri)retValue;
		}

		public static System.IO.Stream GetResponseStream(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1102), "NETWORK", "System.Net.WebResponse.GetResponseStream()", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static void set_ContentType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1103), "NETWORK", "System.Net.WebResponse.set_ContentType(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_ContentType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1104), "NETWORK", "System.Net.WebResponse.get_ContentType()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_ContentLength(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1105), "NETWORK", "System.Net.WebResponse.set_ContentLength(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int64 get_ContentLength(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1106), "NETWORK", "System.Net.WebResponse.get_ContentLength()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1107), "NETWORK", "System.Net.WebResponse.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.FileWebResponse")]
	public class HandlerClass142
	{
		// System.Net.FileWebResponse.get_Headers
		private static bool CallerMethod1108(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebResponse.get_ResponseUri
		private static bool CallerMethod1109(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebResponse.GetResponseStream
		private static bool CallerMethod1110(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebResponse.get_ContentType
		private static bool CallerMethod1111(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebResponse.get_ContentLength
		private static bool CallerMethod1112(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.FileWebResponse.Close
		private static bool CallerMethod1113(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Net.WebHeaderCollection get_Headers(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1108), "NETWORK", "System.Net.FileWebResponse.get_Headers()", paramObjs, typeof(System.Net.WebHeaderCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.WebHeaderCollection)retValue;
		}

		public static System.Uri get_ResponseUri(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1109), "NETWORK", "System.Net.FileWebResponse.get_ResponseUri()", paramObjs, typeof(System.Uri), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Uri)retValue;
		}

		public static System.IO.Stream GetResponseStream(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1110), "NETWORK", "System.Net.FileWebResponse.GetResponseStream()", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static System.String get_ContentType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1111), "NETWORK", "System.Net.FileWebResponse.get_ContentType()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int64 get_ContentLength(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1112), "NETWORK", "System.Net.FileWebResponse.get_ContentLength()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1113), "NETWORK", "System.Net.FileWebResponse.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.GlobalProxySelection")]
	public class HandlerClass143
	{
		// System.Net.GlobalProxySelection.get_Select
		private static bool CallerMethod1114(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.GlobalProxySelection.set_Select
		private static bool CallerMethod1115(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.GlobalProxySelection.GetEmptyWebProxy
		private static bool CallerMethod1116(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.GlobalProxySelection..ctor
		private static bool CallerMethod1117(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Net.IWebProxy get_Select(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1114), "NETWORK", "System.Net.GlobalProxySelection.get_Select()", paramObjs, typeof(System.Net.IWebProxy), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.IWebProxy)retValue;
		}

		public static void set_Select(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.IWebProxy value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1115), "NETWORK", "System.Net.GlobalProxySelection.set_Select(IWebProxy)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.IWebProxy GetEmptyWebProxy(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1116), "NETWORK", "System.Net.GlobalProxySelection.GetEmptyWebProxy()", paramObjs, typeof(System.Net.IWebProxy), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.IWebProxy)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1117), "NETWORK", "System.Net.GlobalProxySelection.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.HttpWebRequest")]
	public class HandlerClass144
	{
		// System.Net.HttpWebRequest.Abort
		private static bool CallerMethod1118(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.EndGetRequestStream
		private static bool CallerMethod1119(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.BeginGetRequestStream
		private static bool CallerMethod1120(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.EndGetResponse
		private static bool CallerMethod1121(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.BeginGetResponse
		private static bool CallerMethod1122(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.GetResponse
		private static bool CallerMethod1123(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.GetRequestStream
		private static bool CallerMethod1124(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_Timeout
		private static bool CallerMethod1125(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_Timeout
		private static bool CallerMethod1126(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_PreAuthenticate
		private static bool CallerMethod1127(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_PreAuthenticate
		private static bool CallerMethod1128(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_Proxy
		private static bool CallerMethod1129(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_Proxy
		private static bool CallerMethod1130(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_Credentials
		private static bool CallerMethod1131(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_Credentials
		private static bool CallerMethod1132(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_ContentType
		private static bool CallerMethod1133(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_ContentType
		private static bool CallerMethod1134(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_ContentLength
		private static bool CallerMethod1135(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_ContentLength
		private static bool CallerMethod1136(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_Headers
		private static bool CallerMethod1137(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_Headers
		private static bool CallerMethod1138(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_ConnectionGroupName
		private static bool CallerMethod1139(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_ConnectionGroupName
		private static bool CallerMethod1140(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_RequestUri
		private static bool CallerMethod1141(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_Method
		private static bool CallerMethod1142(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_Method
		private static bool CallerMethod1143(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.GetHashCode
		private static bool CallerMethod1144(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_MaximumResponseHeadersLength
		private static bool CallerMethod1145(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_MaximumResponseHeadersLength
		private static bool CallerMethod1146(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_CookieContainer
		private static bool CallerMethod1147(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_CookieContainer
		private static bool CallerMethod1148(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_UnsafeAuthenticatedConnectionSharing
		private static bool CallerMethod1149(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_UnsafeAuthenticatedConnectionSharing
		private static bool CallerMethod1150(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_AllowWriteStreamBuffering
		private static bool CallerMethod1151(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_AllowWriteStreamBuffering
		private static bool CallerMethod1152(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_ReadWriteTimeout
		private static bool CallerMethod1153(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_ReadWriteTimeout
		private static bool CallerMethod1154(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_ClientCertificates
		private static bool CallerMethod1155(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_Address
		private static bool CallerMethod1156(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_ContinueDelegate
		private static bool CallerMethod1157(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_ContinueDelegate
		private static bool CallerMethod1158(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_ServicePoint
		private static bool CallerMethod1159(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_AllowAutoRedirect
		private static bool CallerMethod1160(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_AllowAutoRedirect
		private static bool CallerMethod1161(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_MaximumAutomaticRedirections
		private static bool CallerMethod1162(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_MaximumAutomaticRedirections
		private static bool CallerMethod1163(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_KeepAlive
		private static bool CallerMethod1164(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_KeepAlive
		private static bool CallerMethod1165(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_Pipelined
		private static bool CallerMethod1166(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_Pipelined
		private static bool CallerMethod1167(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_SendChunked
		private static bool CallerMethod1168(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_SendChunked
		private static bool CallerMethod1169(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_ProtocolVersion
		private static bool CallerMethod1170(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_ProtocolVersion
		private static bool CallerMethod1171(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_MediaType
		private static bool CallerMethod1172(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_MediaType
		private static bool CallerMethod1173(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_TransferEncoding
		private static bool CallerMethod1174(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_TransferEncoding
		private static bool CallerMethod1175(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_Connection
		private static bool CallerMethod1176(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_Connection
		private static bool CallerMethod1177(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_Accept
		private static bool CallerMethod1178(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_Accept
		private static bool CallerMethod1179(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_Referer
		private static bool CallerMethod1180(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_Referer
		private static bool CallerMethod1181(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_UserAgent
		private static bool CallerMethod1182(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_UserAgent
		private static bool CallerMethod1183(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_Expect
		private static bool CallerMethod1184(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_Expect
		private static bool CallerMethod1185(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_IfModifiedSince
		private static bool CallerMethod1186(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_IfModifiedSince
		private static bool CallerMethod1187(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_HaveResponse
		private static bool CallerMethod1188(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.AddRange
		private static bool CallerMethod1189(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.AddRange
		private static bool CallerMethod1190(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.AddRange
		private static bool CallerMethod1191(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.AddRange
		private static bool CallerMethod1192(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.get_DefaultMaximumResponseHeadersLength
		private static bool CallerMethod1193(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebRequest.set_DefaultMaximumResponseHeadersLength
		private static bool CallerMethod1194(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Abort(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1118), "NETWORK", "System.Net.HttpWebRequest.Abort()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IO.Stream EndGetRequestStream(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1119), "NETWORK", "System.Net.HttpWebRequest.EndGetRequestStream(IAsyncResult)", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static System.IAsyncResult BeginGetRequestStream(HeatDotNet.MethodInterceptInfo methodIntercept, System.AsyncCallback callback, System.Object state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = callback;
			paramObjs[2] = state;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1120), "NETWORK", "System.Net.HttpWebRequest.BeginGetRequestStream(AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static System.Net.WebResponse EndGetResponse(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1121), "NETWORK", "System.Net.HttpWebRequest.EndGetResponse(IAsyncResult)", paramObjs, typeof(System.Net.WebResponse), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.WebResponse)retValue;
		}

		public static System.IAsyncResult BeginGetResponse(HeatDotNet.MethodInterceptInfo methodIntercept, System.AsyncCallback callback, System.Object state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = callback;
			paramObjs[2] = state;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1122), "NETWORK", "System.Net.HttpWebRequest.BeginGetResponse(AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static System.Net.WebResponse GetResponse(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1123), "NETWORK", "System.Net.HttpWebRequest.GetResponse()", paramObjs, typeof(System.Net.WebResponse), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.WebResponse)retValue;
		}

		public static System.IO.Stream GetRequestStream(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1124), "NETWORK", "System.Net.HttpWebRequest.GetRequestStream()", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static void set_Timeout(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1125), "NETWORK", "System.Net.HttpWebRequest.set_Timeout(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_Timeout(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1126), "NETWORK", "System.Net.HttpWebRequest.get_Timeout()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_PreAuthenticate(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1127), "NETWORK", "System.Net.HttpWebRequest.set_PreAuthenticate(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_PreAuthenticate(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1128), "NETWORK", "System.Net.HttpWebRequest.get_PreAuthenticate()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_Proxy(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.IWebProxy value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1129), "NETWORK", "System.Net.HttpWebRequest.set_Proxy(IWebProxy)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.IWebProxy get_Proxy(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1130), "NETWORK", "System.Net.HttpWebRequest.get_Proxy()", paramObjs, typeof(System.Net.IWebProxy), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.IWebProxy)retValue;
		}

		public static void set_Credentials(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.ICredentials value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1131), "NETWORK", "System.Net.HttpWebRequest.set_Credentials(ICredentials)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.ICredentials get_Credentials(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1132), "NETWORK", "System.Net.HttpWebRequest.get_Credentials()", paramObjs, typeof(System.Net.ICredentials), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.ICredentials)retValue;
		}

		public static void set_ContentType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1133), "NETWORK", "System.Net.HttpWebRequest.set_ContentType(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_ContentType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1134), "NETWORK", "System.Net.HttpWebRequest.get_ContentType()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_ContentLength(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1135), "NETWORK", "System.Net.HttpWebRequest.set_ContentLength(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int64 get_ContentLength(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1136), "NETWORK", "System.Net.HttpWebRequest.get_ContentLength()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static void set_Headers(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.WebHeaderCollection value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1137), "NETWORK", "System.Net.HttpWebRequest.set_Headers(WebHeaderCollection)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.WebHeaderCollection get_Headers(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1138), "NETWORK", "System.Net.HttpWebRequest.get_Headers()", paramObjs, typeof(System.Net.WebHeaderCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.WebHeaderCollection)retValue;
		}

		public static void set_ConnectionGroupName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1139), "NETWORK", "System.Net.HttpWebRequest.set_ConnectionGroupName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_ConnectionGroupName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1140), "NETWORK", "System.Net.HttpWebRequest.get_ConnectionGroupName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Uri get_RequestUri(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1141), "NETWORK", "System.Net.HttpWebRequest.get_RequestUri()", paramObjs, typeof(System.Uri), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Uri)retValue;
		}

		public static void set_Method(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1142), "NETWORK", "System.Net.HttpWebRequest.set_Method(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Method(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1143), "NETWORK", "System.Net.HttpWebRequest.get_Method()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1144), "NETWORK", "System.Net.HttpWebRequest.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_MaximumResponseHeadersLength(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1145), "NETWORK", "System.Net.HttpWebRequest.get_MaximumResponseHeadersLength()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_MaximumResponseHeadersLength(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1146), "NETWORK", "System.Net.HttpWebRequest.set_MaximumResponseHeadersLength(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.CookieContainer get_CookieContainer(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1147), "NETWORK", "System.Net.HttpWebRequest.get_CookieContainer()", paramObjs, typeof(System.Net.CookieContainer), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.CookieContainer)retValue;
		}

		public static void set_CookieContainer(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.CookieContainer value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1148), "NETWORK", "System.Net.HttpWebRequest.set_CookieContainer(CookieContainer)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_UnsafeAuthenticatedConnectionSharing(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1149), "NETWORK", "System.Net.HttpWebRequest.get_UnsafeAuthenticatedConnectionSharing()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_UnsafeAuthenticatedConnectionSharing(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1150), "NETWORK", "System.Net.HttpWebRequest.set_UnsafeAuthenticatedConnectionSharing(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_AllowWriteStreamBuffering(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1151), "NETWORK", "System.Net.HttpWebRequest.get_AllowWriteStreamBuffering()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_AllowWriteStreamBuffering(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1152), "NETWORK", "System.Net.HttpWebRequest.set_AllowWriteStreamBuffering(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_ReadWriteTimeout(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1153), "NETWORK", "System.Net.HttpWebRequest.get_ReadWriteTimeout()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_ReadWriteTimeout(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1154), "NETWORK", "System.Net.HttpWebRequest.set_ReadWriteTimeout(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Security.Cryptography.X509Certificates.X509CertificateCollection get_ClientCertificates(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1155), "NETWORK", "System.Net.HttpWebRequest.get_ClientCertificates()", paramObjs, typeof(System.Security.Cryptography.X509Certificates.X509CertificateCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.X509Certificates.X509CertificateCollection)retValue;
		}

		public static System.Uri get_Address(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1156), "NETWORK", "System.Net.HttpWebRequest.get_Address()", paramObjs, typeof(System.Uri), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Uri)retValue;
		}

		public static System.Net.HttpContinueDelegate get_ContinueDelegate(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1157), "NETWORK", "System.Net.HttpWebRequest.get_ContinueDelegate()", paramObjs, typeof(System.Net.HttpContinueDelegate), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.HttpContinueDelegate)retValue;
		}

		public static void set_ContinueDelegate(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.HttpContinueDelegate value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1158), "NETWORK", "System.Net.HttpWebRequest.set_ContinueDelegate(HttpContinueDelegate)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.ServicePoint get_ServicePoint(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1159), "NETWORK", "System.Net.HttpWebRequest.get_ServicePoint()", paramObjs, typeof(System.Net.ServicePoint), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.ServicePoint)retValue;
		}

		public static System.Boolean get_AllowAutoRedirect(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1160), "NETWORK", "System.Net.HttpWebRequest.get_AllowAutoRedirect()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_AllowAutoRedirect(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1161), "NETWORK", "System.Net.HttpWebRequest.set_AllowAutoRedirect(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_MaximumAutomaticRedirections(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1162), "NETWORK", "System.Net.HttpWebRequest.get_MaximumAutomaticRedirections()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_MaximumAutomaticRedirections(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1163), "NETWORK", "System.Net.HttpWebRequest.set_MaximumAutomaticRedirections(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_KeepAlive(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1164), "NETWORK", "System.Net.HttpWebRequest.get_KeepAlive()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_KeepAlive(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1165), "NETWORK", "System.Net.HttpWebRequest.set_KeepAlive(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_Pipelined(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1166), "NETWORK", "System.Net.HttpWebRequest.get_Pipelined()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_Pipelined(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1167), "NETWORK", "System.Net.HttpWebRequest.set_Pipelined(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_SendChunked(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1168), "NETWORK", "System.Net.HttpWebRequest.get_SendChunked()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_SendChunked(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1169), "NETWORK", "System.Net.HttpWebRequest.set_SendChunked(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Version get_ProtocolVersion(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1170), "NETWORK", "System.Net.HttpWebRequest.get_ProtocolVersion()", paramObjs, typeof(System.Version), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Version)retValue;
		}

		public static void set_ProtocolVersion(HeatDotNet.MethodInterceptInfo methodIntercept, System.Version value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1171), "NETWORK", "System.Net.HttpWebRequest.set_ProtocolVersion(Version)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_MediaType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1172), "NETWORK", "System.Net.HttpWebRequest.get_MediaType()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_MediaType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1173), "NETWORK", "System.Net.HttpWebRequest.set_MediaType(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_TransferEncoding(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1174), "NETWORK", "System.Net.HttpWebRequest.get_TransferEncoding()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_TransferEncoding(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1175), "NETWORK", "System.Net.HttpWebRequest.set_TransferEncoding(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Connection(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1176), "NETWORK", "System.Net.HttpWebRequest.get_Connection()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Connection(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1177), "NETWORK", "System.Net.HttpWebRequest.set_Connection(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Accept(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1178), "NETWORK", "System.Net.HttpWebRequest.get_Accept()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Accept(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1179), "NETWORK", "System.Net.HttpWebRequest.set_Accept(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Referer(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1180), "NETWORK", "System.Net.HttpWebRequest.get_Referer()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Referer(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1181), "NETWORK", "System.Net.HttpWebRequest.set_Referer(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_UserAgent(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1182), "NETWORK", "System.Net.HttpWebRequest.get_UserAgent()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_UserAgent(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1183), "NETWORK", "System.Net.HttpWebRequest.set_UserAgent(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Expect(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1184), "NETWORK", "System.Net.HttpWebRequest.get_Expect()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Expect(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1185), "NETWORK", "System.Net.HttpWebRequest.set_Expect(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.DateTime get_IfModifiedSince(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1186), "NETWORK", "System.Net.HttpWebRequest.get_IfModifiedSince()", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static void set_IfModifiedSince(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1187), "NETWORK", "System.Net.HttpWebRequest.set_IfModifiedSince(DateTime)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_HaveResponse(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1188), "NETWORK", "System.Net.HttpWebRequest.get_HaveResponse()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void AddRange(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 from, System.Int32 to)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = from;
			paramObjs[2] = to;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1189), "NETWORK", "System.Net.HttpWebRequest.AddRange(Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddRange(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 range)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = range;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1190), "NETWORK", "System.Net.HttpWebRequest.AddRange(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddRange(HeatDotNet.MethodInterceptInfo methodIntercept, System.String rangeSpecifier, System.Int32 from, System.Int32 to)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rangeSpecifier;
			paramObjs[2] = from;
			paramObjs[3] = to;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1191), "NETWORK", "System.Net.HttpWebRequest.AddRange(String, Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddRange(HeatDotNet.MethodInterceptInfo methodIntercept, System.String rangeSpecifier, System.Int32 range)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rangeSpecifier;
			paramObjs[2] = range;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1192), "NETWORK", "System.Net.HttpWebRequest.AddRange(String, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_DefaultMaximumResponseHeadersLength(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1193), "NETWORK", "System.Net.HttpWebRequest.get_DefaultMaximumResponseHeadersLength()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_DefaultMaximumResponseHeadersLength(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1194), "NETWORK", "System.Net.HttpWebRequest.set_DefaultMaximumResponseHeadersLength(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.HttpVersion")]
	public class HandlerClass145
	{
		// System.Net.HttpVersion..ctor
		private static bool CallerMethod1195(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1195), "NETWORK", "System.Net.HttpVersion.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.HttpWebResponse")]
	public class HandlerClass146
	{
		// System.Net.HttpWebResponse.get_Headers
		private static bool CallerMethod1196(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebResponse.get_ResponseUri
		private static bool CallerMethod1197(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebResponse.GetResponseStream
		private static bool CallerMethod1198(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebResponse.get_ContentType
		private static bool CallerMethod1199(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebResponse.get_ContentLength
		private static bool CallerMethod1200(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebResponse.Close
		private static bool CallerMethod1201(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebResponse.GetHashCode
		private static bool CallerMethod1202(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebResponse.get_Cookies
		private static bool CallerMethod1203(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebResponse.set_Cookies
		private static bool CallerMethod1204(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebResponse.get_ContentEncoding
		private static bool CallerMethod1205(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebResponse.get_CharacterSet
		private static bool CallerMethod1206(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebResponse.get_Server
		private static bool CallerMethod1207(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebResponse.get_LastModified
		private static bool CallerMethod1208(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebResponse.get_StatusCode
		private static bool CallerMethod1209(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebResponse.get_StatusDescription
		private static bool CallerMethod1210(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebResponse.get_ProtocolVersion
		private static bool CallerMethod1211(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebResponse.GetResponseHeader
		private static bool CallerMethod1212(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.HttpWebResponse.get_Method
		private static bool CallerMethod1213(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Net.WebHeaderCollection get_Headers(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1196), "NETWORK", "System.Net.HttpWebResponse.get_Headers()", paramObjs, typeof(System.Net.WebHeaderCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.WebHeaderCollection)retValue;
		}

		public static System.Uri get_ResponseUri(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1197), "NETWORK", "System.Net.HttpWebResponse.get_ResponseUri()", paramObjs, typeof(System.Uri), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Uri)retValue;
		}

		public static System.IO.Stream GetResponseStream(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1198), "NETWORK", "System.Net.HttpWebResponse.GetResponseStream()", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static System.String get_ContentType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1199), "NETWORK", "System.Net.HttpWebResponse.get_ContentType()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int64 get_ContentLength(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1200), "NETWORK", "System.Net.HttpWebResponse.get_ContentLength()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1201), "NETWORK", "System.Net.HttpWebResponse.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1202), "NETWORK", "System.Net.HttpWebResponse.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Net.CookieCollection get_Cookies(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1203), "NETWORK", "System.Net.HttpWebResponse.get_Cookies()", paramObjs, typeof(System.Net.CookieCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.CookieCollection)retValue;
		}

		public static void set_Cookies(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.CookieCollection value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1204), "NETWORK", "System.Net.HttpWebResponse.set_Cookies(CookieCollection)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_ContentEncoding(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1205), "NETWORK", "System.Net.HttpWebResponse.get_ContentEncoding()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_CharacterSet(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1206), "NETWORK", "System.Net.HttpWebResponse.get_CharacterSet()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Server(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1207), "NETWORK", "System.Net.HttpWebResponse.get_Server()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.DateTime get_LastModified(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1208), "NETWORK", "System.Net.HttpWebResponse.get_LastModified()", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.Net.HttpStatusCode get_StatusCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1209), "NETWORK", "System.Net.HttpWebResponse.get_StatusCode()", paramObjs, typeof(System.Net.HttpStatusCode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.HttpStatusCode)retValue;
		}

		public static System.String get_StatusDescription(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1210), "NETWORK", "System.Net.HttpWebResponse.get_StatusDescription()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Version get_ProtocolVersion(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1211), "NETWORK", "System.Net.HttpWebResponse.get_ProtocolVersion()", paramObjs, typeof(System.Version), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Version)retValue;
		}

		public static System.String GetResponseHeader(HeatDotNet.MethodInterceptInfo methodIntercept, System.String headerName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = headerName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1212), "NETWORK", "System.Net.HttpWebResponse.GetResponseHeader(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Method(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1213), "NETWORK", "System.Net.HttpWebResponse.get_Method()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.IPAddress")]
	public class HandlerClass147
	{
		// System.Net.IPAddress.GetHashCode
		private static bool CallerMethod1214(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPAddress.Equals
		private static bool CallerMethod1215(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPAddress.ToString
		private static bool CallerMethod1216(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPAddress.get_Address
		private static bool CallerMethod1217(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPAddress.set_Address
		private static bool CallerMethod1218(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPAddress.GetAddressBytes
		private static bool CallerMethod1219(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPAddress.get_AddressFamily
		private static bool CallerMethod1220(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPAddress.get_ScopeId
		private static bool CallerMethod1221(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPAddress.set_ScopeId
		private static bool CallerMethod1222(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPAddress.Parse
		private static bool CallerMethod1223(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPAddress.HostToNetworkOrder
		private static bool CallerMethod1224(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPAddress.HostToNetworkOrder
		private static bool CallerMethod1225(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPAddress.HostToNetworkOrder
		private static bool CallerMethod1226(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPAddress.NetworkToHostOrder
		private static bool CallerMethod1227(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPAddress.NetworkToHostOrder
		private static bool CallerMethod1228(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPAddress.NetworkToHostOrder
		private static bool CallerMethod1229(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPAddress.IsLoopback
		private static bool CallerMethod1230(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPAddress..ctor
		private static bool CallerMethod1231(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPAddress..ctor
		private static bool CallerMethod1232(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPAddress..ctor
		private static bool CallerMethod1233(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1214), "NETWORK", "System.Net.IPAddress.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object comparand)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = comparand;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1215), "NETWORK", "System.Net.IPAddress.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1216), "NETWORK", "System.Net.IPAddress.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int64 get_Address(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1217), "NETWORK", "System.Net.IPAddress.get_Address()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static void set_Address(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1218), "NETWORK", "System.Net.IPAddress.set_Address(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Byte[] GetAddressBytes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1219), "NETWORK", "System.Net.IPAddress.GetAddressBytes()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Net.Sockets.AddressFamily get_AddressFamily(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1220), "NETWORK", "System.Net.IPAddress.get_AddressFamily()", paramObjs, typeof(System.Net.Sockets.AddressFamily), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.Sockets.AddressFamily)retValue;
		}

		public static System.Int64 get_ScopeId(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1221), "NETWORK", "System.Net.IPAddress.get_ScopeId()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static void set_ScopeId(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1222), "NETWORK", "System.Net.IPAddress.set_ScopeId(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.IPAddress Parse(HeatDotNet.MethodInterceptInfo methodIntercept, System.String ipString)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = ipString;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1223), "NETWORK", "System.Net.IPAddress.Parse(String)", paramObjs, typeof(System.Net.IPAddress), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.IPAddress)retValue;
		}

		public static System.Int64 HostToNetworkOrder(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 host)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = host;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1224), "NETWORK", "System.Net.IPAddress.HostToNetworkOrder(Int64)", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.Int32 HostToNetworkOrder(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 host)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = host;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1225), "NETWORK", "System.Net.IPAddress.HostToNetworkOrder(Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int16 HostToNetworkOrder(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int16 host)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = host;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1226), "NETWORK", "System.Net.IPAddress.HostToNetworkOrder(Int16)", paramObjs, typeof(System.Int16), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int16)retValue;
		}

		public static System.Int64 NetworkToHostOrder(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 network)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = network;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1227), "NETWORK", "System.Net.IPAddress.NetworkToHostOrder(Int64)", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.Int32 NetworkToHostOrder(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 network)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = network;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1228), "NETWORK", "System.Net.IPAddress.NetworkToHostOrder(Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int16 NetworkToHostOrder(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int16 network)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = network;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1229), "NETWORK", "System.Net.IPAddress.NetworkToHostOrder(Int16)", paramObjs, typeof(System.Int16), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int16)retValue;
		}

		public static System.Boolean IsLoopback(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.IPAddress address)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = address;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1230), "NETWORK", "System.Net.IPAddress.IsLoopback(IPAddress)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int64 newAddress)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = newAddress;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1231), "NETWORK", "System.Net.IPAddress.ctor(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Byte[] address, System.Int64 scopeid)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = address;
			paramObjs[2] = scopeid;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1232), "NETWORK", "System.Net.IPAddress.ctor(Byte[], Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Byte[] address)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = address;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1233), "NETWORK", "System.Net.IPAddress.ctor(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.IPEndPoint")]
	public class HandlerClass148
	{
		// System.Net.IPEndPoint.Create
		private static bool CallerMethod1234(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPEndPoint.Serialize
		private static bool CallerMethod1235(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPEndPoint.get_AddressFamily
		private static bool CallerMethod1236(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPEndPoint.GetHashCode
		private static bool CallerMethod1237(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPEndPoint.Equals
		private static bool CallerMethod1238(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPEndPoint.ToString
		private static bool CallerMethod1239(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPEndPoint.get_Address
		private static bool CallerMethod1240(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPEndPoint.set_Address
		private static bool CallerMethod1241(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPEndPoint.get_Port
		private static bool CallerMethod1242(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPEndPoint.set_Port
		private static bool CallerMethod1243(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPEndPoint..ctor
		private static bool CallerMethod1244(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPEndPoint..ctor
		private static bool CallerMethod1245(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Net.EndPoint Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.SocketAddress socketAddress)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = socketAddress;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1234), "NETWORK", "System.Net.IPEndPoint.Create(SocketAddress)", paramObjs, typeof(System.Net.EndPoint), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.EndPoint)retValue;
		}

		public static System.Net.SocketAddress Serialize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1235), "NETWORK", "System.Net.IPEndPoint.Serialize()", paramObjs, typeof(System.Net.SocketAddress), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.SocketAddress)retValue;
		}

		public static System.Net.Sockets.AddressFamily get_AddressFamily(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1236), "NETWORK", "System.Net.IPEndPoint.get_AddressFamily()", paramObjs, typeof(System.Net.Sockets.AddressFamily), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.Sockets.AddressFamily)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1237), "NETWORK", "System.Net.IPEndPoint.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object comparand)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = comparand;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1238), "NETWORK", "System.Net.IPEndPoint.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1239), "NETWORK", "System.Net.IPEndPoint.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Net.IPAddress get_Address(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1240), "NETWORK", "System.Net.IPEndPoint.get_Address()", paramObjs, typeof(System.Net.IPAddress), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.IPAddress)retValue;
		}

		public static void set_Address(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.IPAddress value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1241), "NETWORK", "System.Net.IPEndPoint.set_Address(IPAddress)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_Port(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1242), "NETWORK", "System.Net.IPEndPoint.get_Port()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_Port(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1243), "NETWORK", "System.Net.IPEndPoint.set_Port(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int64 address, System.Int32 port)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = address;
			paramObjs[2] = port;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1244), "NETWORK", "System.Net.IPEndPoint.ctor(Int64, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Net.IPAddress address, System.Int32 port)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = address;
			paramObjs[2] = port;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1245), "NETWORK", "System.Net.IPEndPoint.ctor(IPAddress, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.IPHostEntry")]
	public class HandlerClass149
	{
		// System.Net.IPHostEntry.get_HostName
		private static bool CallerMethod1246(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPHostEntry.set_HostName
		private static bool CallerMethod1247(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPHostEntry.get_Aliases
		private static bool CallerMethod1248(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPHostEntry.set_Aliases
		private static bool CallerMethod1249(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPHostEntry.get_AddressList
		private static bool CallerMethod1250(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPHostEntry.set_AddressList
		private static bool CallerMethod1251(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.IPHostEntry..ctor
		private static bool CallerMethod1252(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_HostName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1246), "NETWORK", "System.Net.IPHostEntry.get_HostName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_HostName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1247), "NETWORK", "System.Net.IPHostEntry.set_HostName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String[] get_Aliases(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1248), "NETWORK", "System.Net.IPHostEntry.get_Aliases()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static void set_Aliases(HeatDotNet.MethodInterceptInfo methodIntercept, System.String[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1249), "NETWORK", "System.Net.IPHostEntry.set_Aliases(String[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.IPAddress[] get_AddressList(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1250), "NETWORK", "System.Net.IPHostEntry.get_AddressList()", paramObjs, typeof(System.Net.IPAddress[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.IPAddress[])retValue;
		}

		public static void set_AddressList(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.IPAddress[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1251), "NETWORK", "System.Net.IPHostEntry.set_AddressList(IPAddress[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1252), "NETWORK", "System.Net.IPHostEntry.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.ServicePoint")]
	public class HandlerClass150
	{
		// System.Net.ServicePoint.get_ProtocolVersion
		private static bool CallerMethod1253(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePoint.GetHashCode
		private static bool CallerMethod1254(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePoint.get_Address
		private static bool CallerMethod1255(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePoint.get_MaxIdleTime
		private static bool CallerMethod1256(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePoint.set_MaxIdleTime
		private static bool CallerMethod1257(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePoint.get_UseNagleAlgorithm
		private static bool CallerMethod1258(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePoint.set_UseNagleAlgorithm
		private static bool CallerMethod1259(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePoint.set_Expect100Continue
		private static bool CallerMethod1260(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePoint.get_Expect100Continue
		private static bool CallerMethod1261(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePoint.get_IdleSince
		private static bool CallerMethod1262(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePoint.get_ConnectionName
		private static bool CallerMethod1263(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePoint.get_ConnectionLimit
		private static bool CallerMethod1264(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePoint.set_ConnectionLimit
		private static bool CallerMethod1265(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePoint.get_CurrentConnections
		private static bool CallerMethod1266(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePoint.get_Certificate
		private static bool CallerMethod1267(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePoint.get_ClientCertificate
		private static bool CallerMethod1268(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePoint.get_SupportsPipelining
		private static bool CallerMethod1269(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Version get_ProtocolVersion(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1253), "NETWORK", "System.Net.ServicePoint.get_ProtocolVersion()", paramObjs, typeof(System.Version), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Version)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1254), "NETWORK", "System.Net.ServicePoint.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Uri get_Address(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1255), "NETWORK", "System.Net.ServicePoint.get_Address()", paramObjs, typeof(System.Uri), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Uri)retValue;
		}

		public static System.Int32 get_MaxIdleTime(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1256), "NETWORK", "System.Net.ServicePoint.get_MaxIdleTime()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_MaxIdleTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1257), "NETWORK", "System.Net.ServicePoint.set_MaxIdleTime(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_UseNagleAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1258), "NETWORK", "System.Net.ServicePoint.get_UseNagleAlgorithm()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_UseNagleAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1259), "NETWORK", "System.Net.ServicePoint.set_UseNagleAlgorithm(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_Expect100Continue(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1260), "NETWORK", "System.Net.ServicePoint.set_Expect100Continue(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_Expect100Continue(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1261), "NETWORK", "System.Net.ServicePoint.get_Expect100Continue()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.DateTime get_IdleSince(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1262), "NETWORK", "System.Net.ServicePoint.get_IdleSince()", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.String get_ConnectionName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1263), "NETWORK", "System.Net.ServicePoint.get_ConnectionName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_ConnectionLimit(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1264), "NETWORK", "System.Net.ServicePoint.get_ConnectionLimit()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_ConnectionLimit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1265), "NETWORK", "System.Net.ServicePoint.set_ConnectionLimit(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_CurrentConnections(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1266), "NETWORK", "System.Net.ServicePoint.get_CurrentConnections()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Security.Cryptography.X509Certificates.X509Certificate get_Certificate(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1267), "NETWORK", "System.Net.ServicePoint.get_Certificate()", paramObjs, typeof(System.Security.Cryptography.X509Certificates.X509Certificate), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.X509Certificates.X509Certificate)retValue;
		}

		public static System.Security.Cryptography.X509Certificates.X509Certificate get_ClientCertificate(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1268), "NETWORK", "System.Net.ServicePoint.get_ClientCertificate()", paramObjs, typeof(System.Security.Cryptography.X509Certificates.X509Certificate), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.X509Certificates.X509Certificate)retValue;
		}

		public static System.Boolean get_SupportsPipelining(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1269), "NETWORK", "System.Net.ServicePoint.get_SupportsPipelining()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.ServicePointManager")]
	public class HandlerClass151
	{
		// System.Net.ServicePointManager.get_SecurityProtocol
		private static bool CallerMethod1270(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePointManager.set_SecurityProtocol
		private static bool CallerMethod1271(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePointManager.get_MaxServicePoints
		private static bool CallerMethod1272(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePointManager.set_MaxServicePoints
		private static bool CallerMethod1273(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePointManager.get_DefaultConnectionLimit
		private static bool CallerMethod1274(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePointManager.set_DefaultConnectionLimit
		private static bool CallerMethod1275(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePointManager.get_MaxServicePointIdleTime
		private static bool CallerMethod1276(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePointManager.set_MaxServicePointIdleTime
		private static bool CallerMethod1277(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePointManager.get_UseNagleAlgorithm
		private static bool CallerMethod1278(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePointManager.set_UseNagleAlgorithm
		private static bool CallerMethod1279(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePointManager.get_Expect100Continue
		private static bool CallerMethod1280(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePointManager.set_Expect100Continue
		private static bool CallerMethod1281(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePointManager.get_CertificatePolicy
		private static bool CallerMethod1282(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePointManager.set_CertificatePolicy
		private static bool CallerMethod1283(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePointManager.get_CheckCertificateRevocationList
		private static bool CallerMethod1284(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePointManager.set_CheckCertificateRevocationList
		private static bool CallerMethod1285(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePointManager.FindServicePoint
		private static bool CallerMethod1286(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePointManager.FindServicePoint
		private static bool CallerMethod1287(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.ServicePointManager.FindServicePoint
		private static bool CallerMethod1288(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Net.SecurityProtocolType get_SecurityProtocol(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1270), "NETWORK", "System.Net.ServicePointManager.get_SecurityProtocol()", paramObjs, typeof(System.Net.SecurityProtocolType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.SecurityProtocolType)retValue;
		}

		public static void set_SecurityProtocol(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.SecurityProtocolType value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1271), "NETWORK", "System.Net.ServicePointManager.set_SecurityProtocol(SecurityProtocolType)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_MaxServicePoints(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1272), "NETWORK", "System.Net.ServicePointManager.get_MaxServicePoints()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_MaxServicePoints(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1273), "NETWORK", "System.Net.ServicePointManager.set_MaxServicePoints(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_DefaultConnectionLimit(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1274), "NETWORK", "System.Net.ServicePointManager.get_DefaultConnectionLimit()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_DefaultConnectionLimit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1275), "NETWORK", "System.Net.ServicePointManager.set_DefaultConnectionLimit(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_MaxServicePointIdleTime(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1276), "NETWORK", "System.Net.ServicePointManager.get_MaxServicePointIdleTime()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_MaxServicePointIdleTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1277), "NETWORK", "System.Net.ServicePointManager.set_MaxServicePointIdleTime(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_UseNagleAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1278), "NETWORK", "System.Net.ServicePointManager.get_UseNagleAlgorithm()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_UseNagleAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1279), "NETWORK", "System.Net.ServicePointManager.set_UseNagleAlgorithm(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_Expect100Continue(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1280), "NETWORK", "System.Net.ServicePointManager.get_Expect100Continue()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_Expect100Continue(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1281), "NETWORK", "System.Net.ServicePointManager.set_Expect100Continue(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.ICertificatePolicy get_CertificatePolicy(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1282), "NETWORK", "System.Net.ServicePointManager.get_CertificatePolicy()", paramObjs, typeof(System.Net.ICertificatePolicy), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.ICertificatePolicy)retValue;
		}

		public static void set_CertificatePolicy(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.ICertificatePolicy value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1283), "NETWORK", "System.Net.ServicePointManager.set_CertificatePolicy(ICertificatePolicy)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_CheckCertificateRevocationList(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1284), "NETWORK", "System.Net.ServicePointManager.get_CheckCertificateRevocationList()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_CheckCertificateRevocationList(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1285), "NETWORK", "System.Net.ServicePointManager.set_CheckCertificateRevocationList(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.ServicePoint FindServicePoint(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri address)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = address;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1286), "NETWORK", "System.Net.ServicePointManager.FindServicePoint(Uri)", paramObjs, typeof(System.Net.ServicePoint), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.ServicePoint)retValue;
		}

		public static System.Net.ServicePoint FindServicePoint(HeatDotNet.MethodInterceptInfo methodIntercept, System.String uriString, System.Net.IWebProxy proxy)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = uriString;
			paramObjs[2] = proxy;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1287), "NETWORK", "System.Net.ServicePointManager.FindServicePoint(String, IWebProxy)", paramObjs, typeof(System.Net.ServicePoint), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.ServicePoint)retValue;
		}

		public static System.Net.ServicePoint FindServicePoint(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri address, System.Net.IWebProxy proxy)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = address;
			paramObjs[2] = proxy;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1288), "NETWORK", "System.Net.ServicePointManager.FindServicePoint(Uri, IWebProxy)", paramObjs, typeof(System.Net.ServicePoint), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.ServicePoint)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.SocketAddress")]
	public class HandlerClass152
	{
		// System.Net.SocketAddress.GetHashCode
		private static bool CallerMethod1289(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketAddress.Equals
		private static bool CallerMethod1290(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketAddress.ToString
		private static bool CallerMethod1291(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketAddress.get_Family
		private static bool CallerMethod1292(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketAddress.get_Size
		private static bool CallerMethod1293(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketAddress.get_Item
		private static bool CallerMethod1294(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketAddress.set_Item
		private static bool CallerMethod1295(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketAddress..ctor
		private static bool CallerMethod1296(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketAddress..ctor
		private static bool CallerMethod1297(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1289), "NETWORK", "System.Net.SocketAddress.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object comparand)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = comparand;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1290), "NETWORK", "System.Net.SocketAddress.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1291), "NETWORK", "System.Net.SocketAddress.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Net.Sockets.AddressFamily get_Family(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1292), "NETWORK", "System.Net.SocketAddress.get_Family()", paramObjs, typeof(System.Net.Sockets.AddressFamily), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.Sockets.AddressFamily)retValue;
		}

		public static System.Int32 get_Size(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1293), "NETWORK", "System.Net.SocketAddress.get_Size()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Byte get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 offset)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = offset;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1294), "NETWORK", "System.Net.SocketAddress.get_Item(Int32)", paramObjs, typeof(System.Byte), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte)retValue;
		}

		public static void set_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 offset, System.Byte value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = offset;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1295), "NETWORK", "System.Net.SocketAddress.set_Item(Int32, Byte)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Net.Sockets.AddressFamily family)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = family;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1296), "NETWORK", "System.Net.SocketAddress.ctor(AddressFamily)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Net.Sockets.AddressFamily family, System.Int32 size)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = family;
			paramObjs[2] = size;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1297), "NETWORK", "System.Net.SocketAddress.ctor(AddressFamily, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.SocketPermissionAttribute")]
	public class HandlerClass153
	{
		// System.Net.SocketPermissionAttribute.CreatePermission
		private static bool CallerMethod1298(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketPermissionAttribute.get_Access
		private static bool CallerMethod1299(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketPermissionAttribute.set_Access
		private static bool CallerMethod1300(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketPermissionAttribute.get_Host
		private static bool CallerMethod1301(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketPermissionAttribute.set_Host
		private static bool CallerMethod1302(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketPermissionAttribute.get_Transport
		private static bool CallerMethod1303(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketPermissionAttribute.set_Transport
		private static bool CallerMethod1304(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketPermissionAttribute.get_Port
		private static bool CallerMethod1305(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketPermissionAttribute.set_Port
		private static bool CallerMethod1306(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketPermissionAttribute..ctor
		private static bool CallerMethod1307(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Security.IPermission CreatePermission(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1298), "NETWORK", "System.Net.SocketPermissionAttribute.CreatePermission()", paramObjs, typeof(System.Security.IPermission), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.IPermission)retValue;
		}

		public static System.String get_Access(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1299), "NETWORK", "System.Net.SocketPermissionAttribute.get_Access()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Access(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1300), "NETWORK", "System.Net.SocketPermissionAttribute.set_Access(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Host(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1301), "NETWORK", "System.Net.SocketPermissionAttribute.get_Host()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Host(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1302), "NETWORK", "System.Net.SocketPermissionAttribute.set_Host(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Transport(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1303), "NETWORK", "System.Net.SocketPermissionAttribute.get_Transport()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Transport(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1304), "NETWORK", "System.Net.SocketPermissionAttribute.set_Transport(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Port(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1305), "NETWORK", "System.Net.SocketPermissionAttribute.get_Port()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Port(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1306), "NETWORK", "System.Net.SocketPermissionAttribute.set_Port(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Permissions.SecurityAction action)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = action;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1307), "NETWORK", "System.Net.SocketPermissionAttribute.ctor(SecurityAction)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.SocketPermission")]
	public class HandlerClass154
	{
		// System.Net.SocketPermission.IsUnrestricted
		private static bool CallerMethod1308(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketPermission.FromXml
		private static bool CallerMethod1309(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketPermission.ToXml
		private static bool CallerMethod1310(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketPermission.IsSubsetOf
		private static bool CallerMethod1311(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketPermission.Union
		private static bool CallerMethod1312(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketPermission.Intersect
		private static bool CallerMethod1313(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketPermission.Copy
		private static bool CallerMethod1314(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketPermission.get_ConnectList
		private static bool CallerMethod1315(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketPermission.get_AcceptList
		private static bool CallerMethod1316(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketPermission.AddPermission
		private static bool CallerMethod1317(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketPermission..ctor
		private static bool CallerMethod1318(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.SocketPermission..ctor
		private static bool CallerMethod1319(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsUnrestricted(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1308), "NETWORK", "System.Net.SocketPermission.IsUnrestricted()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void FromXml(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.SecurityElement securityElement)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = securityElement;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1309), "NETWORK", "System.Net.SocketPermission.FromXml(SecurityElement)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Security.SecurityElement ToXml(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1310), "NETWORK", "System.Net.SocketPermission.ToXml()", paramObjs, typeof(System.Security.SecurityElement), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.SecurityElement)retValue;
		}

		public static System.Boolean IsSubsetOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.IPermission target)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = target;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1311), "NETWORK", "System.Net.SocketPermission.IsSubsetOf(IPermission)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Security.IPermission Union(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.IPermission target)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = target;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1312), "NETWORK", "System.Net.SocketPermission.Union(IPermission)", paramObjs, typeof(System.Security.IPermission), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.IPermission)retValue;
		}

		public static System.Security.IPermission Intersect(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.IPermission target)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = target;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1313), "NETWORK", "System.Net.SocketPermission.Intersect(IPermission)", paramObjs, typeof(System.Security.IPermission), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.IPermission)retValue;
		}

		public static System.Security.IPermission Copy(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1314), "NETWORK", "System.Net.SocketPermission.Copy()", paramObjs, typeof(System.Security.IPermission), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.IPermission)retValue;
		}

		public static System.Collections.IEnumerator get_ConnectList(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1315), "NETWORK", "System.Net.SocketPermission.get_ConnectList()", paramObjs, typeof(System.Collections.IEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IEnumerator)retValue;
		}

		public static System.Collections.IEnumerator get_AcceptList(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1316), "NETWORK", "System.Net.SocketPermission.get_AcceptList()", paramObjs, typeof(System.Collections.IEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IEnumerator)retValue;
		}

		public static void AddPermission(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.NetworkAccess access, System.Net.TransportType transport, System.String hostName, System.Int32 portNumber)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = access;
			paramObjs[2] = transport;
			paramObjs[3] = hostName;
			paramObjs[4] = portNumber;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1317), "NETWORK", "System.Net.SocketPermission.AddPermission(NetworkAccess, TransportType, String, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Permissions.PermissionState state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = state;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1318), "NETWORK", "System.Net.SocketPermission.ctor(PermissionState)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Net.NetworkAccess access, System.Net.TransportType transport, System.String hostName, System.Int32 portNumber)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = access;
			paramObjs[2] = transport;
			paramObjs[3] = hostName;
			paramObjs[4] = portNumber;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1319), "NETWORK", "System.Net.SocketPermission.ctor(NetworkAccess, TransportType, String, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.EndpointPermission")]
	public class HandlerClass155
	{
		// System.Net.EndpointPermission.GetHashCode
		private static bool CallerMethod1320(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.EndpointPermission.Equals
		private static bool CallerMethod1321(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.EndpointPermission.ToString
		private static bool CallerMethod1322(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.EndpointPermission.get_Hostname
		private static bool CallerMethod1323(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.EndpointPermission.get_Transport
		private static bool CallerMethod1324(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.EndpointPermission.get_Port
		private static bool CallerMethod1325(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1320), "NETWORK", "System.Net.EndpointPermission.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1321), "NETWORK", "System.Net.EndpointPermission.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1322), "NETWORK", "System.Net.EndpointPermission.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Hostname(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1323), "NETWORK", "System.Net.EndpointPermission.get_Hostname()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Net.TransportType get_Transport(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1324), "NETWORK", "System.Net.EndpointPermission.get_Transport()", paramObjs, typeof(System.Net.TransportType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.TransportType)retValue;
		}

		public static System.Int32 get_Port(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1325), "NETWORK", "System.Net.EndpointPermission.get_Port()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.WebClient")]
	public class HandlerClass156
	{
		// System.Net.WebClient.get_BaseAddress
		private static bool CallerMethod1326(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebClient.set_BaseAddress
		private static bool CallerMethod1327(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebClient.get_Credentials
		private static bool CallerMethod1328(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebClient.set_Credentials
		private static bool CallerMethod1329(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebClient.get_Headers
		private static bool CallerMethod1330(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebClient.set_Headers
		private static bool CallerMethod1331(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebClient.get_QueryString
		private static bool CallerMethod1332(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebClient.set_QueryString
		private static bool CallerMethod1333(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebClient.get_ResponseHeaders
		private static bool CallerMethod1334(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebClient.DownloadData
		private static bool CallerMethod1335(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebClient.DownloadFile
		private static bool CallerMethod1336(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebClient.OpenRead
		private static bool CallerMethod1337(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebClient.OpenWrite
		private static bool CallerMethod1338(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebClient.OpenWrite
		private static bool CallerMethod1339(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebClient.UploadData
		private static bool CallerMethod1340(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebClient.UploadData
		private static bool CallerMethod1341(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebClient.UploadFile
		private static bool CallerMethod1342(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebClient.UploadFile
		private static bool CallerMethod1343(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebClient.UploadValues
		private static bool CallerMethod1344(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebClient.UploadValues
		private static bool CallerMethod1345(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebClient..ctor
		private static bool CallerMethod1346(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_BaseAddress(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1326), "NETWORK", "System.Net.WebClient.get_BaseAddress()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_BaseAddress(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1327), "NETWORK", "System.Net.WebClient.set_BaseAddress(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.ICredentials get_Credentials(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1328), "NETWORK", "System.Net.WebClient.get_Credentials()", paramObjs, typeof(System.Net.ICredentials), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.ICredentials)retValue;
		}

		public static void set_Credentials(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.ICredentials value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1329), "NETWORK", "System.Net.WebClient.set_Credentials(ICredentials)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.WebHeaderCollection get_Headers(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1330), "NETWORK", "System.Net.WebClient.get_Headers()", paramObjs, typeof(System.Net.WebHeaderCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.WebHeaderCollection)retValue;
		}

		public static void set_Headers(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.WebHeaderCollection value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1331), "NETWORK", "System.Net.WebClient.set_Headers(WebHeaderCollection)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Collections.Specialized.NameValueCollection get_QueryString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1332), "NETWORK", "System.Net.WebClient.get_QueryString()", paramObjs, typeof(System.Collections.Specialized.NameValueCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.Specialized.NameValueCollection)retValue;
		}

		public static void set_QueryString(HeatDotNet.MethodInterceptInfo methodIntercept, System.Collections.Specialized.NameValueCollection value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1333), "NETWORK", "System.Net.WebClient.set_QueryString(NameValueCollection)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.WebHeaderCollection get_ResponseHeaders(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1334), "NETWORK", "System.Net.WebClient.get_ResponseHeaders()", paramObjs, typeof(System.Net.WebHeaderCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.WebHeaderCollection)retValue;
		}

		public static System.Byte[] DownloadData(HeatDotNet.MethodInterceptInfo methodIntercept, System.String address)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = address;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1335), "NETWORK", "System.Net.WebClient.DownloadData(String)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void DownloadFile(HeatDotNet.MethodInterceptInfo methodIntercept, System.String address, System.String fileName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = address;
			paramObjs[2] = fileName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1336), "NETWORK", "System.Net.WebClient.DownloadFile(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IO.Stream OpenRead(HeatDotNet.MethodInterceptInfo methodIntercept, System.String address)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = address;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1337), "NETWORK", "System.Net.WebClient.OpenRead(String)", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static System.IO.Stream OpenWrite(HeatDotNet.MethodInterceptInfo methodIntercept, System.String address)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = address;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1338), "NETWORK", "System.Net.WebClient.OpenWrite(String)", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static System.IO.Stream OpenWrite(HeatDotNet.MethodInterceptInfo methodIntercept, System.String address, System.String method)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = address;
			paramObjs[2] = method;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1339), "NETWORK", "System.Net.WebClient.OpenWrite(String, String)", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static System.Byte[] UploadData(HeatDotNet.MethodInterceptInfo methodIntercept, System.String address, System.Byte[] data)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = address;
			paramObjs[2] = data;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1340), "NETWORK", "System.Net.WebClient.UploadData(String, Byte[])", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Byte[] UploadData(HeatDotNet.MethodInterceptInfo methodIntercept, System.String address, System.String method, System.Byte[] data)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = address;
			paramObjs[2] = method;
			paramObjs[3] = data;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1341), "NETWORK", "System.Net.WebClient.UploadData(String, String, Byte[])", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Byte[] UploadFile(HeatDotNet.MethodInterceptInfo methodIntercept, System.String address, System.String fileName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = address;
			paramObjs[2] = fileName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1342), "NETWORK", "System.Net.WebClient.UploadFile(String, String)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Byte[] UploadFile(HeatDotNet.MethodInterceptInfo methodIntercept, System.String address, System.String method, System.String fileName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = address;
			paramObjs[2] = method;
			paramObjs[3] = fileName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1343), "NETWORK", "System.Net.WebClient.UploadFile(String, String, String)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Byte[] UploadValues(HeatDotNet.MethodInterceptInfo methodIntercept, System.String address, System.Collections.Specialized.NameValueCollection data)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = address;
			paramObjs[2] = data;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1344), "NETWORK", "System.Net.WebClient.UploadValues(String, NameValueCollection)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Byte[] UploadValues(HeatDotNet.MethodInterceptInfo methodIntercept, System.String address, System.String method, System.Collections.Specialized.NameValueCollection data)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = address;
			paramObjs[2] = method;
			paramObjs[3] = data;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1345), "NETWORK", "System.Net.WebClient.UploadValues(String, String, NameValueCollection)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1346), "NETWORK", "System.Net.WebClient.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.WebHeaderCollection")]
	public class HandlerClass157
	{
		// System.Net.WebHeaderCollection.Remove
		private static bool CallerMethod1347(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebHeaderCollection.Set
		private static bool CallerMethod1348(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebHeaderCollection.GetValues
		private static bool CallerMethod1349(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebHeaderCollection.Add
		private static bool CallerMethod1350(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebHeaderCollection.OnDeserialization
		private static bool CallerMethod1351(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebHeaderCollection.ToString
		private static bool CallerMethod1352(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebHeaderCollection.Add
		private static bool CallerMethod1353(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebHeaderCollection.ToByteArray
		private static bool CallerMethod1354(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebHeaderCollection.IsRestricted
		private static bool CallerMethod1355(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebHeaderCollection..ctor
		private static bool CallerMethod1356(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Remove(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1347), "NETWORK", "System.Net.WebHeaderCollection.Remove(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Set(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1348), "NETWORK", "System.Net.WebHeaderCollection.Set(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String[] GetValues(HeatDotNet.MethodInterceptInfo methodIntercept, System.String header)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = header;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1349), "NETWORK", "System.Net.WebHeaderCollection.GetValues(String)", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static void Add(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1350), "NETWORK", "System.Net.WebHeaderCollection.Add(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void OnDeserialization(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object sender)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = sender;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1351), "NETWORK", "System.Net.WebHeaderCollection.OnDeserialization(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1352), "NETWORK", "System.Net.WebHeaderCollection.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void Add(HeatDotNet.MethodInterceptInfo methodIntercept, System.String header)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = header;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1353), "NETWORK", "System.Net.WebHeaderCollection.Add(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Byte[] ToByteArray(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1354), "NETWORK", "System.Net.WebHeaderCollection.ToByteArray()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Boolean IsRestricted(HeatDotNet.MethodInterceptInfo methodIntercept, System.String headerName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = headerName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1355), "NETWORK", "System.Net.WebHeaderCollection.IsRestricted(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1356), "NETWORK", "System.Net.WebHeaderCollection.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.WebPermissionAttribute")]
	public class HandlerClass158
	{
		// System.Net.WebPermissionAttribute.CreatePermission
		private static bool CallerMethod1357(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermissionAttribute.get_Connect
		private static bool CallerMethod1358(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermissionAttribute.set_Connect
		private static bool CallerMethod1359(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermissionAttribute.get_Accept
		private static bool CallerMethod1360(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermissionAttribute.set_Accept
		private static bool CallerMethod1361(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermissionAttribute.get_ConnectPattern
		private static bool CallerMethod1362(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermissionAttribute.set_ConnectPattern
		private static bool CallerMethod1363(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermissionAttribute.get_AcceptPattern
		private static bool CallerMethod1364(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermissionAttribute.set_AcceptPattern
		private static bool CallerMethod1365(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermissionAttribute..ctor
		private static bool CallerMethod1366(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Security.IPermission CreatePermission(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1357), "NETWORK", "System.Net.WebPermissionAttribute.CreatePermission()", paramObjs, typeof(System.Security.IPermission), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.IPermission)retValue;
		}

		public static System.String get_Connect(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1358), "NETWORK", "System.Net.WebPermissionAttribute.get_Connect()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Connect(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1359), "NETWORK", "System.Net.WebPermissionAttribute.set_Connect(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Accept(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1360), "NETWORK", "System.Net.WebPermissionAttribute.get_Accept()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Accept(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1361), "NETWORK", "System.Net.WebPermissionAttribute.set_Accept(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_ConnectPattern(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1362), "NETWORK", "System.Net.WebPermissionAttribute.get_ConnectPattern()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_ConnectPattern(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1363), "NETWORK", "System.Net.WebPermissionAttribute.set_ConnectPattern(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_AcceptPattern(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1364), "NETWORK", "System.Net.WebPermissionAttribute.get_AcceptPattern()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_AcceptPattern(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1365), "NETWORK", "System.Net.WebPermissionAttribute.set_AcceptPattern(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Permissions.SecurityAction action)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = action;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1366), "NETWORK", "System.Net.WebPermissionAttribute.ctor(SecurityAction)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.WebPermission")]
	public class HandlerClass159
	{
		// System.Net.WebPermission.IsUnrestricted
		private static bool CallerMethod1367(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermission.FromXml
		private static bool CallerMethod1368(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermission.ToXml
		private static bool CallerMethod1369(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermission.IsSubsetOf
		private static bool CallerMethod1370(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermission.Union
		private static bool CallerMethod1371(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermission.Intersect
		private static bool CallerMethod1372(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermission.Copy
		private static bool CallerMethod1373(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermission.get_ConnectList
		private static bool CallerMethod1374(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermission.get_AcceptList
		private static bool CallerMethod1375(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermission.AddPermission
		private static bool CallerMethod1376(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermission.AddPermission
		private static bool CallerMethod1377(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermission..ctor
		private static bool CallerMethod1378(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermission..ctor
		private static bool CallerMethod1379(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermission..ctor
		private static bool CallerMethod1380(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebPermission..ctor
		private static bool CallerMethod1381(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsUnrestricted(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1367), "NETWORK", "System.Net.WebPermission.IsUnrestricted()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void FromXml(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.SecurityElement securityElement)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = securityElement;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1368), "NETWORK", "System.Net.WebPermission.FromXml(SecurityElement)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Security.SecurityElement ToXml(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1369), "NETWORK", "System.Net.WebPermission.ToXml()", paramObjs, typeof(System.Security.SecurityElement), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.SecurityElement)retValue;
		}

		public static System.Boolean IsSubsetOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.IPermission target)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = target;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1370), "NETWORK", "System.Net.WebPermission.IsSubsetOf(IPermission)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Security.IPermission Union(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.IPermission target)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = target;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1371), "NETWORK", "System.Net.WebPermission.Union(IPermission)", paramObjs, typeof(System.Security.IPermission), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.IPermission)retValue;
		}

		public static System.Security.IPermission Intersect(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.IPermission target)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = target;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1372), "NETWORK", "System.Net.WebPermission.Intersect(IPermission)", paramObjs, typeof(System.Security.IPermission), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.IPermission)retValue;
		}

		public static System.Security.IPermission Copy(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1373), "NETWORK", "System.Net.WebPermission.Copy()", paramObjs, typeof(System.Security.IPermission), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.IPermission)retValue;
		}

		public static System.Collections.IEnumerator get_ConnectList(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1374), "NETWORK", "System.Net.WebPermission.get_ConnectList()", paramObjs, typeof(System.Collections.IEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IEnumerator)retValue;
		}

		public static System.Collections.IEnumerator get_AcceptList(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1375), "NETWORK", "System.Net.WebPermission.get_AcceptList()", paramObjs, typeof(System.Collections.IEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IEnumerator)retValue;
		}

		public static void AddPermission(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.NetworkAccess access, System.String uriString)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = access;
			paramObjs[2] = uriString;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1376), "NETWORK", "System.Net.WebPermission.AddPermission(NetworkAccess, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddPermission(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.NetworkAccess access, System.Text.RegularExpressions.Regex uriRegex)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = access;
			paramObjs[2] = uriRegex;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1377), "NETWORK", "System.Net.WebPermission.AddPermission(NetworkAccess, Regex)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Permissions.PermissionState state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = state;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1378), "NETWORK", "System.Net.WebPermission.ctor(PermissionState)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1379), "NETWORK", "System.Net.WebPermission.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Net.NetworkAccess access, System.Text.RegularExpressions.Regex uriRegex)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = access;
			paramObjs[2] = uriRegex;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1380), "NETWORK", "System.Net.WebPermission.ctor(NetworkAccess, Regex)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Net.NetworkAccess access, System.String uriString)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = access;
			paramObjs[2] = uriString;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1381), "NETWORK", "System.Net.WebPermission.ctor(NetworkAccess, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.WebProxy")]
	public class HandlerClass160
	{
		// System.Net.WebProxy.set_Credentials
		private static bool CallerMethod1382(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebProxy.get_Credentials
		private static bool CallerMethod1383(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebProxy.IsBypassed
		private static bool CallerMethod1384(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebProxy.GetProxy
		private static bool CallerMethod1385(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebProxy.get_Address
		private static bool CallerMethod1386(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebProxy.set_Address
		private static bool CallerMethod1387(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebProxy.get_BypassProxyOnLocal
		private static bool CallerMethod1388(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebProxy.set_BypassProxyOnLocal
		private static bool CallerMethod1389(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebProxy.get_BypassList
		private static bool CallerMethod1390(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebProxy.set_BypassList
		private static bool CallerMethod1391(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebProxy.get_BypassArrayList
		private static bool CallerMethod1392(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebProxy.GetDefaultProxy
		private static bool CallerMethod1393(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebProxy..ctor
		private static bool CallerMethod1394(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebProxy..ctor
		private static bool CallerMethod1395(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebProxy..ctor
		private static bool CallerMethod1396(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebProxy..ctor
		private static bool CallerMethod1397(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebProxy..ctor
		private static bool CallerMethod1398(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebProxy..ctor
		private static bool CallerMethod1399(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebProxy..ctor
		private static bool CallerMethod1400(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebProxy..ctor
		private static bool CallerMethod1401(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebProxy..ctor
		private static bool CallerMethod1402(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.WebProxy..ctor
		private static bool CallerMethod1403(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void set_Credentials(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.ICredentials value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1382), "NETWORK", "System.Net.WebProxy.set_Credentials(ICredentials)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.ICredentials get_Credentials(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1383), "NETWORK", "System.Net.WebProxy.get_Credentials()", paramObjs, typeof(System.Net.ICredentials), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.ICredentials)retValue;
		}

		public static System.Boolean IsBypassed(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri host)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = host;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1384), "NETWORK", "System.Net.WebProxy.IsBypassed(Uri)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Uri GetProxy(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri destination)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = destination;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1385), "NETWORK", "System.Net.WebProxy.GetProxy(Uri)", paramObjs, typeof(System.Uri), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Uri)retValue;
		}

		public static System.Uri get_Address(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1386), "NETWORK", "System.Net.WebProxy.get_Address()", paramObjs, typeof(System.Uri), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Uri)retValue;
		}

		public static void set_Address(HeatDotNet.MethodInterceptInfo methodIntercept, System.Uri value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1387), "NETWORK", "System.Net.WebProxy.set_Address(Uri)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_BypassProxyOnLocal(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1388), "NETWORK", "System.Net.WebProxy.get_BypassProxyOnLocal()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_BypassProxyOnLocal(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1389), "NETWORK", "System.Net.WebProxy.set_BypassProxyOnLocal(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String[] get_BypassList(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1390), "NETWORK", "System.Net.WebProxy.get_BypassList()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static void set_BypassList(HeatDotNet.MethodInterceptInfo methodIntercept, System.String[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1391), "NETWORK", "System.Net.WebProxy.set_BypassList(String[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Collections.ArrayList get_BypassArrayList(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1392), "NETWORK", "System.Net.WebProxy.get_BypassArrayList()", paramObjs, typeof(System.Collections.ArrayList), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.ArrayList)retValue;
		}

		public static System.Net.WebProxy GetDefaultProxy(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1393), "NETWORK", "System.Net.WebProxy.GetDefaultProxy()", paramObjs, typeof(System.Net.WebProxy), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.WebProxy)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1394), "NETWORK", "System.Net.WebProxy.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Uri Address)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = Address;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1395), "NETWORK", "System.Net.WebProxy.ctor(Uri)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Uri Address, System.Boolean BypassOnLocal)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = Address;
			paramObjs[2] = BypassOnLocal;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1396), "NETWORK", "System.Net.WebProxy.ctor(Uri, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Uri Address, System.Boolean BypassOnLocal, System.String[] BypassList)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = Address;
			paramObjs[2] = BypassOnLocal;
			paramObjs[3] = BypassList;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1397), "NETWORK", "System.Net.WebProxy.ctor(Uri, Boolean, String[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Uri Address, System.Boolean BypassOnLocal, System.String[] BypassList, System.Net.ICredentials Credentials)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = Address;
			paramObjs[2] = BypassOnLocal;
			paramObjs[3] = BypassList;
			paramObjs[4] = Credentials;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1398), "NETWORK", "System.Net.WebProxy.ctor(Uri, Boolean, String[], ICredentials)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String Host, System.Int32 Port)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = Host;
			paramObjs[2] = Port;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1399), "NETWORK", "System.Net.WebProxy.ctor(String, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String Address)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = Address;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1400), "NETWORK", "System.Net.WebProxy.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String Address, System.Boolean BypassOnLocal)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = Address;
			paramObjs[2] = BypassOnLocal;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1401), "NETWORK", "System.Net.WebProxy.ctor(String, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String Address, System.Boolean BypassOnLocal, System.String[] BypassList)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = Address;
			paramObjs[2] = BypassOnLocal;
			paramObjs[3] = BypassList;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1402), "NETWORK", "System.Net.WebProxy.ctor(String, Boolean, String[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String Address, System.Boolean BypassOnLocal, System.String[] BypassList, System.Net.ICredentials Credentials)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = Address;
			paramObjs[2] = BypassOnLocal;
			paramObjs[3] = BypassList;
			paramObjs[4] = Credentials;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1403), "NETWORK", "System.Net.WebProxy.ctor(String, Boolean, String[], ICredentials)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.X509Certificates.X509CertificateCollection")]
	public class HandlerClass161
	{
		// System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetHashCode
		private static bool CallerMethod1404(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509CertificateCollection.get_Item
		private static bool CallerMethod1405(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509CertificateCollection.set_Item
		private static bool CallerMethod1406(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509CertificateCollection.Add
		private static bool CallerMethod1407(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange
		private static bool CallerMethod1408(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange
		private static bool CallerMethod1409(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509CertificateCollection.Contains
		private static bool CallerMethod1410(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509CertificateCollection.CopyTo
		private static bool CallerMethod1411(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509CertificateCollection.IndexOf
		private static bool CallerMethod1412(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509CertificateCollection.Insert
		private static bool CallerMethod1413(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetEnumerator
		private static bool CallerMethod1414(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509CertificateCollection.Remove
		private static bool CallerMethod1415(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509CertificateCollection..ctor
		private static bool CallerMethod1416(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509CertificateCollection..ctor
		private static bool CallerMethod1417(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509CertificateCollection..ctor
		private static bool CallerMethod1418(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1404), "SECURITY", "System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Security.Cryptography.X509Certificates.X509Certificate get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1405), "SECURITY", "System.Security.Cryptography.X509Certificates.X509CertificateCollection.get_Item(Int32)", paramObjs, typeof(System.Security.Cryptography.X509Certificates.X509Certificate), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.X509Certificates.X509Certificate)retValue;
		}

		public static void set_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index, System.Security.Cryptography.X509Certificates.X509Certificate value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1406), "SECURITY", "System.Security.Cryptography.X509Certificates.X509CertificateCollection.set_Item(Int32, X509Certificate)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 Add(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.X509Certificates.X509Certificate value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1407), "SECURITY", "System.Security.Cryptography.X509Certificates.X509CertificateCollection.Add(X509Certificate)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void AddRange(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.X509Certificates.X509Certificate[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1408), "SECURITY", "System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange(X509Certificate[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddRange(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.X509Certificates.X509CertificateCollection value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1409), "SECURITY", "System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange(X509CertificateCollection)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean Contains(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.X509Certificates.X509Certificate value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1410), "SECURITY", "System.Security.Cryptography.X509Certificates.X509CertificateCollection.Contains(X509Certificate)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void CopyTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.X509Certificates.X509Certificate[] array, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1411), "SECURITY", "System.Security.Cryptography.X509Certificates.X509CertificateCollection.CopyTo(X509Certificate[], Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.X509Certificates.X509Certificate value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1412), "SECURITY", "System.Security.Cryptography.X509Certificates.X509CertificateCollection.IndexOf(X509Certificate)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Insert(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index, System.Security.Cryptography.X509Certificates.X509Certificate value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1413), "SECURITY", "System.Security.Cryptography.X509Certificates.X509CertificateCollection.Insert(Int32, X509Certificate)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator GetEnumerator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1414), "SECURITY", "System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetEnumerator()", paramObjs, typeof(System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator)retValue;
		}

		public static void Remove(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.X509Certificates.X509Certificate value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1415), "SECURITY", "System.Security.Cryptography.X509Certificates.X509CertificateCollection.Remove(X509Certificate)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1416), "SECURITY", "System.Security.Cryptography.X509Certificates.X509CertificateCollection.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Cryptography.X509Certificates.X509CertificateCollection value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1417), "SECURITY", "System.Security.Cryptography.X509Certificates.X509CertificateCollection.ctor(X509CertificateCollection)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Cryptography.X509Certificates.X509Certificate[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1418), "SECURITY", "System.Security.Cryptography.X509Certificates.X509CertificateCollection.ctor(X509Certificate[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.Sockets.NetworkStream")]
	public class HandlerClass162
	{
		// System.Net.Sockets.NetworkStream.get_DataAvailable
		private static bool CallerMethod1419(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.NetworkStream.Write
		private static bool CallerMethod1420(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.NetworkStream.Read
		private static bool CallerMethod1421(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.NetworkStream.SetLength
		private static bool CallerMethod1422(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.NetworkStream.Seek
		private static bool CallerMethod1423(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.NetworkStream.EndWrite
		private static bool CallerMethod1424(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.NetworkStream.BeginWrite
		private static bool CallerMethod1425(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.NetworkStream.EndRead
		private static bool CallerMethod1426(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.NetworkStream.BeginRead
		private static bool CallerMethod1427(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.NetworkStream.Flush
		private static bool CallerMethod1428(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.NetworkStream.Close
		private static bool CallerMethod1429(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.NetworkStream.set_Position
		private static bool CallerMethod1430(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.NetworkStream.get_Position
		private static bool CallerMethod1431(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.NetworkStream.get_Length
		private static bool CallerMethod1432(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.NetworkStream.get_CanWrite
		private static bool CallerMethod1433(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.NetworkStream.get_CanSeek
		private static bool CallerMethod1434(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.NetworkStream.get_CanRead
		private static bool CallerMethod1435(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.NetworkStream..ctor
		private static bool CallerMethod1436(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.NetworkStream..ctor
		private static bool CallerMethod1437(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.NetworkStream..ctor
		private static bool CallerMethod1438(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.NetworkStream..ctor
		private static bool CallerMethod1439(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean get_DataAvailable(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1419), "NETWORK", "System.Net.Sockets.NetworkStream.get_DataAvailable()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 size)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = size;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1420), "NETWORK", "System.Net.Sockets.NetworkStream.Write(Byte[], Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 Read(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 size)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = size;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1421), "NETWORK", "System.Net.Sockets.NetworkStream.Read(Byte[], Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void SetLength(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1422), "NETWORK", "System.Net.Sockets.NetworkStream.SetLength(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int64 Seek(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 offset, System.IO.SeekOrigin origin)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = offset;
			paramObjs[2] = origin;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1423), "NETWORK", "System.Net.Sockets.NetworkStream.Seek(Int64, SeekOrigin)", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static void EndWrite(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1424), "NETWORK", "System.Net.Sockets.NetworkStream.EndWrite(IAsyncResult)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IAsyncResult BeginWrite(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback callback, System.Object state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = size;
			paramObjs[4] = callback;
			paramObjs[5] = state;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1425), "NETWORK", "System.Net.Sockets.NetworkStream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static System.Int32 EndRead(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1426), "NETWORK", "System.Net.Sockets.NetworkStream.EndRead(IAsyncResult)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.IAsyncResult BeginRead(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback callback, System.Object state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = size;
			paramObjs[4] = callback;
			paramObjs[5] = state;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1427), "NETWORK", "System.Net.Sockets.NetworkStream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static void Flush(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1428), "NETWORK", "System.Net.Sockets.NetworkStream.Flush()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1429), "NETWORK", "System.Net.Sockets.NetworkStream.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_Position(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1430), "NETWORK", "System.Net.Sockets.NetworkStream.set_Position(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int64 get_Position(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1431), "NETWORK", "System.Net.Sockets.NetworkStream.get_Position()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.Int64 get_Length(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1432), "NETWORK", "System.Net.Sockets.NetworkStream.get_Length()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.Boolean get_CanWrite(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1433), "NETWORK", "System.Net.Sockets.NetworkStream.get_CanWrite()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_CanSeek(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1434), "NETWORK", "System.Net.Sockets.NetworkStream.get_CanSeek()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_CanRead(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1435), "NETWORK", "System.Net.Sockets.NetworkStream.get_CanRead()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Net.Sockets.Socket socket)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = socket;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1436), "NETWORK", "System.Net.Sockets.NetworkStream.ctor(Socket)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Net.Sockets.Socket socket, System.Boolean ownsSocket)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = socket;
			paramObjs[2] = ownsSocket;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1437), "NETWORK", "System.Net.Sockets.NetworkStream.ctor(Socket, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Net.Sockets.Socket socket, System.IO.FileAccess access)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = socket;
			paramObjs[2] = access;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1438), "NETWORK", "System.Net.Sockets.NetworkStream.ctor(Socket, FileAccess)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Net.Sockets.Socket socket, System.IO.FileAccess access, System.Boolean ownsSocket)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = socket;
			paramObjs[2] = access;
			paramObjs[3] = ownsSocket;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1439), "NETWORK", "System.Net.Sockets.NetworkStream.ctor(Socket, FileAccess, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.Sockets.LingerOption")]
	public class HandlerClass163
	{
		// System.Net.Sockets.LingerOption.get_Enabled
		private static bool CallerMethod1440(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.LingerOption.set_Enabled
		private static bool CallerMethod1441(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.LingerOption.get_LingerTime
		private static bool CallerMethod1442(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.LingerOption.set_LingerTime
		private static bool CallerMethod1443(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.LingerOption..ctor
		private static bool CallerMethod1444(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean get_Enabled(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1440), "NETWORK", "System.Net.Sockets.LingerOption.get_Enabled()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_Enabled(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1441), "NETWORK", "System.Net.Sockets.LingerOption.set_Enabled(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_LingerTime(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1442), "NETWORK", "System.Net.Sockets.LingerOption.get_LingerTime()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_LingerTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1443), "NETWORK", "System.Net.Sockets.LingerOption.set_LingerTime(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Boolean enable, System.Int32 seconds)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = enable;
			paramObjs[2] = seconds;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1444), "NETWORK", "System.Net.Sockets.LingerOption.ctor(Boolean, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.Sockets.MulticastOption")]
	public class HandlerClass164
	{
		// System.Net.Sockets.MulticastOption.get_Group
		private static bool CallerMethod1445(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.MulticastOption.set_Group
		private static bool CallerMethod1446(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.MulticastOption.get_LocalAddress
		private static bool CallerMethod1447(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.MulticastOption.set_LocalAddress
		private static bool CallerMethod1448(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.MulticastOption..ctor
		private static bool CallerMethod1449(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.MulticastOption..ctor
		private static bool CallerMethod1450(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Net.IPAddress get_Group(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1445), "NETWORK", "System.Net.Sockets.MulticastOption.get_Group()", paramObjs, typeof(System.Net.IPAddress), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.IPAddress)retValue;
		}

		public static void set_Group(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.IPAddress value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1446), "NETWORK", "System.Net.Sockets.MulticastOption.set_Group(IPAddress)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.IPAddress get_LocalAddress(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1447), "NETWORK", "System.Net.Sockets.MulticastOption.get_LocalAddress()", paramObjs, typeof(System.Net.IPAddress), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.IPAddress)retValue;
		}

		public static void set_LocalAddress(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.IPAddress value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1448), "NETWORK", "System.Net.Sockets.MulticastOption.set_LocalAddress(IPAddress)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Net.IPAddress group, System.Net.IPAddress mcint)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = group;
			paramObjs[2] = mcint;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1449), "NETWORK", "System.Net.Sockets.MulticastOption.ctor(IPAddress, IPAddress)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Net.IPAddress group)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = group;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1450), "NETWORK", "System.Net.Sockets.MulticastOption.ctor(IPAddress)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.Sockets.IPv6MulticastOption")]
	public class HandlerClass165
	{
		// System.Net.Sockets.IPv6MulticastOption.get_Group
		private static bool CallerMethod1451(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.IPv6MulticastOption.set_Group
		private static bool CallerMethod1452(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.IPv6MulticastOption.get_InterfaceIndex
		private static bool CallerMethod1453(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.IPv6MulticastOption.set_InterfaceIndex
		private static bool CallerMethod1454(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.IPv6MulticastOption..ctor
		private static bool CallerMethod1455(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.IPv6MulticastOption..ctor
		private static bool CallerMethod1456(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Net.IPAddress get_Group(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1451), "NETWORK", "System.Net.Sockets.IPv6MulticastOption.get_Group()", paramObjs, typeof(System.Net.IPAddress), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.IPAddress)retValue;
		}

		public static void set_Group(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.IPAddress value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1452), "NETWORK", "System.Net.Sockets.IPv6MulticastOption.set_Group(IPAddress)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int64 get_InterfaceIndex(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1453), "NETWORK", "System.Net.Sockets.IPv6MulticastOption.get_InterfaceIndex()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static void set_InterfaceIndex(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1454), "NETWORK", "System.Net.Sockets.IPv6MulticastOption.set_InterfaceIndex(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Net.IPAddress group, System.Int64 ifindex)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = group;
			paramObjs[2] = ifindex;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1455), "NETWORK", "System.Net.Sockets.IPv6MulticastOption.ctor(IPAddress, Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Net.IPAddress group)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = group;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1456), "NETWORK", "System.Net.Sockets.IPv6MulticastOption.ctor(IPAddress)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.Sockets.Socket")]
	public class HandlerClass166
	{
		// System.Net.Sockets.Socket.GetHashCode
		private static bool CallerMethod1457(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.Bind
		private static bool CallerMethod1458(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.Connect
		private static bool CallerMethod1459(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.get_Connected
		private static bool CallerMethod1460(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.get_AddressFamily
		private static bool CallerMethod1461(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.get_SocketType
		private static bool CallerMethod1462(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.get_ProtocolType
		private static bool CallerMethod1463(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.Close
		private static bool CallerMethod1464(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.Shutdown
		private static bool CallerMethod1465(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.Listen
		private static bool CallerMethod1466(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.Accept
		private static bool CallerMethod1467(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.Send
		private static bool CallerMethod1468(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.Send
		private static bool CallerMethod1469(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.Send
		private static bool CallerMethod1470(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.Send
		private static bool CallerMethod1471(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.SendTo
		private static bool CallerMethod1472(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.SendTo
		private static bool CallerMethod1473(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.SendTo
		private static bool CallerMethod1474(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.SendTo
		private static bool CallerMethod1475(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.Receive
		private static bool CallerMethod1476(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.Receive
		private static bool CallerMethod1477(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.Receive
		private static bool CallerMethod1478(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.Receive
		private static bool CallerMethod1479(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.ReceiveFrom
		private static bool CallerMethod1480(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			Array.Copy(methodParams, 0, paramObjs, 1, paramObjs.Length - 1);
			return true;
		}

		// System.Net.Sockets.Socket.ReceiveFrom
		private static bool CallerMethod1481(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			Array.Copy(methodParams, 0, paramObjs, 1, paramObjs.Length - 1);
			return true;
		}

		// System.Net.Sockets.Socket.ReceiveFrom
		private static bool CallerMethod1482(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			Array.Copy(methodParams, 0, paramObjs, 1, paramObjs.Length - 1);
			return true;
		}

		// System.Net.Sockets.Socket.ReceiveFrom
		private static bool CallerMethod1483(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			Array.Copy(methodParams, 0, paramObjs, 1, paramObjs.Length - 1);
			return true;
		}

		// System.Net.Sockets.Socket.IOControl
		private static bool CallerMethod1484(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.SetSocketOption
		private static bool CallerMethod1485(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.SetSocketOption
		private static bool CallerMethod1486(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.SetSocketOption
		private static bool CallerMethod1487(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.GetSocketOption
		private static bool CallerMethod1488(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.GetSocketOption
		private static bool CallerMethod1489(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.GetSocketOption
		private static bool CallerMethod1490(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.get_Available
		private static bool CallerMethod1491(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.Poll
		private static bool CallerMethod1492(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.get_LocalEndPoint
		private static bool CallerMethod1493(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.get_RemoteEndPoint
		private static bool CallerMethod1494(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.get_Handle
		private static bool CallerMethod1495(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.get_Blocking
		private static bool CallerMethod1496(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.set_Blocking
		private static bool CallerMethod1497(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.BeginConnect
		private static bool CallerMethod1498(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.EndConnect
		private static bool CallerMethod1499(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.BeginSend
		private static bool CallerMethod1500(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 7) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.EndSend
		private static bool CallerMethod1501(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.BeginSendTo
		private static bool CallerMethod1502(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 8) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.EndSendTo
		private static bool CallerMethod1503(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.BeginReceive
		private static bool CallerMethod1504(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 7) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.EndReceive
		private static bool CallerMethod1505(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.BeginReceiveFrom
		private static bool CallerMethod1506(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 8) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			Array.Copy(methodParams, 0, paramObjs, 1, paramObjs.Length - 1);
			return true;
		}

		// System.Net.Sockets.Socket.EndReceiveFrom
		private static bool CallerMethod1507(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			Array.Copy(methodParams, 0, paramObjs, 1, paramObjs.Length - 1);
			return true;
		}

		// System.Net.Sockets.Socket.BeginAccept
		private static bool CallerMethod1508(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.EndAccept
		private static bool CallerMethod1509(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.get_SupportsIPv4
		private static bool CallerMethod1510(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.get_SupportsIPv6
		private static bool CallerMethod1511(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket.Select
		private static bool CallerMethod1512(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.Socket..ctor
		private static bool CallerMethod1513(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1457), "NETWORK", "System.Net.Sockets.Socket.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Bind(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.EndPoint localEP)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localEP;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1458), "NETWORK", "System.Net.Sockets.Socket.Bind(EndPoint)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Connect(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.EndPoint remoteEP)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = remoteEP;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1459), "NETWORK", "System.Net.Sockets.Socket.Connect(EndPoint)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_Connected(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1460), "NETWORK", "System.Net.Sockets.Socket.get_Connected()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Net.Sockets.AddressFamily get_AddressFamily(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1461), "NETWORK", "System.Net.Sockets.Socket.get_AddressFamily()", paramObjs, typeof(System.Net.Sockets.AddressFamily), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.Sockets.AddressFamily)retValue;
		}

		public static System.Net.Sockets.SocketType get_SocketType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1462), "NETWORK", "System.Net.Sockets.Socket.get_SocketType()", paramObjs, typeof(System.Net.Sockets.SocketType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.Sockets.SocketType)retValue;
		}

		public static System.Net.Sockets.ProtocolType get_ProtocolType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1463), "NETWORK", "System.Net.Sockets.Socket.get_ProtocolType()", paramObjs, typeof(System.Net.Sockets.ProtocolType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.Sockets.ProtocolType)retValue;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1464), "NETWORK", "System.Net.Sockets.Socket.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Shutdown(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.Sockets.SocketShutdown how)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = how;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1465), "NETWORK", "System.Net.Sockets.Socket.Shutdown(SocketShutdown)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Listen(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 backlog)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = backlog;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1466), "NETWORK", "System.Net.Sockets.Socket.Listen(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.Sockets.Socket Accept(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1467), "NETWORK", "System.Net.Sockets.Socket.Accept()", paramObjs, typeof(System.Net.Sockets.Socket), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.Sockets.Socket)retValue;
		}

		public static System.Int32 Send(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = size;
			paramObjs[3] = socketFlags;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1468), "NETWORK", "System.Net.Sockets.Socket.Send(Byte[], Int32, SocketFlags)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Send(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Net.Sockets.SocketFlags socketFlags)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = socketFlags;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1469), "NETWORK", "System.Net.Sockets.Socket.Send(Byte[], SocketFlags)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Send(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1470), "NETWORK", "System.Net.Sockets.Socket.Send(Byte[])", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Send(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = size;
			paramObjs[4] = socketFlags;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1471), "NETWORK", "System.Net.Sockets.Socket.Send(Byte[], Int32, Int32, SocketFlags)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 SendTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = size;
			paramObjs[4] = socketFlags;
			paramObjs[5] = remoteEP;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1472), "NETWORK", "System.Net.Sockets.Socket.SendTo(Byte[], Int32, Int32, SocketFlags, EndPoint)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 SendTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = size;
			paramObjs[3] = socketFlags;
			paramObjs[4] = remoteEP;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1473), "NETWORK", "System.Net.Sockets.Socket.SendTo(Byte[], Int32, SocketFlags, EndPoint)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 SendTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = socketFlags;
			paramObjs[3] = remoteEP;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1474), "NETWORK", "System.Net.Sockets.Socket.SendTo(Byte[], SocketFlags, EndPoint)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 SendTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Net.EndPoint remoteEP)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = remoteEP;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1475), "NETWORK", "System.Net.Sockets.Socket.SendTo(Byte[], EndPoint)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Receive(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = size;
			paramObjs[3] = socketFlags;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1476), "NETWORK", "System.Net.Sockets.Socket.Receive(Byte[], Int32, SocketFlags)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Receive(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Net.Sockets.SocketFlags socketFlags)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = socketFlags;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1477), "NETWORK", "System.Net.Sockets.Socket.Receive(Byte[], SocketFlags)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Receive(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1478), "NETWORK", "System.Net.Sockets.Socket.Receive(Byte[])", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Receive(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = size;
			paramObjs[4] = socketFlags;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1479), "NETWORK", "System.Net.Sockets.Socket.Receive(Byte[], Int32, Int32, SocketFlags)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 ReceiveFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = size;
			paramObjs[4] = socketFlags;
			paramObjs[5] = remoteEP;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1480), "NETWORK", "System.Net.Sockets.Socket.ReceiveFrom(Byte[], Int32, Int32, SocketFlags, EndPoint&)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			remoteEP = (System.Net.EndPoint)paramObjs[5];
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 ReceiveFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = size;
			paramObjs[3] = socketFlags;
			paramObjs[4] = remoteEP;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1481), "NETWORK", "System.Net.Sockets.Socket.ReceiveFrom(Byte[], Int32, SocketFlags, EndPoint&)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			remoteEP = (System.Net.EndPoint)paramObjs[4];
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 ReceiveFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = socketFlags;
			paramObjs[3] = remoteEP;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1482), "NETWORK", "System.Net.Sockets.Socket.ReceiveFrom(Byte[], SocketFlags, EndPoint&)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			remoteEP = (System.Net.EndPoint)paramObjs[3];
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 ReceiveFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, ref System.Net.EndPoint remoteEP)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = remoteEP;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1483), "NETWORK", "System.Net.Sockets.Socket.ReceiveFrom(Byte[], EndPoint&)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			remoteEP = (System.Net.EndPoint)paramObjs[2];
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 IOControl(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 ioControlCode, System.Byte[] optionInValue, System.Byte[] optionOutValue)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = ioControlCode;
			paramObjs[2] = optionInValue;
			paramObjs[3] = optionOutValue;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1484), "NETWORK", "System.Net.Sockets.Socket.IOControl(Int32, Byte[], Byte[])", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void SetSocketOption(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Int32 optionValue)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = optionLevel;
			paramObjs[2] = optionName;
			paramObjs[3] = optionValue;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1485), "NETWORK", "System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel, SocketOptionName, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetSocketOption(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Byte[] optionValue)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = optionLevel;
			paramObjs[2] = optionName;
			paramObjs[3] = optionValue;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1486), "NETWORK", "System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel, SocketOptionName, Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetSocketOption(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Object optionValue)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = optionLevel;
			paramObjs[2] = optionName;
			paramObjs[3] = optionValue;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1487), "NETWORK", "System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel, SocketOptionName, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Object GetSocketOption(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = optionLevel;
			paramObjs[2] = optionName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1488), "NETWORK", "System.Net.Sockets.Socket.GetSocketOption(SocketOptionLevel, SocketOptionName)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static void GetSocketOption(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Byte[] optionValue)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = optionLevel;
			paramObjs[2] = optionName;
			paramObjs[3] = optionValue;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1489), "NETWORK", "System.Net.Sockets.Socket.GetSocketOption(SocketOptionLevel, SocketOptionName, Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Byte[] GetSocketOption(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Int32 optionLength)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = optionLevel;
			paramObjs[2] = optionName;
			paramObjs[3] = optionLength;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1490), "NETWORK", "System.Net.Sockets.Socket.GetSocketOption(SocketOptionLevel, SocketOptionName, Int32)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Int32 get_Available(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1491), "NETWORK", "System.Net.Sockets.Socket.get_Available()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Poll(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 microSeconds, System.Net.Sockets.SelectMode mode)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = microSeconds;
			paramObjs[2] = mode;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1492), "NETWORK", "System.Net.Sockets.Socket.Poll(Int32, SelectMode)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Net.EndPoint get_LocalEndPoint(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1493), "NETWORK", "System.Net.Sockets.Socket.get_LocalEndPoint()", paramObjs, typeof(System.Net.EndPoint), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.EndPoint)retValue;
		}

		public static System.Net.EndPoint get_RemoteEndPoint(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1494), "NETWORK", "System.Net.Sockets.Socket.get_RemoteEndPoint()", paramObjs, typeof(System.Net.EndPoint), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.EndPoint)retValue;
		}

		public static System.IntPtr get_Handle(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1495), "NETWORK", "System.Net.Sockets.Socket.get_Handle()", paramObjs, typeof(System.IntPtr), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IntPtr)retValue;
		}

		public static System.Boolean get_Blocking(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1496), "NETWORK", "System.Net.Sockets.Socket.get_Blocking()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_Blocking(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1497), "NETWORK", "System.Net.Sockets.Socket.set_Blocking(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IAsyncResult BeginConnect(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.EndPoint remoteEP, System.AsyncCallback callback, System.Object state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = remoteEP;
			paramObjs[2] = callback;
			paramObjs[3] = state;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1498), "NETWORK", "System.Net.Sockets.Socket.BeginConnect(EndPoint, AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static void EndConnect(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1499), "NETWORK", "System.Net.Sockets.Socket.EndConnect(IAsyncResult)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IAsyncResult BeginSend(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.AsyncCallback callback, System.Object state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[7];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = size;
			paramObjs[4] = socketFlags;
			paramObjs[5] = callback;
			paramObjs[6] = state;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1500), "NETWORK", "System.Net.Sockets.Socket.BeginSend(Byte[], Int32, Int32, SocketFlags, AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static System.Int32 EndSend(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1501), "NETWORK", "System.Net.Sockets.Socket.EndSend(IAsyncResult)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.IAsyncResult BeginSendTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP, System.AsyncCallback callback, System.Object state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[8];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = size;
			paramObjs[4] = socketFlags;
			paramObjs[5] = remoteEP;
			paramObjs[6] = callback;
			paramObjs[7] = state;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1502), "NETWORK", "System.Net.Sockets.Socket.BeginSendTo(Byte[], Int32, Int32, SocketFlags, EndPoint, AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static System.Int32 EndSendTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1503), "NETWORK", "System.Net.Sockets.Socket.EndSendTo(IAsyncResult)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.IAsyncResult BeginReceive(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.AsyncCallback callback, System.Object state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[7];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = size;
			paramObjs[4] = socketFlags;
			paramObjs[5] = callback;
			paramObjs[6] = state;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1504), "NETWORK", "System.Net.Sockets.Socket.BeginReceive(Byte[], Int32, Int32, SocketFlags, AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static System.Int32 EndReceive(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1505), "NETWORK", "System.Net.Sockets.Socket.EndReceive(IAsyncResult)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.IAsyncResult BeginReceiveFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, System.AsyncCallback callback, System.Object state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[8];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = size;
			paramObjs[4] = socketFlags;
			paramObjs[5] = remoteEP;
			paramObjs[6] = callback;
			paramObjs[7] = state;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1506), "NETWORK", "System.Net.Sockets.Socket.BeginReceiveFrom(Byte[], Int32, Int32, SocketFlags, EndPoint&, AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			remoteEP = (System.Net.EndPoint)paramObjs[5];
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static System.Int32 EndReceiveFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult, ref System.Net.EndPoint endPoint)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			paramObjs[2] = endPoint;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1507), "NETWORK", "System.Net.Sockets.Socket.EndReceiveFrom(IAsyncResult, EndPoint&)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			endPoint = (System.Net.EndPoint)paramObjs[2];
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.IAsyncResult BeginAccept(HeatDotNet.MethodInterceptInfo methodIntercept, System.AsyncCallback callback, System.Object state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = callback;
			paramObjs[2] = state;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1508), "NETWORK", "System.Net.Sockets.Socket.BeginAccept(AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static System.Net.Sockets.Socket EndAccept(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1509), "NETWORK", "System.Net.Sockets.Socket.EndAccept(IAsyncResult)", paramObjs, typeof(System.Net.Sockets.Socket), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.Sockets.Socket)retValue;
		}

		public static System.Boolean get_SupportsIPv4(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1510), "NETWORK", "System.Net.Sockets.Socket.get_SupportsIPv4()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_SupportsIPv6(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1511), "NETWORK", "System.Net.Sockets.Socket.get_SupportsIPv6()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void Select(HeatDotNet.MethodInterceptInfo methodIntercept, System.Collections.IList checkRead, System.Collections.IList checkWrite, System.Collections.IList checkError, System.Int32 microSeconds)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = checkRead;
			paramObjs[2] = checkWrite;
			paramObjs[3] = checkError;
			paramObjs[4] = microSeconds;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1512), "NETWORK", "System.Net.Sockets.Socket.Select(IList, IList, IList, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Net.Sockets.AddressFamily addressFamily, System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = addressFamily;
			paramObjs[2] = socketType;
			paramObjs[3] = protocolType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1513), "NETWORK", "System.Net.Sockets.Socket.ctor(AddressFamily, SocketType, ProtocolType)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.Sockets.TcpClient")]
	public class HandlerClass167
	{
		// System.Net.Sockets.TcpClient.Connect
		private static bool CallerMethod1514(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpClient.Connect
		private static bool CallerMethod1515(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpClient.Connect
		private static bool CallerMethod1516(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpClient.GetStream
		private static bool CallerMethod1517(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpClient.Close
		private static bool CallerMethod1518(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpClient.get_ReceiveBufferSize
		private static bool CallerMethod1519(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpClient.set_ReceiveBufferSize
		private static bool CallerMethod1520(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpClient.get_SendBufferSize
		private static bool CallerMethod1521(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpClient.set_SendBufferSize
		private static bool CallerMethod1522(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpClient.get_ReceiveTimeout
		private static bool CallerMethod1523(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpClient.set_ReceiveTimeout
		private static bool CallerMethod1524(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpClient.get_SendTimeout
		private static bool CallerMethod1525(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpClient.set_SendTimeout
		private static bool CallerMethod1526(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpClient.get_LingerState
		private static bool CallerMethod1527(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpClient.set_LingerState
		private static bool CallerMethod1528(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpClient.get_NoDelay
		private static bool CallerMethod1529(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpClient.set_NoDelay
		private static bool CallerMethod1530(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpClient..ctor
		private static bool CallerMethod1531(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpClient..ctor
		private static bool CallerMethod1532(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpClient..ctor
		private static bool CallerMethod1533(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpClient..ctor
		private static bool CallerMethod1534(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Connect(HeatDotNet.MethodInterceptInfo methodIntercept, System.String hostname, System.Int32 port)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = hostname;
			paramObjs[2] = port;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1514), "NETWORK", "System.Net.Sockets.TcpClient.Connect(String, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Connect(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.IPAddress address, System.Int32 port)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = address;
			paramObjs[2] = port;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1515), "NETWORK", "System.Net.Sockets.TcpClient.Connect(IPAddress, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Connect(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.IPEndPoint remoteEP)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = remoteEP;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1516), "NETWORK", "System.Net.Sockets.TcpClient.Connect(IPEndPoint)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.Sockets.NetworkStream GetStream(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1517), "NETWORK", "System.Net.Sockets.TcpClient.GetStream()", paramObjs, typeof(System.Net.Sockets.NetworkStream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.Sockets.NetworkStream)retValue;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1518), "NETWORK", "System.Net.Sockets.TcpClient.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_ReceiveBufferSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1519), "NETWORK", "System.Net.Sockets.TcpClient.get_ReceiveBufferSize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_ReceiveBufferSize(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1520), "NETWORK", "System.Net.Sockets.TcpClient.set_ReceiveBufferSize(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_SendBufferSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1521), "NETWORK", "System.Net.Sockets.TcpClient.get_SendBufferSize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_SendBufferSize(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1522), "NETWORK", "System.Net.Sockets.TcpClient.set_SendBufferSize(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_ReceiveTimeout(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1523), "NETWORK", "System.Net.Sockets.TcpClient.get_ReceiveTimeout()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_ReceiveTimeout(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1524), "NETWORK", "System.Net.Sockets.TcpClient.set_ReceiveTimeout(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_SendTimeout(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1525), "NETWORK", "System.Net.Sockets.TcpClient.get_SendTimeout()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_SendTimeout(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1526), "NETWORK", "System.Net.Sockets.TcpClient.set_SendTimeout(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Net.Sockets.LingerOption get_LingerState(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1527), "NETWORK", "System.Net.Sockets.TcpClient.get_LingerState()", paramObjs, typeof(System.Net.Sockets.LingerOption), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.Sockets.LingerOption)retValue;
		}

		public static void set_LingerState(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.Sockets.LingerOption value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1528), "NETWORK", "System.Net.Sockets.TcpClient.set_LingerState(LingerOption)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_NoDelay(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1529), "NETWORK", "System.Net.Sockets.TcpClient.get_NoDelay()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_NoDelay(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1530), "NETWORK", "System.Net.Sockets.TcpClient.set_NoDelay(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Net.IPEndPoint localEP)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = localEP;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1531), "NETWORK", "System.Net.Sockets.TcpClient.ctor(IPEndPoint)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1532), "NETWORK", "System.Net.Sockets.TcpClient.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Net.Sockets.AddressFamily family)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = family;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1533), "NETWORK", "System.Net.Sockets.TcpClient.ctor(AddressFamily)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String hostname, System.Int32 port)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = hostname;
			paramObjs[2] = port;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1534), "NETWORK", "System.Net.Sockets.TcpClient.ctor(String, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.Sockets.TcpListener")]
	public class HandlerClass168
	{
		// System.Net.Sockets.TcpListener.get_LocalEndpoint
		private static bool CallerMethod1535(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpListener.Start
		private static bool CallerMethod1536(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpListener.Stop
		private static bool CallerMethod1537(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpListener.Pending
		private static bool CallerMethod1538(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpListener.AcceptSocket
		private static bool CallerMethod1539(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpListener.AcceptTcpClient
		private static bool CallerMethod1540(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpListener..ctor
		private static bool CallerMethod1541(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpListener..ctor
		private static bool CallerMethod1542(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.TcpListener..ctor
		private static bool CallerMethod1543(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Net.EndPoint get_LocalEndpoint(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1535), "NETWORK", "System.Net.Sockets.TcpListener.get_LocalEndpoint()", paramObjs, typeof(System.Net.EndPoint), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.EndPoint)retValue;
		}

		public static void Start(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1536), "NETWORK", "System.Net.Sockets.TcpListener.Start()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Stop(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1537), "NETWORK", "System.Net.Sockets.TcpListener.Stop()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean Pending(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1538), "NETWORK", "System.Net.Sockets.TcpListener.Pending()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Net.Sockets.Socket AcceptSocket(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1539), "NETWORK", "System.Net.Sockets.TcpListener.AcceptSocket()", paramObjs, typeof(System.Net.Sockets.Socket), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.Sockets.Socket)retValue;
		}

		public static System.Net.Sockets.TcpClient AcceptTcpClient(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1540), "NETWORK", "System.Net.Sockets.TcpListener.AcceptTcpClient()", paramObjs, typeof(System.Net.Sockets.TcpClient), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Net.Sockets.TcpClient)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Net.IPEndPoint localEP)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = localEP;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1541), "NETWORK", "System.Net.Sockets.TcpListener.ctor(IPEndPoint)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Net.IPAddress localaddr, System.Int32 port)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = localaddr;
			paramObjs[2] = port;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1542), "NETWORK", "System.Net.Sockets.TcpListener.ctor(IPAddress, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int32 port)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = port;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1543), "NETWORK", "System.Net.Sockets.TcpListener.ctor(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Net.Sockets.UdpClient")]
	public class HandlerClass169
	{
		// System.Net.Sockets.UdpClient.Close
		private static bool CallerMethod1544(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.UdpClient.Connect
		private static bool CallerMethod1545(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.UdpClient.Connect
		private static bool CallerMethod1546(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.UdpClient.Connect
		private static bool CallerMethod1547(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.UdpClient.Send
		private static bool CallerMethod1548(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.UdpClient.Send
		private static bool CallerMethod1549(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.UdpClient.Send
		private static bool CallerMethod1550(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.UdpClient.Receive
		private static bool CallerMethod1551(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			Array.Copy(methodParams, 0, paramObjs, 1, paramObjs.Length - 1);
			return true;
		}

		// System.Net.Sockets.UdpClient.JoinMulticastGroup
		private static bool CallerMethod1552(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.UdpClient.JoinMulticastGroup
		private static bool CallerMethod1553(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.UdpClient.JoinMulticastGroup
		private static bool CallerMethod1554(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.UdpClient.DropMulticastGroup
		private static bool CallerMethod1555(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.UdpClient.DropMulticastGroup
		private static bool CallerMethod1556(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.UdpClient..ctor
		private static bool CallerMethod1557(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.UdpClient..ctor
		private static bool CallerMethod1558(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.UdpClient..ctor
		private static bool CallerMethod1559(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.UdpClient..ctor
		private static bool CallerMethod1560(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.UdpClient..ctor
		private static bool CallerMethod1561(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Net.Sockets.UdpClient..ctor
		private static bool CallerMethod1562(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1544), "NETWORK", "System.Net.Sockets.UdpClient.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Connect(HeatDotNet.MethodInterceptInfo methodIntercept, System.String hostname, System.Int32 port)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = hostname;
			paramObjs[2] = port;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1545), "NETWORK", "System.Net.Sockets.UdpClient.Connect(String, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Connect(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.IPAddress addr, System.Int32 port)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = addr;
			paramObjs[2] = port;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1546), "NETWORK", "System.Net.Sockets.UdpClient.Connect(IPAddress, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Connect(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.IPEndPoint endPoint)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = endPoint;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1547), "NETWORK", "System.Net.Sockets.UdpClient.Connect(IPEndPoint)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 Send(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] dgram, System.Int32 bytes, System.Net.IPEndPoint endPoint)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = dgram;
			paramObjs[2] = bytes;
			paramObjs[3] = endPoint;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1548), "NETWORK", "System.Net.Sockets.UdpClient.Send(Byte[], Int32, IPEndPoint)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Send(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] dgram, System.Int32 bytes, System.String hostname, System.Int32 port)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = dgram;
			paramObjs[2] = bytes;
			paramObjs[3] = hostname;
			paramObjs[4] = port;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1549), "NETWORK", "System.Net.Sockets.UdpClient.Send(Byte[], Int32, String, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Send(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] dgram, System.Int32 bytes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = dgram;
			paramObjs[2] = bytes;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1550), "NETWORK", "System.Net.Sockets.UdpClient.Send(Byte[], Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Byte[] Receive(HeatDotNet.MethodInterceptInfo methodIntercept, ref System.Net.IPEndPoint remoteEP)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = remoteEP;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1551), "NETWORK", "System.Net.Sockets.UdpClient.Receive(IPEndPoint&)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			remoteEP = (System.Net.IPEndPoint)paramObjs[1];
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void JoinMulticastGroup(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.IPAddress multicastAddr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = multicastAddr;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1552), "NETWORK", "System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void JoinMulticastGroup(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 ifindex, System.Net.IPAddress multicastAddr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = ifindex;
			paramObjs[2] = multicastAddr;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1553), "NETWORK", "System.Net.Sockets.UdpClient.JoinMulticastGroup(Int32, IPAddress)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void JoinMulticastGroup(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.IPAddress multicastAddr, System.Int32 timeToLive)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = multicastAddr;
			paramObjs[2] = timeToLive;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1554), "NETWORK", "System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void DropMulticastGroup(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.IPAddress multicastAddr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = multicastAddr;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1555), "NETWORK", "System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void DropMulticastGroup(HeatDotNet.MethodInterceptInfo methodIntercept, System.Net.IPAddress multicastAddr, System.Int32 ifindex)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = multicastAddr;
			paramObjs[2] = ifindex;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1556), "NETWORK", "System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1557), "NETWORK", "System.Net.Sockets.UdpClient.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Net.Sockets.AddressFamily family)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = family;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1558), "NETWORK", "System.Net.Sockets.UdpClient.ctor(AddressFamily)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int32 port)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = port;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1559), "NETWORK", "System.Net.Sockets.UdpClient.ctor(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int32 port, System.Net.Sockets.AddressFamily family)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = port;
			paramObjs[2] = family;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1560), "NETWORK", "System.Net.Sockets.UdpClient.ctor(Int32, AddressFamily)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Net.IPEndPoint localEP)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = localEP;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1561), "NETWORK", "System.Net.Sockets.UdpClient.ctor(IPEndPoint)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String hostname, System.Int32 port)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = hostname;
			paramObjs[2] = port;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1562), "NETWORK", "System.Net.Sockets.UdpClient.ctor(String, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Configuration.ConfigurationSettings")]
	public class HandlerClass170
	{
		// System.Configuration.ConfigurationSettings.GetConfig
		private static bool CallerMethod1563(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Configuration.ConfigurationSettings.get_AppSettings
		private static bool CallerMethod1564(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object GetConfig(HeatDotNet.MethodInterceptInfo methodIntercept, System.String sectionName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = sectionName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1563), "FILE", "System.Configuration.ConfigurationSettings.GetConfig(String)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Collections.Specialized.NameValueCollection get_AppSettings(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1564), "FILE", "System.Configuration.ConfigurationSettings.get_AppSettings()", paramObjs, typeof(System.Collections.Specialized.NameValueCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.Specialized.NameValueCollection)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Configuration.ConfigXmlDocument")]
	public class HandlerClass171
	{
		// System.Configuration.ConfigXmlDocument.Load
		private static bool CallerMethod1565(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Configuration.ConfigXmlDocument.CreateElement
		private static bool CallerMethod1566(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Configuration.ConfigXmlDocument.CreateAttribute
		private static bool CallerMethod1567(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Configuration.ConfigXmlDocument.CreateWhitespace
		private static bool CallerMethod1568(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Configuration.ConfigXmlDocument.CreateSignificantWhitespace
		private static bool CallerMethod1569(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Configuration.ConfigXmlDocument.CreateTextNode
		private static bool CallerMethod1570(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Configuration.ConfigXmlDocument.CreateComment
		private static bool CallerMethod1571(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Configuration.ConfigXmlDocument.CreateCDataSection
		private static bool CallerMethod1572(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Configuration.ConfigXmlDocument.get_LineNumber
		private static bool CallerMethod1573(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Configuration.ConfigXmlDocument.get_Filename
		private static bool CallerMethod1574(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Configuration.ConfigXmlDocument.LoadSingleElement
		private static bool CallerMethod1575(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Configuration.ConfigXmlDocument..ctor
		private static bool CallerMethod1576(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Load(HeatDotNet.MethodInterceptInfo methodIntercept, System.String filename)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = filename;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1565), "FILE", "System.Configuration.ConfigXmlDocument.Load(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Xml.XmlElement CreateElement(HeatDotNet.MethodInterceptInfo methodIntercept, System.String prefix, System.String localName, System.String namespaceUri)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = prefix;
			paramObjs[2] = localName;
			paramObjs[3] = namespaceUri;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1566), "FILE", "System.Configuration.ConfigXmlDocument.CreateElement(String, String, String)", paramObjs, typeof(System.Xml.XmlElement), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlElement)retValue;
		}

		public static System.Xml.XmlAttribute CreateAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String prefix, System.String localName, System.String namespaceUri)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = prefix;
			paramObjs[2] = localName;
			paramObjs[3] = namespaceUri;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1567), "FILE", "System.Configuration.ConfigXmlDocument.CreateAttribute(String, String, String)", paramObjs, typeof(System.Xml.XmlAttribute), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlAttribute)retValue;
		}

		public static System.Xml.XmlWhitespace CreateWhitespace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String data)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = data;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1568), "FILE", "System.Configuration.ConfigXmlDocument.CreateWhitespace(String)", paramObjs, typeof(System.Xml.XmlWhitespace), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlWhitespace)retValue;
		}

		public static System.Xml.XmlSignificantWhitespace CreateSignificantWhitespace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String data)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = data;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1569), "FILE", "System.Configuration.ConfigXmlDocument.CreateSignificantWhitespace(String)", paramObjs, typeof(System.Xml.XmlSignificantWhitespace), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlSignificantWhitespace)retValue;
		}

		public static System.Xml.XmlText CreateTextNode(HeatDotNet.MethodInterceptInfo methodIntercept, System.String text)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = text;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1570), "FILE", "System.Configuration.ConfigXmlDocument.CreateTextNode(String)", paramObjs, typeof(System.Xml.XmlText), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlText)retValue;
		}

		public static System.Xml.XmlComment CreateComment(HeatDotNet.MethodInterceptInfo methodIntercept, System.String data)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = data;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1571), "FILE", "System.Configuration.ConfigXmlDocument.CreateComment(String)", paramObjs, typeof(System.Xml.XmlComment), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlComment)retValue;
		}

		public static System.Xml.XmlCDataSection CreateCDataSection(HeatDotNet.MethodInterceptInfo methodIntercept, System.String data)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = data;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1572), "FILE", "System.Configuration.ConfigXmlDocument.CreateCDataSection(String)", paramObjs, typeof(System.Xml.XmlCDataSection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Xml.XmlCDataSection)retValue;
		}

		public static System.Int32 get_LineNumber(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1573), "FILE", "System.Configuration.ConfigXmlDocument.get_LineNumber()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String get_Filename(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1574), "FILE", "System.Configuration.ConfigXmlDocument.get_Filename()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void LoadSingleElement(HeatDotNet.MethodInterceptInfo methodIntercept, System.String filename, System.Xml.XmlTextReader sourceReader)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = filename;
			paramObjs[2] = sourceReader;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1575), "FILE", "System.Configuration.ConfigXmlDocument.LoadSingleElement(String, XmlTextReader)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1576), "FILE", "System.Configuration.ConfigXmlDocument.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Configuration.DictionarySectionHandler")]
	public class HandlerClass172
	{
		// System.Configuration.DictionarySectionHandler.Create
		private static bool CallerMethod1577(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Configuration.DictionarySectionHandler..ctor
		private static bool CallerMethod1578(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object parent, System.Object context, System.Xml.XmlNode section)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = parent;
			paramObjs[2] = context;
			paramObjs[3] = section;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1577), "FILE", "System.Configuration.DictionarySectionHandler.Create(Object, Object, XmlNode)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1578), "FILE", "System.Configuration.DictionarySectionHandler.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Configuration.IgnoreSectionHandler")]
	public class HandlerClass173
	{
		// System.Configuration.IgnoreSectionHandler.Create
		private static bool CallerMethod1579(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Configuration.IgnoreSectionHandler..ctor
		private static bool CallerMethod1580(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object parent, System.Object configContext, System.Xml.XmlNode section)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = parent;
			paramObjs[2] = configContext;
			paramObjs[3] = section;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1579), "FILE", "System.Configuration.IgnoreSectionHandler.Create(Object, Object, XmlNode)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1580), "FILE", "System.Configuration.IgnoreSectionHandler.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Configuration.NameValueFileSectionHandler")]
	public class HandlerClass174
	{
		// System.Configuration.NameValueFileSectionHandler.Create
		private static bool CallerMethod1581(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Configuration.NameValueFileSectionHandler..ctor
		private static bool CallerMethod1582(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object parent, System.Object configContext, System.Xml.XmlNode section)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = parent;
			paramObjs[2] = configContext;
			paramObjs[3] = section;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1581), "FILE", "System.Configuration.NameValueFileSectionHandler.Create(Object, Object, XmlNode)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1582), "FILE", "System.Configuration.NameValueFileSectionHandler.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Configuration.NameValueSectionHandler")]
	public class HandlerClass175
	{
		// System.Configuration.NameValueSectionHandler.Create
		private static bool CallerMethod1583(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Configuration.NameValueSectionHandler..ctor
		private static bool CallerMethod1584(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object parent, System.Object context, System.Xml.XmlNode section)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = parent;
			paramObjs[2] = context;
			paramObjs[3] = section;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1583), "FILE", "System.Configuration.NameValueSectionHandler.Create(Object, Object, XmlNode)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1584), "FILE", "System.Configuration.NameValueSectionHandler.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Configuration.SingleTagSectionHandler")]
	public class HandlerClass176
	{
		// System.Configuration.SingleTagSectionHandler.Create
		private static bool CallerMethod1585(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Configuration.SingleTagSectionHandler..ctor
		private static bool CallerMethod1586(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object parent, System.Object context, System.Xml.XmlNode section)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = parent;
			paramObjs[2] = context;
			paramObjs[3] = section;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1585), "FILE", "System.Configuration.SingleTagSectionHandler.Create(Object, Object, XmlNode)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1586), "FILE", "System.Configuration.SingleTagSectionHandler.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.FileSystemWatcher")]
	public class HandlerClass177
	{
		// System.IO.FileSystemWatcher.EndInit
		private static bool CallerMethod1587(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.BeginInit
		private static bool CallerMethod1588(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.set_Site
		private static bool CallerMethod1589(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.get_Site
		private static bool CallerMethod1590(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.get_NotifyFilter
		private static bool CallerMethod1591(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.set_NotifyFilter
		private static bool CallerMethod1592(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.get_EnableRaisingEvents
		private static bool CallerMethod1593(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.set_EnableRaisingEvents
		private static bool CallerMethod1594(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.get_Filter
		private static bool CallerMethod1595(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.set_Filter
		private static bool CallerMethod1596(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.get_IncludeSubdirectories
		private static bool CallerMethod1597(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.set_IncludeSubdirectories
		private static bool CallerMethod1598(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.get_InternalBufferSize
		private static bool CallerMethod1599(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.set_InternalBufferSize
		private static bool CallerMethod1600(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.get_Path
		private static bool CallerMethod1601(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.set_Path
		private static bool CallerMethod1602(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.get_SynchronizingObject
		private static bool CallerMethod1603(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.set_SynchronizingObject
		private static bool CallerMethod1604(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.add_Changed
		private static bool CallerMethod1605(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.remove_Changed
		private static bool CallerMethod1606(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.add_Created
		private static bool CallerMethod1607(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.remove_Created
		private static bool CallerMethod1608(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.add_Deleted
		private static bool CallerMethod1609(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.remove_Deleted
		private static bool CallerMethod1610(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.add_Error
		private static bool CallerMethod1611(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.remove_Error
		private static bool CallerMethod1612(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.add_Renamed
		private static bool CallerMethod1613(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.remove_Renamed
		private static bool CallerMethod1614(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.WaitForChanged
		private static bool CallerMethod1615(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher.WaitForChanged
		private static bool CallerMethod1616(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher..ctor
		private static bool CallerMethod1617(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher..ctor
		private static bool CallerMethod1618(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemWatcher..ctor
		private static bool CallerMethod1619(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void EndInit(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1587), "FILE", "System.IO.FileSystemWatcher.EndInit()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void BeginInit(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1588), "FILE", "System.IO.FileSystemWatcher.BeginInit()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_Site(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ISite value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1589), "FILE", "System.IO.FileSystemWatcher.set_Site(ISite)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.ComponentModel.ISite get_Site(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1590), "FILE", "System.IO.FileSystemWatcher.get_Site()", paramObjs, typeof(System.ComponentModel.ISite), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.ISite)retValue;
		}

		public static System.IO.NotifyFilters get_NotifyFilter(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1591), "FILE", "System.IO.FileSystemWatcher.get_NotifyFilter()", paramObjs, typeof(System.IO.NotifyFilters), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.NotifyFilters)retValue;
		}

		public static void set_NotifyFilter(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.NotifyFilters value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1592), "FILE", "System.IO.FileSystemWatcher.set_NotifyFilter(NotifyFilters)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_EnableRaisingEvents(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1593), "FILE", "System.IO.FileSystemWatcher.get_EnableRaisingEvents()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_EnableRaisingEvents(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1594), "FILE", "System.IO.FileSystemWatcher.set_EnableRaisingEvents(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Filter(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1595), "FILE", "System.IO.FileSystemWatcher.get_Filter()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Filter(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1596), "FILE", "System.IO.FileSystemWatcher.set_Filter(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_IncludeSubdirectories(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1597), "FILE", "System.IO.FileSystemWatcher.get_IncludeSubdirectories()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_IncludeSubdirectories(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1598), "FILE", "System.IO.FileSystemWatcher.set_IncludeSubdirectories(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_InternalBufferSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1599), "FILE", "System.IO.FileSystemWatcher.get_InternalBufferSize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_InternalBufferSize(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1600), "FILE", "System.IO.FileSystemWatcher.set_InternalBufferSize(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Path(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1601), "FILE", "System.IO.FileSystemWatcher.get_Path()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Path(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1602), "FILE", "System.IO.FileSystemWatcher.set_Path(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.ComponentModel.ISynchronizeInvoke get_SynchronizingObject(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1603), "FILE", "System.IO.FileSystemWatcher.get_SynchronizingObject()", paramObjs, typeof(System.ComponentModel.ISynchronizeInvoke), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.ISynchronizeInvoke)retValue;
		}

		public static void set_SynchronizingObject(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ISynchronizeInvoke value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1604), "FILE", "System.IO.FileSystemWatcher.set_SynchronizingObject(ISynchronizeInvoke)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void add_Changed(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.FileSystemEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1605), "FILE", "System.IO.FileSystemWatcher.add_Changed(FileSystemEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void remove_Changed(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.FileSystemEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1606), "FILE", "System.IO.FileSystemWatcher.remove_Changed(FileSystemEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void add_Created(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.FileSystemEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1607), "FILE", "System.IO.FileSystemWatcher.add_Created(FileSystemEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void remove_Created(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.FileSystemEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1608), "FILE", "System.IO.FileSystemWatcher.remove_Created(FileSystemEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void add_Deleted(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.FileSystemEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1609), "FILE", "System.IO.FileSystemWatcher.add_Deleted(FileSystemEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void remove_Deleted(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.FileSystemEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1610), "FILE", "System.IO.FileSystemWatcher.remove_Deleted(FileSystemEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void add_Error(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.ErrorEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1611), "FILE", "System.IO.FileSystemWatcher.add_Error(ErrorEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void remove_Error(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.ErrorEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1612), "FILE", "System.IO.FileSystemWatcher.remove_Error(ErrorEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void add_Renamed(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.RenamedEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1613), "FILE", "System.IO.FileSystemWatcher.add_Renamed(RenamedEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void remove_Renamed(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.RenamedEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1614), "FILE", "System.IO.FileSystemWatcher.remove_Renamed(RenamedEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IO.WaitForChangedResult WaitForChanged(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.WatcherChangeTypes changeType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = changeType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1615), "FILE", "System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes)", paramObjs, typeof(System.IO.WaitForChangedResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.WaitForChangedResult)retValue;
		}

		public static System.IO.WaitForChangedResult WaitForChanged(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.WatcherChangeTypes changeType, System.Int32 timeout)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = changeType;
			paramObjs[2] = timeout;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1616), "FILE", "System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes, Int32)", paramObjs, typeof(System.IO.WaitForChangedResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.WaitForChangedResult)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1617), "FILE", "System.IO.FileSystemWatcher.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1618), "FILE", "System.IO.FileSystemWatcher.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path, System.String filter)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			paramObjs[2] = filter;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1619), "FILE", "System.IO.FileSystemWatcher.ctor(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Timers.Timer")]
	public class HandlerClass178
	{
		// System.Timers.Timer.EndInit
		private static bool CallerMethod1620(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Timers.Timer.BeginInit
		private static bool CallerMethod1621(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Timers.Timer.set_Site
		private static bool CallerMethod1622(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Timers.Timer.get_Site
		private static bool CallerMethod1623(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Timers.Timer.get_AutoReset
		private static bool CallerMethod1624(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Timers.Timer.set_AutoReset
		private static bool CallerMethod1625(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Timers.Timer.get_Enabled
		private static bool CallerMethod1626(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Timers.Timer.set_Enabled
		private static bool CallerMethod1627(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Timers.Timer.get_Interval
		private static bool CallerMethod1628(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Timers.Timer.set_Interval
		private static bool CallerMethod1629(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Timers.Timer.add_Elapsed
		private static bool CallerMethod1630(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Timers.Timer.remove_Elapsed
		private static bool CallerMethod1631(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Timers.Timer.get_SynchronizingObject
		private static bool CallerMethod1632(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Timers.Timer.set_SynchronizingObject
		private static bool CallerMethod1633(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Timers.Timer.Close
		private static bool CallerMethod1634(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Timers.Timer.Start
		private static bool CallerMethod1635(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Timers.Timer.Stop
		private static bool CallerMethod1636(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Timers.Timer..ctor
		private static bool CallerMethod1637(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Timers.Timer..ctor
		private static bool CallerMethod1638(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void EndInit(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1620), "TIME", "System.Timers.Timer.EndInit()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void BeginInit(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1621), "TIME", "System.Timers.Timer.BeginInit()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_Site(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ISite value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1622), "TIME", "System.Timers.Timer.set_Site(ISite)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.ComponentModel.ISite get_Site(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1623), "TIME", "System.Timers.Timer.get_Site()", paramObjs, typeof(System.ComponentModel.ISite), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.ISite)retValue;
		}

		public static System.Boolean get_AutoReset(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1624), "TIME", "System.Timers.Timer.get_AutoReset()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_AutoReset(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1625), "TIME", "System.Timers.Timer.set_AutoReset(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_Enabled(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1626), "TIME", "System.Timers.Timer.get_Enabled()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_Enabled(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1627), "TIME", "System.Timers.Timer.set_Enabled(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Double get_Interval(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1628), "TIME", "System.Timers.Timer.get_Interval()", paramObjs, typeof(System.Double), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Double)retValue;
		}

		public static void set_Interval(HeatDotNet.MethodInterceptInfo methodIntercept, System.Double value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1629), "TIME", "System.Timers.Timer.set_Interval(Double)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void add_Elapsed(HeatDotNet.MethodInterceptInfo methodIntercept, System.Timers.ElapsedEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1630), "TIME", "System.Timers.Timer.add_Elapsed(ElapsedEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void remove_Elapsed(HeatDotNet.MethodInterceptInfo methodIntercept, System.Timers.ElapsedEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1631), "TIME", "System.Timers.Timer.remove_Elapsed(ElapsedEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.ComponentModel.ISynchronizeInvoke get_SynchronizingObject(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1632), "TIME", "System.Timers.Timer.get_SynchronizingObject()", paramObjs, typeof(System.ComponentModel.ISynchronizeInvoke), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.ISynchronizeInvoke)retValue;
		}

		public static void set_SynchronizingObject(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ISynchronizeInvoke value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1633), "TIME", "System.Timers.Timer.set_SynchronizingObject(ISynchronizeInvoke)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1634), "TIME", "System.Timers.Timer.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Start(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1635), "TIME", "System.Timers.Timer.Start()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Stop(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1636), "TIME", "System.Timers.Timer.Stop()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1637), "TIME", "System.Timers.Timer.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Double interval)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = interval;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1638), "TIME", "System.Timers.Timer.ctor(Double)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.CounterCreationData")]
	public class HandlerClass179
	{
		// System.Diagnostics.CounterCreationData.get_CounterType
		private static bool CallerMethod1639(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.CounterCreationData.set_CounterType
		private static bool CallerMethod1640(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.CounterCreationData.get_CounterName
		private static bool CallerMethod1641(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.CounterCreationData.set_CounterName
		private static bool CallerMethod1642(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.CounterCreationData.get_CounterHelp
		private static bool CallerMethod1643(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.CounterCreationData.set_CounterHelp
		private static bool CallerMethod1644(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.CounterCreationData..ctor
		private static bool CallerMethod1645(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.CounterCreationData..ctor
		private static bool CallerMethod1646(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Diagnostics.PerformanceCounterType get_CounterType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1639), "PROCESS", "System.Diagnostics.CounterCreationData.get_CounterType()", paramObjs, typeof(System.Diagnostics.PerformanceCounterType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.PerformanceCounterType)retValue;
		}

		public static void set_CounterType(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.PerformanceCounterType value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1640), "PROCESS", "System.Diagnostics.CounterCreationData.set_CounterType(PerformanceCounterType)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_CounterName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1641), "PROCESS", "System.Diagnostics.CounterCreationData.get_CounterName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_CounterName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1642), "PROCESS", "System.Diagnostics.CounterCreationData.set_CounterName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_CounterHelp(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1643), "PROCESS", "System.Diagnostics.CounterCreationData.get_CounterHelp()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_CounterHelp(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1644), "PROCESS", "System.Diagnostics.CounterCreationData.set_CounterHelp(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1645), "PROCESS", "System.Diagnostics.CounterCreationData.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String counterName, System.String counterHelp, System.Diagnostics.PerformanceCounterType counterType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = counterName;
			paramObjs[2] = counterHelp;
			paramObjs[3] = counterType;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1646), "PROCESS", "System.Diagnostics.CounterCreationData.ctor(String, String, PerformanceCounterType)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.CounterCreationDataCollection")]
	public class HandlerClass180
	{
		// System.Diagnostics.CounterCreationDataCollection.Remove
		private static bool CallerMethod1647(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.CounterCreationDataCollection.get_Item
		private static bool CallerMethod1648(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.CounterCreationDataCollection.set_Item
		private static bool CallerMethod1649(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.CounterCreationDataCollection.Add
		private static bool CallerMethod1650(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.CounterCreationDataCollection.AddRange
		private static bool CallerMethod1651(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.CounterCreationDataCollection.AddRange
		private static bool CallerMethod1652(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.CounterCreationDataCollection.Contains
		private static bool CallerMethod1653(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.CounterCreationDataCollection.CopyTo
		private static bool CallerMethod1654(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.CounterCreationDataCollection.IndexOf
		private static bool CallerMethod1655(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.CounterCreationDataCollection.Insert
		private static bool CallerMethod1656(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.CounterCreationDataCollection..ctor
		private static bool CallerMethod1657(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.CounterCreationDataCollection..ctor
		private static bool CallerMethod1658(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.CounterCreationDataCollection..ctor
		private static bool CallerMethod1659(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Remove(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.CounterCreationData value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1647), "PROCESS", "System.Diagnostics.CounterCreationDataCollection.Remove(CounterCreationData)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Diagnostics.CounterCreationData get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1648), "PROCESS", "System.Diagnostics.CounterCreationDataCollection.get_Item(Int32)", paramObjs, typeof(System.Diagnostics.CounterCreationData), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.CounterCreationData)retValue;
		}

		public static void set_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index, System.Diagnostics.CounterCreationData value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1649), "PROCESS", "System.Diagnostics.CounterCreationDataCollection.set_Item(Int32, CounterCreationData)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 Add(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.CounterCreationData value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1650), "PROCESS", "System.Diagnostics.CounterCreationDataCollection.Add(CounterCreationData)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void AddRange(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.CounterCreationData[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1651), "PROCESS", "System.Diagnostics.CounterCreationDataCollection.AddRange(CounterCreationData[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddRange(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.CounterCreationDataCollection value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1652), "PROCESS", "System.Diagnostics.CounterCreationDataCollection.AddRange(CounterCreationDataCollection)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean Contains(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.CounterCreationData value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1653), "PROCESS", "System.Diagnostics.CounterCreationDataCollection.Contains(CounterCreationData)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void CopyTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.CounterCreationData[] array, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1654), "PROCESS", "System.Diagnostics.CounterCreationDataCollection.CopyTo(CounterCreationData[], Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.CounterCreationData value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1655), "PROCESS", "System.Diagnostics.CounterCreationDataCollection.IndexOf(CounterCreationData)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Insert(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index, System.Diagnostics.CounterCreationData value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1656), "PROCESS", "System.Diagnostics.CounterCreationDataCollection.Insert(Int32, CounterCreationData)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1657), "PROCESS", "System.Diagnostics.CounterCreationDataCollection.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Diagnostics.CounterCreationDataCollection value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1658), "PROCESS", "System.Diagnostics.CounterCreationDataCollection.ctor(CounterCreationDataCollection)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Diagnostics.CounterCreationData[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1659), "PROCESS", "System.Diagnostics.CounterCreationDataCollection.ctor(CounterCreationData[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.CounterSample")]
	public class HandlerClass181
	{
		// System.Diagnostics.CounterSample.Calculate
		private static bool CallerMethod1660(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.CounterSample.Calculate
		private static bool CallerMethod1661(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Single Calculate(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.CounterSample counterSample)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = counterSample;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1660), "PROCESS", "System.Diagnostics.CounterSample.Calculate(CounterSample)", paramObjs, typeof(System.Single), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Single)retValue;
		}

		public static System.Single Calculate(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.CounterSample counterSample, System.Diagnostics.CounterSample nextCounterSample)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = counterSample;
			paramObjs[2] = nextCounterSample;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1661), "PROCESS", "System.Diagnostics.CounterSample.Calculate(CounterSample, CounterSample)", paramObjs, typeof(System.Single), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Single)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.CounterSampleCalculator")]
	public class HandlerClass182
	{
		// System.Diagnostics.CounterSampleCalculator.ComputeCounterValue
		private static bool CallerMethod1662(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.CounterSampleCalculator.ComputeCounterValue
		private static bool CallerMethod1663(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Single ComputeCounterValue(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.CounterSample newSample)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = newSample;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1662), "PROCESS", "System.Diagnostics.CounterSampleCalculator.ComputeCounterValue(CounterSample)", paramObjs, typeof(System.Single), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Single)retValue;
		}

		public static System.Single ComputeCounterValue(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.CounterSample oldSample, System.Diagnostics.CounterSample newSample)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = oldSample;
			paramObjs[2] = newSample;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1663), "PROCESS", "System.Diagnostics.CounterSampleCalculator.ComputeCounterValue(CounterSample, CounterSample)", paramObjs, typeof(System.Single), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Single)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.DiagnosticsConfigurationHandler")]
	public class HandlerClass183
	{
		// System.Diagnostics.DiagnosticsConfigurationHandler.Create
		private static bool CallerMethod1664(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.DiagnosticsConfigurationHandler..ctor
		private static bool CallerMethod1665(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object parent, System.Object configContext, System.Xml.XmlNode section)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = parent;
			paramObjs[2] = configContext;
			paramObjs[3] = section;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1664), "PROCESS", "System.Diagnostics.DiagnosticsConfigurationHandler.Create(Object, Object, XmlNode)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1665), "PROCESS", "System.Diagnostics.DiagnosticsConfigurationHandler.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.EntryWrittenEventArgs")]
	public class HandlerClass184
	{
		// System.Diagnostics.EntryWrittenEventArgs.get_Entry
		private static bool CallerMethod1666(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EntryWrittenEventArgs..ctor
		private static bool CallerMethod1667(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EntryWrittenEventArgs..ctor
		private static bool CallerMethod1668(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Diagnostics.EventLogEntry get_Entry(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1666), "PROCESS", "System.Diagnostics.EntryWrittenEventArgs.get_Entry()", paramObjs, typeof(System.Diagnostics.EventLogEntry), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.EventLogEntry)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1667), "PROCESS", "System.Diagnostics.EntryWrittenEventArgs.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Diagnostics.EventLogEntry entry)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = entry;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1668), "PROCESS", "System.Diagnostics.EntryWrittenEventArgs.ctor(EventLogEntry)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.EventLog")]
	public class HandlerClass185
	{
		// System.Diagnostics.EventLog.EndInit
		private static bool CallerMethod1669(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.BeginInit
		private static bool CallerMethod1670(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.get_Entries
		private static bool CallerMethod1671(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.get_LogDisplayName
		private static bool CallerMethod1672(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.get_Log
		private static bool CallerMethod1673(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.set_Log
		private static bool CallerMethod1674(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.get_MachineName
		private static bool CallerMethod1675(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.set_MachineName
		private static bool CallerMethod1676(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.get_EnableRaisingEvents
		private static bool CallerMethod1677(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.set_EnableRaisingEvents
		private static bool CallerMethod1678(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.get_SynchronizingObject
		private static bool CallerMethod1679(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.set_SynchronizingObject
		private static bool CallerMethod1680(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.get_Source
		private static bool CallerMethod1681(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.set_Source
		private static bool CallerMethod1682(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.add_EntryWritten
		private static bool CallerMethod1683(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.remove_EntryWritten
		private static bool CallerMethod1684(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.Clear
		private static bool CallerMethod1685(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.Close
		private static bool CallerMethod1686(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.WriteEntry
		private static bool CallerMethod1687(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.WriteEntry
		private static bool CallerMethod1688(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.WriteEntry
		private static bool CallerMethod1689(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.WriteEntry
		private static bool CallerMethod1690(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.WriteEntry
		private static bool CallerMethod1691(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.CreateEventSource
		private static bool CallerMethod1692(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.CreateEventSource
		private static bool CallerMethod1693(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.Delete
		private static bool CallerMethod1694(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.Delete
		private static bool CallerMethod1695(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.DeleteEventSource
		private static bool CallerMethod1696(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.DeleteEventSource
		private static bool CallerMethod1697(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.Exists
		private static bool CallerMethod1698(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.Exists
		private static bool CallerMethod1699(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.GetEventLogs
		private static bool CallerMethod1700(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.GetEventLogs
		private static bool CallerMethod1701(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.SourceExists
		private static bool CallerMethod1702(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.SourceExists
		private static bool CallerMethod1703(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.LogNameFromSourceName
		private static bool CallerMethod1704(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.WriteEntry
		private static bool CallerMethod1705(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.WriteEntry
		private static bool CallerMethod1706(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.WriteEntry
		private static bool CallerMethod1707(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.WriteEntry
		private static bool CallerMethod1708(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog.WriteEntry
		private static bool CallerMethod1709(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 7) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog..ctor
		private static bool CallerMethod1710(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog..ctor
		private static bool CallerMethod1711(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog..ctor
		private static bool CallerMethod1712(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLog..ctor
		private static bool CallerMethod1713(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void EndInit(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1669), "PROCESS", "System.Diagnostics.EventLog.EndInit()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void BeginInit(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1670), "PROCESS", "System.Diagnostics.EventLog.BeginInit()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Diagnostics.EventLogEntryCollection get_Entries(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1671), "PROCESS", "System.Diagnostics.EventLog.get_Entries()", paramObjs, typeof(System.Diagnostics.EventLogEntryCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.EventLogEntryCollection)retValue;
		}

		public static System.String get_LogDisplayName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1672), "PROCESS", "System.Diagnostics.EventLog.get_LogDisplayName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Log(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1673), "PROCESS", "System.Diagnostics.EventLog.get_Log()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Log(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1674), "PROCESS", "System.Diagnostics.EventLog.set_Log(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_MachineName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1675), "PROCESS", "System.Diagnostics.EventLog.get_MachineName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_MachineName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1676), "PROCESS", "System.Diagnostics.EventLog.set_MachineName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_EnableRaisingEvents(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1677), "PROCESS", "System.Diagnostics.EventLog.get_EnableRaisingEvents()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_EnableRaisingEvents(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1678), "PROCESS", "System.Diagnostics.EventLog.set_EnableRaisingEvents(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.ComponentModel.ISynchronizeInvoke get_SynchronizingObject(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1679), "PROCESS", "System.Diagnostics.EventLog.get_SynchronizingObject()", paramObjs, typeof(System.ComponentModel.ISynchronizeInvoke), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.ISynchronizeInvoke)retValue;
		}

		public static void set_SynchronizingObject(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ISynchronizeInvoke value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1680), "PROCESS", "System.Diagnostics.EventLog.set_SynchronizingObject(ISynchronizeInvoke)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Source(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1681), "PROCESS", "System.Diagnostics.EventLog.get_Source()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Source(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1682), "PROCESS", "System.Diagnostics.EventLog.set_Source(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void add_EntryWritten(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.EntryWrittenEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1683), "PROCESS", "System.Diagnostics.EventLog.add_EntryWritten(EntryWrittenEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void remove_EntryWritten(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.EntryWrittenEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1684), "PROCESS", "System.Diagnostics.EventLog.remove_EntryWritten(EntryWrittenEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Clear(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1685), "PROCESS", "System.Diagnostics.EventLog.Clear()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1686), "PROCESS", "System.Diagnostics.EventLog.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteEntry(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1687), "PROCESS", "System.Diagnostics.EventLog.WriteEntry(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteEntry(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message, System.Diagnostics.EventLogEntryType type)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			paramObjs[2] = type;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1688), "PROCESS", "System.Diagnostics.EventLog.WriteEntry(String, EventLogEntryType)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteEntry(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message, System.Diagnostics.EventLogEntryType type, System.Int32 eventID)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			paramObjs[2] = type;
			paramObjs[3] = eventID;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1689), "PROCESS", "System.Diagnostics.EventLog.WriteEntry(String, EventLogEntryType, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteEntry(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message, System.Diagnostics.EventLogEntryType type, System.Int32 eventID, System.Int16 category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			paramObjs[2] = type;
			paramObjs[3] = eventID;
			paramObjs[4] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1690), "PROCESS", "System.Diagnostics.EventLog.WriteEntry(String, EventLogEntryType, Int32, Int16)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteEntry(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message, System.Diagnostics.EventLogEntryType type, System.Int32 eventID, System.Int16 category, System.Byte[] rawData)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			paramObjs[2] = type;
			paramObjs[3] = eventID;
			paramObjs[4] = category;
			paramObjs[5] = rawData;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1691), "PROCESS", "System.Diagnostics.EventLog.WriteEntry(String, EventLogEntryType, Int32, Int16, Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void CreateEventSource(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String logName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = logName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1692), "PROCESS", "System.Diagnostics.EventLog.CreateEventSource(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void CreateEventSource(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String logName, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = logName;
			paramObjs[3] = machineName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1693), "PROCESS", "System.Diagnostics.EventLog.CreateEventSource(String, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Delete(HeatDotNet.MethodInterceptInfo methodIntercept, System.String logName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = logName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1694), "PROCESS", "System.Diagnostics.EventLog.Delete(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Delete(HeatDotNet.MethodInterceptInfo methodIntercept, System.String logName, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = logName;
			paramObjs[2] = machineName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1695), "PROCESS", "System.Diagnostics.EventLog.Delete(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void DeleteEventSource(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1696), "PROCESS", "System.Diagnostics.EventLog.DeleteEventSource(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void DeleteEventSource(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = machineName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1697), "PROCESS", "System.Diagnostics.EventLog.DeleteEventSource(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean Exists(HeatDotNet.MethodInterceptInfo methodIntercept, System.String logName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = logName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1698), "PROCESS", "System.Diagnostics.EventLog.Exists(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean Exists(HeatDotNet.MethodInterceptInfo methodIntercept, System.String logName, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = logName;
			paramObjs[2] = machineName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1699), "PROCESS", "System.Diagnostics.EventLog.Exists(String, String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Diagnostics.EventLog[] GetEventLogs(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1700), "PROCESS", "System.Diagnostics.EventLog.GetEventLogs()", paramObjs, typeof(System.Diagnostics.EventLog[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.EventLog[])retValue;
		}

		public static System.Diagnostics.EventLog[] GetEventLogs(HeatDotNet.MethodInterceptInfo methodIntercept, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = machineName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1701), "PROCESS", "System.Diagnostics.EventLog.GetEventLogs(String)", paramObjs, typeof(System.Diagnostics.EventLog[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.EventLog[])retValue;
		}

		public static System.Boolean SourceExists(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1702), "PROCESS", "System.Diagnostics.EventLog.SourceExists(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean SourceExists(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = machineName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1703), "PROCESS", "System.Diagnostics.EventLog.SourceExists(String, String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String LogNameFromSourceName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = machineName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1704), "PROCESS", "System.Diagnostics.EventLog.LogNameFromSourceName(String, String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void WriteEntry(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1705), "PROCESS", "System.Diagnostics.EventLog.WriteEntry(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteEntry(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String message, System.Diagnostics.EventLogEntryType type)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = message;
			paramObjs[3] = type;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1706), "PROCESS", "System.Diagnostics.EventLog.WriteEntry(String, String, EventLogEntryType)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteEntry(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String message, System.Diagnostics.EventLogEntryType type, System.Int32 eventID)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = message;
			paramObjs[3] = type;
			paramObjs[4] = eventID;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1707), "PROCESS", "System.Diagnostics.EventLog.WriteEntry(String, String, EventLogEntryType, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteEntry(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String message, System.Diagnostics.EventLogEntryType type, System.Int32 eventID, System.Int16 category)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = message;
			paramObjs[3] = type;
			paramObjs[4] = eventID;
			paramObjs[5] = category;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1708), "PROCESS", "System.Diagnostics.EventLog.WriteEntry(String, String, EventLogEntryType, Int32, Int16)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteEntry(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String message, System.Diagnostics.EventLogEntryType type, System.Int32 eventID, System.Int16 category, System.Byte[] rawData)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[7];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = message;
			paramObjs[3] = type;
			paramObjs[4] = eventID;
			paramObjs[5] = category;
			paramObjs[6] = rawData;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1709), "PROCESS", "System.Diagnostics.EventLog.WriteEntry(String, String, EventLogEntryType, Int32, Int16, Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1710), "PROCESS", "System.Diagnostics.EventLog.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String logName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = logName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1711), "PROCESS", "System.Diagnostics.EventLog.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String logName, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = logName;
			paramObjs[2] = machineName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1712), "PROCESS", "System.Diagnostics.EventLog.ctor(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String logName, System.String machineName, System.String source)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = logName;
			paramObjs[2] = machineName;
			paramObjs[3] = source;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1713), "PROCESS", "System.Diagnostics.EventLog.ctor(String, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.EventLogEntry")]
	public class HandlerClass186
	{
		// System.Diagnostics.EventLogEntry.get_MachineName
		private static bool CallerMethod1714(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogEntry.get_Data
		private static bool CallerMethod1715(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogEntry.get_Index
		private static bool CallerMethod1716(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogEntry.get_Category
		private static bool CallerMethod1717(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogEntry.get_CategoryNumber
		private static bool CallerMethod1718(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogEntry.get_EventID
		private static bool CallerMethod1719(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogEntry.get_EntryType
		private static bool CallerMethod1720(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogEntry.get_Message
		private static bool CallerMethod1721(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogEntry.get_Source
		private static bool CallerMethod1722(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogEntry.get_ReplacementStrings
		private static bool CallerMethod1723(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogEntry.get_TimeGenerated
		private static bool CallerMethod1724(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogEntry.get_TimeWritten
		private static bool CallerMethod1725(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogEntry.get_UserName
		private static bool CallerMethod1726(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogEntry.Equals
		private static bool CallerMethod1727(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_MachineName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1714), "PROCESS", "System.Diagnostics.EventLogEntry.get_MachineName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Byte[] get_Data(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1715), "PROCESS", "System.Diagnostics.EventLogEntry.get_Data()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Int32 get_Index(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1716), "PROCESS", "System.Diagnostics.EventLogEntry.get_Index()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String get_Category(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1717), "PROCESS", "System.Diagnostics.EventLogEntry.get_Category()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int16 get_CategoryNumber(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1718), "PROCESS", "System.Diagnostics.EventLogEntry.get_CategoryNumber()", paramObjs, typeof(System.Int16), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int16)retValue;
		}

		public static System.Int32 get_EventID(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1719), "PROCESS", "System.Diagnostics.EventLogEntry.get_EventID()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Diagnostics.EventLogEntryType get_EntryType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1720), "PROCESS", "System.Diagnostics.EventLogEntry.get_EntryType()", paramObjs, typeof(System.Diagnostics.EventLogEntryType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.EventLogEntryType)retValue;
		}

		public static System.String get_Message(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1721), "PROCESS", "System.Diagnostics.EventLogEntry.get_Message()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Source(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1722), "PROCESS", "System.Diagnostics.EventLogEntry.get_Source()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String[] get_ReplacementStrings(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1723), "PROCESS", "System.Diagnostics.EventLogEntry.get_ReplacementStrings()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.DateTime get_TimeGenerated(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1724), "PROCESS", "System.Diagnostics.EventLogEntry.get_TimeGenerated()", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime get_TimeWritten(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1725), "PROCESS", "System.Diagnostics.EventLogEntry.get_TimeWritten()", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.String get_UserName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1726), "PROCESS", "System.Diagnostics.EventLogEntry.get_UserName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.EventLogEntry otherEntry)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = otherEntry;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1727), "PROCESS", "System.Diagnostics.EventLogEntry.Equals(EventLogEntry)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.EventLogEntryCollection")]
	public class HandlerClass187
	{
		// System.Diagnostics.EventLogEntryCollection.GetEnumerator
		private static bool CallerMethod1728(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogEntryCollection.get_Count
		private static bool CallerMethod1729(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogEntryCollection.get_Item
		private static bool CallerMethod1730(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogEntryCollection.CopyTo
		private static bool CallerMethod1731(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Collections.IEnumerator GetEnumerator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1728), "PROCESS", "System.Diagnostics.EventLogEntryCollection.GetEnumerator()", paramObjs, typeof(System.Collections.IEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IEnumerator)retValue;
		}

		public static System.Int32 get_Count(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1729), "PROCESS", "System.Diagnostics.EventLogEntryCollection.get_Count()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Diagnostics.EventLogEntry get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1730), "PROCESS", "System.Diagnostics.EventLogEntryCollection.get_Item(Int32)", paramObjs, typeof(System.Diagnostics.EventLogEntry), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.EventLogEntry)retValue;
		}

		public static void CopyTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.EventLogEntry[] entries, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = entries;
			paramObjs[2] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1731), "PROCESS", "System.Diagnostics.EventLogEntryCollection.CopyTo(EventLogEntry[], Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.EventLogPermission")]
	public class HandlerClass188
	{
		// System.Diagnostics.EventLogPermission.get_PermissionEntries
		private static bool CallerMethod1732(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogPermission..ctor
		private static bool CallerMethod1733(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogPermission..ctor
		private static bool CallerMethod1734(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogPermission..ctor
		private static bool CallerMethod1735(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogPermission..ctor
		private static bool CallerMethod1736(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Diagnostics.EventLogPermissionEntryCollection get_PermissionEntries(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1732), "PROCESS", "System.Diagnostics.EventLogPermission.get_PermissionEntries()", paramObjs, typeof(System.Diagnostics.EventLogPermissionEntryCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.EventLogPermissionEntryCollection)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1733), "PROCESS", "System.Diagnostics.EventLogPermission.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Permissions.PermissionState state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = state;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1734), "PROCESS", "System.Diagnostics.EventLogPermission.ctor(PermissionState)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Diagnostics.EventLogPermissionAccess permissionAccess, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = permissionAccess;
			paramObjs[2] = machineName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1735), "PROCESS", "System.Diagnostics.EventLogPermission.ctor(EventLogPermissionAccess, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Diagnostics.EventLogPermissionEntry[] permissionAccessEntries)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = permissionAccessEntries;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1736), "PROCESS", "System.Diagnostics.EventLogPermission.ctor(EventLogPermissionEntry[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.EventLogPermissionAttribute")]
	public class HandlerClass189
	{
		// System.Diagnostics.EventLogPermissionAttribute.CreatePermission
		private static bool CallerMethod1737(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogPermissionAttribute.get_MachineName
		private static bool CallerMethod1738(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogPermissionAttribute.set_MachineName
		private static bool CallerMethod1739(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogPermissionAttribute.get_PermissionAccess
		private static bool CallerMethod1740(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogPermissionAttribute.set_PermissionAccess
		private static bool CallerMethod1741(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogPermissionAttribute..ctor
		private static bool CallerMethod1742(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Security.IPermission CreatePermission(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1737), "PROCESS", "System.Diagnostics.EventLogPermissionAttribute.CreatePermission()", paramObjs, typeof(System.Security.IPermission), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.IPermission)retValue;
		}

		public static System.String get_MachineName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1738), "PROCESS", "System.Diagnostics.EventLogPermissionAttribute.get_MachineName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_MachineName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1739), "PROCESS", "System.Diagnostics.EventLogPermissionAttribute.set_MachineName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Diagnostics.EventLogPermissionAccess get_PermissionAccess(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1740), "PROCESS", "System.Diagnostics.EventLogPermissionAttribute.get_PermissionAccess()", paramObjs, typeof(System.Diagnostics.EventLogPermissionAccess), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.EventLogPermissionAccess)retValue;
		}

		public static void set_PermissionAccess(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.EventLogPermissionAccess value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1741), "PROCESS", "System.Diagnostics.EventLogPermissionAttribute.set_PermissionAccess(EventLogPermissionAccess)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Permissions.SecurityAction action)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = action;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1742), "PROCESS", "System.Diagnostics.EventLogPermissionAttribute.ctor(SecurityAction)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.EventLogPermissionEntry")]
	public class HandlerClass190
	{
		// System.Diagnostics.EventLogPermissionEntry.get_MachineName
		private static bool CallerMethod1743(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogPermissionEntry.get_PermissionAccess
		private static bool CallerMethod1744(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogPermissionEntry..ctor
		private static bool CallerMethod1745(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_MachineName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1743), "PROCESS", "System.Diagnostics.EventLogPermissionEntry.get_MachineName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Diagnostics.EventLogPermissionAccess get_PermissionAccess(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1744), "PROCESS", "System.Diagnostics.EventLogPermissionEntry.get_PermissionAccess()", paramObjs, typeof(System.Diagnostics.EventLogPermissionAccess), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.EventLogPermissionAccess)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Diagnostics.EventLogPermissionAccess permissionAccess, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = permissionAccess;
			paramObjs[2] = machineName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1745), "PROCESS", "System.Diagnostics.EventLogPermissionEntry.ctor(EventLogPermissionAccess, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.EventLogPermissionEntryCollection")]
	public class HandlerClass191
	{
		// System.Diagnostics.EventLogPermissionEntryCollection.get_Item
		private static bool CallerMethod1746(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogPermissionEntryCollection.set_Item
		private static bool CallerMethod1747(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogPermissionEntryCollection.Add
		private static bool CallerMethod1748(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogPermissionEntryCollection.AddRange
		private static bool CallerMethod1749(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogPermissionEntryCollection.AddRange
		private static bool CallerMethod1750(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogPermissionEntryCollection.Contains
		private static bool CallerMethod1751(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogPermissionEntryCollection.CopyTo
		private static bool CallerMethod1752(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogPermissionEntryCollection.IndexOf
		private static bool CallerMethod1753(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogPermissionEntryCollection.Insert
		private static bool CallerMethod1754(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogPermissionEntryCollection.Remove
		private static bool CallerMethod1755(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Diagnostics.EventLogPermissionEntry get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1746), "PROCESS", "System.Diagnostics.EventLogPermissionEntryCollection.get_Item(Int32)", paramObjs, typeof(System.Diagnostics.EventLogPermissionEntry), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.EventLogPermissionEntry)retValue;
		}

		public static void set_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index, System.Diagnostics.EventLogPermissionEntry value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1747), "PROCESS", "System.Diagnostics.EventLogPermissionEntryCollection.set_Item(Int32, EventLogPermissionEntry)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 Add(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.EventLogPermissionEntry value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1748), "PROCESS", "System.Diagnostics.EventLogPermissionEntryCollection.Add(EventLogPermissionEntry)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void AddRange(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.EventLogPermissionEntry[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1749), "PROCESS", "System.Diagnostics.EventLogPermissionEntryCollection.AddRange(EventLogPermissionEntry[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddRange(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.EventLogPermissionEntryCollection value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1750), "PROCESS", "System.Diagnostics.EventLogPermissionEntryCollection.AddRange(EventLogPermissionEntryCollection)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean Contains(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.EventLogPermissionEntry value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1751), "PROCESS", "System.Diagnostics.EventLogPermissionEntryCollection.Contains(EventLogPermissionEntry)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void CopyTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.EventLogPermissionEntry[] array, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1752), "PROCESS", "System.Diagnostics.EventLogPermissionEntryCollection.CopyTo(EventLogPermissionEntry[], Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.EventLogPermissionEntry value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1753), "PROCESS", "System.Diagnostics.EventLogPermissionEntryCollection.IndexOf(EventLogPermissionEntry)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Insert(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index, System.Diagnostics.EventLogPermissionEntry value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1754), "PROCESS", "System.Diagnostics.EventLogPermissionEntryCollection.Insert(Int32, EventLogPermissionEntry)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Remove(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.EventLogPermissionEntry value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1755), "PROCESS", "System.Diagnostics.EventLogPermissionEntryCollection.Remove(EventLogPermissionEntry)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.EventLogTraceListener")]
	public class HandlerClass192
	{
		// System.Diagnostics.EventLogTraceListener.WriteLine
		private static bool CallerMethod1756(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogTraceListener.Write
		private static bool CallerMethod1757(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogTraceListener.Close
		private static bool CallerMethod1758(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogTraceListener.set_Name
		private static bool CallerMethod1759(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogTraceListener.get_Name
		private static bool CallerMethod1760(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogTraceListener.get_EventLog
		private static bool CallerMethod1761(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogTraceListener.set_EventLog
		private static bool CallerMethod1762(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogTraceListener..ctor
		private static bool CallerMethod1763(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogTraceListener..ctor
		private static bool CallerMethod1764(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.EventLogTraceListener..ctor
		private static bool CallerMethod1765(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1756), "PROCESS", "System.Diagnostics.EventLogTraceListener.WriteLine(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String message)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = message;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1757), "PROCESS", "System.Diagnostics.EventLogTraceListener.Write(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1758), "PROCESS", "System.Diagnostics.EventLogTraceListener.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_Name(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1759), "PROCESS", "System.Diagnostics.EventLogTraceListener.set_Name(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1760), "PROCESS", "System.Diagnostics.EventLogTraceListener.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Diagnostics.EventLog get_EventLog(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1761), "PROCESS", "System.Diagnostics.EventLogTraceListener.get_EventLog()", paramObjs, typeof(System.Diagnostics.EventLog), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.EventLog)retValue;
		}

		public static void set_EventLog(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.EventLog value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1762), "PROCESS", "System.Diagnostics.EventLogTraceListener.set_EventLog(EventLog)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1763), "PROCESS", "System.Diagnostics.EventLogTraceListener.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Diagnostics.EventLog eventLog)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = eventLog;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1764), "PROCESS", "System.Diagnostics.EventLogTraceListener.ctor(EventLog)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String source)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = source;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1765), "PROCESS", "System.Diagnostics.EventLogTraceListener.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.FileVersionInfo")]
	public class HandlerClass193
	{
		// System.Diagnostics.FileVersionInfo.ToString
		private static bool CallerMethod1766(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_Comments
		private static bool CallerMethod1767(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_CompanyName
		private static bool CallerMethod1768(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_FileBuildPart
		private static bool CallerMethod1769(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_FileDescription
		private static bool CallerMethod1770(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_FileMajorPart
		private static bool CallerMethod1771(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_FileMinorPart
		private static bool CallerMethod1772(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_FileName
		private static bool CallerMethod1773(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_FilePrivatePart
		private static bool CallerMethod1774(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_FileVersion
		private static bool CallerMethod1775(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_InternalName
		private static bool CallerMethod1776(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_IsDebug
		private static bool CallerMethod1777(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_IsPatched
		private static bool CallerMethod1778(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_IsPrivateBuild
		private static bool CallerMethod1779(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_IsPreRelease
		private static bool CallerMethod1780(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_IsSpecialBuild
		private static bool CallerMethod1781(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_Language
		private static bool CallerMethod1782(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_LegalCopyright
		private static bool CallerMethod1783(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_LegalTrademarks
		private static bool CallerMethod1784(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_OriginalFilename
		private static bool CallerMethod1785(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_PrivateBuild
		private static bool CallerMethod1786(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_ProductBuildPart
		private static bool CallerMethod1787(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_ProductMajorPart
		private static bool CallerMethod1788(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_ProductMinorPart
		private static bool CallerMethod1789(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_ProductName
		private static bool CallerMethod1790(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_ProductPrivatePart
		private static bool CallerMethod1791(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_ProductVersion
		private static bool CallerMethod1792(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.get_SpecialBuild
		private static bool CallerMethod1793(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.FileVersionInfo.GetVersionInfo
		private static bool CallerMethod1794(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1766), "PROCESS", "System.Diagnostics.FileVersionInfo.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Comments(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1767), "PROCESS", "System.Diagnostics.FileVersionInfo.get_Comments()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_CompanyName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1768), "PROCESS", "System.Diagnostics.FileVersionInfo.get_CompanyName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_FileBuildPart(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1769), "PROCESS", "System.Diagnostics.FileVersionInfo.get_FileBuildPart()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String get_FileDescription(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1770), "PROCESS", "System.Diagnostics.FileVersionInfo.get_FileDescription()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_FileMajorPart(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1771), "PROCESS", "System.Diagnostics.FileVersionInfo.get_FileMajorPart()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_FileMinorPart(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1772), "PROCESS", "System.Diagnostics.FileVersionInfo.get_FileMinorPart()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String get_FileName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1773), "PROCESS", "System.Diagnostics.FileVersionInfo.get_FileName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_FilePrivatePart(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1774), "PROCESS", "System.Diagnostics.FileVersionInfo.get_FilePrivatePart()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String get_FileVersion(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1775), "PROCESS", "System.Diagnostics.FileVersionInfo.get_FileVersion()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_InternalName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1776), "PROCESS", "System.Diagnostics.FileVersionInfo.get_InternalName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean get_IsDebug(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1777), "PROCESS", "System.Diagnostics.FileVersionInfo.get_IsDebug()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsPatched(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1778), "PROCESS", "System.Diagnostics.FileVersionInfo.get_IsPatched()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsPrivateBuild(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1779), "PROCESS", "System.Diagnostics.FileVersionInfo.get_IsPrivateBuild()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsPreRelease(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1780), "PROCESS", "System.Diagnostics.FileVersionInfo.get_IsPreRelease()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsSpecialBuild(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1781), "PROCESS", "System.Diagnostics.FileVersionInfo.get_IsSpecialBuild()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_Language(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1782), "PROCESS", "System.Diagnostics.FileVersionInfo.get_Language()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_LegalCopyright(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1783), "PROCESS", "System.Diagnostics.FileVersionInfo.get_LegalCopyright()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_LegalTrademarks(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1784), "PROCESS", "System.Diagnostics.FileVersionInfo.get_LegalTrademarks()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_OriginalFilename(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1785), "PROCESS", "System.Diagnostics.FileVersionInfo.get_OriginalFilename()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_PrivateBuild(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1786), "PROCESS", "System.Diagnostics.FileVersionInfo.get_PrivateBuild()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_ProductBuildPart(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1787), "PROCESS", "System.Diagnostics.FileVersionInfo.get_ProductBuildPart()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_ProductMajorPart(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1788), "PROCESS", "System.Diagnostics.FileVersionInfo.get_ProductMajorPart()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_ProductMinorPart(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1789), "PROCESS", "System.Diagnostics.FileVersionInfo.get_ProductMinorPart()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String get_ProductName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1790), "PROCESS", "System.Diagnostics.FileVersionInfo.get_ProductName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_ProductPrivatePart(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1791), "PROCESS", "System.Diagnostics.FileVersionInfo.get_ProductPrivatePart()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String get_ProductVersion(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1792), "PROCESS", "System.Diagnostics.FileVersionInfo.get_ProductVersion()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_SpecialBuild(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1793), "PROCESS", "System.Diagnostics.FileVersionInfo.get_SpecialBuild()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Diagnostics.FileVersionInfo GetVersionInfo(HeatDotNet.MethodInterceptInfo methodIntercept, System.String fileName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = fileName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1794), "PROCESS", "System.Diagnostics.FileVersionInfo.GetVersionInfo(String)", paramObjs, typeof(System.Diagnostics.FileVersionInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.FileVersionInfo)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.InstanceData")]
	public class HandlerClass194
	{
		// System.Diagnostics.InstanceData.get_InstanceName
		private static bool CallerMethod1795(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.InstanceData.get_Sample
		private static bool CallerMethod1796(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.InstanceData.get_RawValue
		private static bool CallerMethod1797(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.InstanceData..ctor
		private static bool CallerMethod1798(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_InstanceName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1795), "PROCESS", "System.Diagnostics.InstanceData.get_InstanceName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Diagnostics.CounterSample get_Sample(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1796), "PROCESS", "System.Diagnostics.InstanceData.get_Sample()", paramObjs, typeof(System.Diagnostics.CounterSample), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.CounterSample)retValue;
		}

		public static System.Int64 get_RawValue(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1797), "PROCESS", "System.Diagnostics.InstanceData.get_RawValue()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String instanceName, System.Diagnostics.CounterSample sample)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = instanceName;
			paramObjs[2] = sample;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1798), "PROCESS", "System.Diagnostics.InstanceData.ctor(String, CounterSample)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.InstanceDataCollection")]
	public class HandlerClass195
	{
		// System.Diagnostics.InstanceDataCollection.get_CounterName
		private static bool CallerMethod1799(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.InstanceDataCollection.get_Keys
		private static bool CallerMethod1800(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.InstanceDataCollection.get_Values
		private static bool CallerMethod1801(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.InstanceDataCollection.get_Item
		private static bool CallerMethod1802(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.InstanceDataCollection.Contains
		private static bool CallerMethod1803(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.InstanceDataCollection.CopyTo
		private static bool CallerMethod1804(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.InstanceDataCollection..ctor
		private static bool CallerMethod1805(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_CounterName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1799), "PROCESS", "System.Diagnostics.InstanceDataCollection.get_CounterName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Collections.ICollection get_Keys(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1800), "PROCESS", "System.Diagnostics.InstanceDataCollection.get_Keys()", paramObjs, typeof(System.Collections.ICollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.ICollection)retValue;
		}

		public static System.Collections.ICollection get_Values(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1801), "PROCESS", "System.Diagnostics.InstanceDataCollection.get_Values()", paramObjs, typeof(System.Collections.ICollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.ICollection)retValue;
		}

		public static System.Diagnostics.InstanceData get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.String instanceName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = instanceName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1802), "PROCESS", "System.Diagnostics.InstanceDataCollection.get_Item(String)", paramObjs, typeof(System.Diagnostics.InstanceData), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.InstanceData)retValue;
		}

		public static System.Boolean Contains(HeatDotNet.MethodInterceptInfo methodIntercept, System.String instanceName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = instanceName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1803), "PROCESS", "System.Diagnostics.InstanceDataCollection.Contains(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void CopyTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.InstanceData[] instances, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = instances;
			paramObjs[2] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1804), "PROCESS", "System.Diagnostics.InstanceDataCollection.CopyTo(InstanceData[], Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String counterName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = counterName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1805), "PROCESS", "System.Diagnostics.InstanceDataCollection.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.InstanceDataCollectionCollection")]
	public class HandlerClass196
	{
		// System.Diagnostics.InstanceDataCollectionCollection.get_Item
		private static bool CallerMethod1806(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.InstanceDataCollectionCollection.get_Keys
		private static bool CallerMethod1807(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.InstanceDataCollectionCollection.get_Values
		private static bool CallerMethod1808(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.InstanceDataCollectionCollection.Contains
		private static bool CallerMethod1809(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.InstanceDataCollectionCollection.CopyTo
		private static bool CallerMethod1810(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.InstanceDataCollectionCollection..ctor
		private static bool CallerMethod1811(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Diagnostics.InstanceDataCollection get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.String counterName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = counterName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1806), "PROCESS", "System.Diagnostics.InstanceDataCollectionCollection.get_Item(String)", paramObjs, typeof(System.Diagnostics.InstanceDataCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.InstanceDataCollection)retValue;
		}

		public static System.Collections.ICollection get_Keys(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1807), "PROCESS", "System.Diagnostics.InstanceDataCollectionCollection.get_Keys()", paramObjs, typeof(System.Collections.ICollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.ICollection)retValue;
		}

		public static System.Collections.ICollection get_Values(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1808), "PROCESS", "System.Diagnostics.InstanceDataCollectionCollection.get_Values()", paramObjs, typeof(System.Collections.ICollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.ICollection)retValue;
		}

		public static System.Boolean Contains(HeatDotNet.MethodInterceptInfo methodIntercept, System.String counterName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = counterName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1809), "PROCESS", "System.Diagnostics.InstanceDataCollectionCollection.Contains(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void CopyTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.InstanceDataCollection[] counters, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = counters;
			paramObjs[2] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1810), "PROCESS", "System.Diagnostics.InstanceDataCollectionCollection.CopyTo(InstanceDataCollection[], Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1811), "PROCESS", "System.Diagnostics.InstanceDataCollectionCollection.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.MonitoringDescriptionAttribute")]
	public class HandlerClass197
	{
		// System.Diagnostics.MonitoringDescriptionAttribute.get_Description
		private static bool CallerMethod1812(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.MonitoringDescriptionAttribute..ctor
		private static bool CallerMethod1813(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_Description(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1812), "PROCESS", "System.Diagnostics.MonitoringDescriptionAttribute.get_Description()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String description)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = description;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1813), "PROCESS", "System.Diagnostics.MonitoringDescriptionAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.PerformanceCounter")]
	public class HandlerClass198
	{
		// System.Diagnostics.PerformanceCounter.EndInit
		private static bool CallerMethod1814(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.BeginInit
		private static bool CallerMethod1815(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.get_CategoryName
		private static bool CallerMethod1816(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.set_CategoryName
		private static bool CallerMethod1817(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.get_CounterHelp
		private static bool CallerMethod1818(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.get_CounterName
		private static bool CallerMethod1819(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.set_CounterName
		private static bool CallerMethod1820(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.get_CounterType
		private static bool CallerMethod1821(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.get_InstanceName
		private static bool CallerMethod1822(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.set_InstanceName
		private static bool CallerMethod1823(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.get_ReadOnly
		private static bool CallerMethod1824(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.set_ReadOnly
		private static bool CallerMethod1825(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.get_MachineName
		private static bool CallerMethod1826(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.set_MachineName
		private static bool CallerMethod1827(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.get_RawValue
		private static bool CallerMethod1828(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.set_RawValue
		private static bool CallerMethod1829(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.Close
		private static bool CallerMethod1830(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.Decrement
		private static bool CallerMethod1831(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.IncrementBy
		private static bool CallerMethod1832(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.Increment
		private static bool CallerMethod1833(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.NextSample
		private static bool CallerMethod1834(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.NextValue
		private static bool CallerMethod1835(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.RemoveInstance
		private static bool CallerMethod1836(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter.CloseSharedResources
		private static bool CallerMethod1837(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter..ctor
		private static bool CallerMethod1838(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter..ctor
		private static bool CallerMethod1839(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter..ctor
		private static bool CallerMethod1840(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter..ctor
		private static bool CallerMethod1841(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter..ctor
		private static bool CallerMethod1842(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounter..ctor
		private static bool CallerMethod1843(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void EndInit(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1814), "PROCESS", "System.Diagnostics.PerformanceCounter.EndInit()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void BeginInit(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1815), "PROCESS", "System.Diagnostics.PerformanceCounter.BeginInit()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_CategoryName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1816), "PROCESS", "System.Diagnostics.PerformanceCounter.get_CategoryName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_CategoryName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1817), "PROCESS", "System.Diagnostics.PerformanceCounter.set_CategoryName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_CounterHelp(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1818), "PROCESS", "System.Diagnostics.PerformanceCounter.get_CounterHelp()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_CounterName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1819), "PROCESS", "System.Diagnostics.PerformanceCounter.get_CounterName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_CounterName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1820), "PROCESS", "System.Diagnostics.PerformanceCounter.set_CounterName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Diagnostics.PerformanceCounterType get_CounterType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1821), "PROCESS", "System.Diagnostics.PerformanceCounter.get_CounterType()", paramObjs, typeof(System.Diagnostics.PerformanceCounterType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.PerformanceCounterType)retValue;
		}

		public static System.String get_InstanceName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1822), "PROCESS", "System.Diagnostics.PerformanceCounter.get_InstanceName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_InstanceName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1823), "PROCESS", "System.Diagnostics.PerformanceCounter.set_InstanceName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_ReadOnly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1824), "PROCESS", "System.Diagnostics.PerformanceCounter.get_ReadOnly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_ReadOnly(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1825), "PROCESS", "System.Diagnostics.PerformanceCounter.set_ReadOnly(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_MachineName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1826), "PROCESS", "System.Diagnostics.PerformanceCounter.get_MachineName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_MachineName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1827), "PROCESS", "System.Diagnostics.PerformanceCounter.set_MachineName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int64 get_RawValue(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1828), "PROCESS", "System.Diagnostics.PerformanceCounter.get_RawValue()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static void set_RawValue(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1829), "PROCESS", "System.Diagnostics.PerformanceCounter.set_RawValue(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1830), "PROCESS", "System.Diagnostics.PerformanceCounter.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int64 Decrement(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1831), "PROCESS", "System.Diagnostics.PerformanceCounter.Decrement()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.Int64 IncrementBy(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1832), "PROCESS", "System.Diagnostics.PerformanceCounter.IncrementBy(Int64)", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.Int64 Increment(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1833), "PROCESS", "System.Diagnostics.PerformanceCounter.Increment()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.Diagnostics.CounterSample NextSample(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1834), "PROCESS", "System.Diagnostics.PerformanceCounter.NextSample()", paramObjs, typeof(System.Diagnostics.CounterSample), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.CounterSample)retValue;
		}

		public static System.Single NextValue(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1835), "PROCESS", "System.Diagnostics.PerformanceCounter.NextValue()", paramObjs, typeof(System.Single), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Single)retValue;
		}

		public static void RemoveInstance(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1836), "PROCESS", "System.Diagnostics.PerformanceCounter.RemoveInstance()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void CloseSharedResources(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1837), "PROCESS", "System.Diagnostics.PerformanceCounter.CloseSharedResources()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1838), "PROCESS", "System.Diagnostics.PerformanceCounter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String categoryName, System.String counterName, System.String instanceName, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = categoryName;
			paramObjs[2] = counterName;
			paramObjs[3] = instanceName;
			paramObjs[4] = machineName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1839), "PROCESS", "System.Diagnostics.PerformanceCounter.ctor(String, String, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String categoryName, System.String counterName, System.String instanceName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = categoryName;
			paramObjs[2] = counterName;
			paramObjs[3] = instanceName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1840), "PROCESS", "System.Diagnostics.PerformanceCounter.ctor(String, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String categoryName, System.String counterName, System.String instanceName, System.Boolean readOnly)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = categoryName;
			paramObjs[2] = counterName;
			paramObjs[3] = instanceName;
			paramObjs[4] = readOnly;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1841), "PROCESS", "System.Diagnostics.PerformanceCounter.ctor(String, String, String, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String categoryName, System.String counterName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = categoryName;
			paramObjs[2] = counterName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1842), "PROCESS", "System.Diagnostics.PerformanceCounter.ctor(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String categoryName, System.String counterName, System.Boolean readOnly)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = categoryName;
			paramObjs[2] = counterName;
			paramObjs[3] = readOnly;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1843), "PROCESS", "System.Diagnostics.PerformanceCounter.ctor(String, String, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.PerformanceCounterCategory")]
	public class HandlerClass199
	{
		// System.Diagnostics.PerformanceCounterCategory.get_CategoryName
		private static bool CallerMethod1844(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory.set_CategoryName
		private static bool CallerMethod1845(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory.get_CategoryHelp
		private static bool CallerMethod1846(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory.get_MachineName
		private static bool CallerMethod1847(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory.set_MachineName
		private static bool CallerMethod1848(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory.CounterExists
		private static bool CallerMethod1849(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory.GetCounters
		private static bool CallerMethod1850(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory.GetCounters
		private static bool CallerMethod1851(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory.GetInstanceNames
		private static bool CallerMethod1852(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory.InstanceExists
		private static bool CallerMethod1853(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory.ReadCategory
		private static bool CallerMethod1854(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory.CounterExists
		private static bool CallerMethod1855(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory.CounterExists
		private static bool CallerMethod1856(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory.Create
		private static bool CallerMethod1857(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory.Create
		private static bool CallerMethod1858(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory.Delete
		private static bool CallerMethod1859(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory.Exists
		private static bool CallerMethod1860(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory.Exists
		private static bool CallerMethod1861(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory.GetCategories
		private static bool CallerMethod1862(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory.GetCategories
		private static bool CallerMethod1863(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory.InstanceExists
		private static bool CallerMethod1864(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory.InstanceExists
		private static bool CallerMethod1865(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory..ctor
		private static bool CallerMethod1866(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory..ctor
		private static bool CallerMethod1867(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterCategory..ctor
		private static bool CallerMethod1868(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_CategoryName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1844), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.get_CategoryName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_CategoryName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1845), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.set_CategoryName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_CategoryHelp(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1846), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.get_CategoryHelp()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_MachineName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1847), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.get_MachineName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_MachineName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1848), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.set_MachineName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean CounterExists(HeatDotNet.MethodInterceptInfo methodIntercept, System.String counterName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = counterName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1849), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.CounterExists(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Diagnostics.PerformanceCounter[] GetCounters(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1850), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.GetCounters()", paramObjs, typeof(System.Diagnostics.PerformanceCounter[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.PerformanceCounter[])retValue;
		}

		public static System.Diagnostics.PerformanceCounter[] GetCounters(HeatDotNet.MethodInterceptInfo methodIntercept, System.String instanceName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = instanceName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1851), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.GetCounters(String)", paramObjs, typeof(System.Diagnostics.PerformanceCounter[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.PerformanceCounter[])retValue;
		}

		public static System.String[] GetInstanceNames(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1852), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.GetInstanceNames()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.Boolean InstanceExists(HeatDotNet.MethodInterceptInfo methodIntercept, System.String instanceName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = instanceName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1853), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.InstanceExists(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Diagnostics.InstanceDataCollectionCollection ReadCategory(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1854), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.ReadCategory()", paramObjs, typeof(System.Diagnostics.InstanceDataCollectionCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.InstanceDataCollectionCollection)retValue;
		}

		public static System.Boolean CounterExists(HeatDotNet.MethodInterceptInfo methodIntercept, System.String counterName, System.String categoryName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = counterName;
			paramObjs[2] = categoryName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1855), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.CounterExists(String, String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean CounterExists(HeatDotNet.MethodInterceptInfo methodIntercept, System.String counterName, System.String categoryName, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = counterName;
			paramObjs[2] = categoryName;
			paramObjs[3] = machineName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1856), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.CounterExists(String, String, String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Diagnostics.PerformanceCounterCategory Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.String categoryName, System.String categoryHelp, System.Diagnostics.CounterCreationDataCollection counterData)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = categoryName;
			paramObjs[2] = categoryHelp;
			paramObjs[3] = counterData;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1857), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.Create(String, String, CounterCreationDataCollection)", paramObjs, typeof(System.Diagnostics.PerformanceCounterCategory), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.PerformanceCounterCategory)retValue;
		}

		public static System.Diagnostics.PerformanceCounterCategory Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.String categoryName, System.String categoryHelp, System.String counterName, System.String counterHelp)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = categoryName;
			paramObjs[2] = categoryHelp;
			paramObjs[3] = counterName;
			paramObjs[4] = counterHelp;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1858), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.Create(String, String, String, String)", paramObjs, typeof(System.Diagnostics.PerformanceCounterCategory), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.PerformanceCounterCategory)retValue;
		}

		public static void Delete(HeatDotNet.MethodInterceptInfo methodIntercept, System.String categoryName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = categoryName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1859), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.Delete(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean Exists(HeatDotNet.MethodInterceptInfo methodIntercept, System.String categoryName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = categoryName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1860), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.Exists(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean Exists(HeatDotNet.MethodInterceptInfo methodIntercept, System.String categoryName, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = categoryName;
			paramObjs[2] = machineName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1861), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.Exists(String, String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Diagnostics.PerformanceCounterCategory[] GetCategories(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1862), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.GetCategories()", paramObjs, typeof(System.Diagnostics.PerformanceCounterCategory[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.PerformanceCounterCategory[])retValue;
		}

		public static System.Diagnostics.PerformanceCounterCategory[] GetCategories(HeatDotNet.MethodInterceptInfo methodIntercept, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = machineName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1863), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.GetCategories(String)", paramObjs, typeof(System.Diagnostics.PerformanceCounterCategory[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.PerformanceCounterCategory[])retValue;
		}

		public static System.Boolean InstanceExists(HeatDotNet.MethodInterceptInfo methodIntercept, System.String instanceName, System.String categoryName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = instanceName;
			paramObjs[2] = categoryName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1864), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.InstanceExists(String, String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean InstanceExists(HeatDotNet.MethodInterceptInfo methodIntercept, System.String instanceName, System.String categoryName, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = instanceName;
			paramObjs[2] = categoryName;
			paramObjs[3] = machineName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1865), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.InstanceExists(String, String, String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1866), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String categoryName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = categoryName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1867), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String categoryName, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = categoryName;
			paramObjs[2] = machineName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1868), "PROCESS", "System.Diagnostics.PerformanceCounterCategory.ctor(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.PerformanceCounterManager")]
	public class HandlerClass200
	{
		// System.Diagnostics.PerformanceCounterManager..ctor
		private static bool CallerMethod1869(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1869), "PROCESS", "System.Diagnostics.PerformanceCounterManager.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.PerformanceCounterPermission")]
	public class HandlerClass201
	{
		// System.Diagnostics.PerformanceCounterPermission.get_PermissionEntries
		private static bool CallerMethod1870(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermission..ctor
		private static bool CallerMethod1871(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermission..ctor
		private static bool CallerMethod1872(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermission..ctor
		private static bool CallerMethod1873(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermission..ctor
		private static bool CallerMethod1874(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Diagnostics.PerformanceCounterPermissionEntryCollection get_PermissionEntries(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1870), "PROCESS", "System.Diagnostics.PerformanceCounterPermission.get_PermissionEntries()", paramObjs, typeof(System.Diagnostics.PerformanceCounterPermissionEntryCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.PerformanceCounterPermissionEntryCollection)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1871), "PROCESS", "System.Diagnostics.PerformanceCounterPermission.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Permissions.PermissionState state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = state;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1872), "PROCESS", "System.Diagnostics.PerformanceCounterPermission.ctor(PermissionState)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Diagnostics.PerformanceCounterPermissionAccess permissionAccess, System.String machineName, System.String categoryName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = permissionAccess;
			paramObjs[2] = machineName;
			paramObjs[3] = categoryName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1873), "PROCESS", "System.Diagnostics.PerformanceCounterPermission.ctor(PerformanceCounterPermissionAccess, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Diagnostics.PerformanceCounterPermissionEntry[] permissionAccessEntries)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = permissionAccessEntries;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1874), "PROCESS", "System.Diagnostics.PerformanceCounterPermission.ctor(PerformanceCounterPermissionEntry[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.PerformanceCounterPermissionAttribute")]
	public class HandlerClass202
	{
		// System.Diagnostics.PerformanceCounterPermissionAttribute.CreatePermission
		private static bool CallerMethod1875(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermissionAttribute.get_CategoryName
		private static bool CallerMethod1876(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermissionAttribute.set_CategoryName
		private static bool CallerMethod1877(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermissionAttribute.get_MachineName
		private static bool CallerMethod1878(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermissionAttribute.set_MachineName
		private static bool CallerMethod1879(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermissionAttribute.get_PermissionAccess
		private static bool CallerMethod1880(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermissionAttribute.set_PermissionAccess
		private static bool CallerMethod1881(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermissionAttribute..ctor
		private static bool CallerMethod1882(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Security.IPermission CreatePermission(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1875), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionAttribute.CreatePermission()", paramObjs, typeof(System.Security.IPermission), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.IPermission)retValue;
		}

		public static System.String get_CategoryName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1876), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionAttribute.get_CategoryName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_CategoryName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1877), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionAttribute.set_CategoryName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_MachineName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1878), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionAttribute.get_MachineName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_MachineName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1879), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionAttribute.set_MachineName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Diagnostics.PerformanceCounterPermissionAccess get_PermissionAccess(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1880), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionAttribute.get_PermissionAccess()", paramObjs, typeof(System.Diagnostics.PerformanceCounterPermissionAccess), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.PerformanceCounterPermissionAccess)retValue;
		}

		public static void set_PermissionAccess(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.PerformanceCounterPermissionAccess value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1881), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionAttribute.set_PermissionAccess(PerformanceCounterPermissionAccess)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Permissions.SecurityAction action)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = action;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1882), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionAttribute.ctor(SecurityAction)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.PerformanceCounterPermissionEntry")]
	public class HandlerClass203
	{
		// System.Diagnostics.PerformanceCounterPermissionEntry.get_CategoryName
		private static bool CallerMethod1883(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermissionEntry.get_MachineName
		private static bool CallerMethod1884(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermissionEntry.get_PermissionAccess
		private static bool CallerMethod1885(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermissionEntry..ctor
		private static bool CallerMethod1886(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_CategoryName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1883), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionEntry.get_CategoryName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_MachineName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1884), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionEntry.get_MachineName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Diagnostics.PerformanceCounterPermissionAccess get_PermissionAccess(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1885), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionEntry.get_PermissionAccess()", paramObjs, typeof(System.Diagnostics.PerformanceCounterPermissionAccess), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.PerformanceCounterPermissionAccess)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Diagnostics.PerformanceCounterPermissionAccess permissionAccess, System.String machineName, System.String categoryName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = permissionAccess;
			paramObjs[2] = machineName;
			paramObjs[3] = categoryName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1886), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionEntry.ctor(PerformanceCounterPermissionAccess, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.PerformanceCounterPermissionEntryCollection")]
	public class HandlerClass204
	{
		// System.Diagnostics.PerformanceCounterPermissionEntryCollection.get_Item
		private static bool CallerMethod1887(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermissionEntryCollection.set_Item
		private static bool CallerMethod1888(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermissionEntryCollection.Add
		private static bool CallerMethod1889(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermissionEntryCollection.AddRange
		private static bool CallerMethod1890(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermissionEntryCollection.AddRange
		private static bool CallerMethod1891(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermissionEntryCollection.Contains
		private static bool CallerMethod1892(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermissionEntryCollection.CopyTo
		private static bool CallerMethod1893(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermissionEntryCollection.IndexOf
		private static bool CallerMethod1894(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermissionEntryCollection.Insert
		private static bool CallerMethod1895(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.PerformanceCounterPermissionEntryCollection.Remove
		private static bool CallerMethod1896(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Diagnostics.PerformanceCounterPermissionEntry get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1887), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionEntryCollection.get_Item(Int32)", paramObjs, typeof(System.Diagnostics.PerformanceCounterPermissionEntry), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.PerformanceCounterPermissionEntry)retValue;
		}

		public static void set_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index, System.Diagnostics.PerformanceCounterPermissionEntry value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1888), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionEntryCollection.set_Item(Int32, PerformanceCounterPermissionEntry)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 Add(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.PerformanceCounterPermissionEntry value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1889), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionEntryCollection.Add(PerformanceCounterPermissionEntry)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void AddRange(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.PerformanceCounterPermissionEntry[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1890), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionEntryCollection.AddRange(PerformanceCounterPermissionEntry[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddRange(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.PerformanceCounterPermissionEntryCollection value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1891), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionEntryCollection.AddRange(PerformanceCounterPermissionEntryCollection)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean Contains(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.PerformanceCounterPermissionEntry value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1892), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionEntryCollection.Contains(PerformanceCounterPermissionEntry)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void CopyTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.PerformanceCounterPermissionEntry[] array, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1893), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionEntryCollection.CopyTo(PerformanceCounterPermissionEntry[], Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.PerformanceCounterPermissionEntry value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1894), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionEntryCollection.IndexOf(PerformanceCounterPermissionEntry)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Insert(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index, System.Diagnostics.PerformanceCounterPermissionEntry value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			paramObjs[2] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1895), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionEntryCollection.Insert(Int32, PerformanceCounterPermissionEntry)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Remove(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.PerformanceCounterPermissionEntry value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1896), "PROCESS", "System.Diagnostics.PerformanceCounterPermissionEntryCollection.Remove(PerformanceCounterPermissionEntry)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.Process")]
	public class HandlerClass205
	{
		// System.Diagnostics.Process.ToString
		private static bool CallerMethod1897(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_BasePriority
		private static bool CallerMethod1898(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_ExitCode
		private static bool CallerMethod1899(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_HasExited
		private static bool CallerMethod1900(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_ExitTime
		private static bool CallerMethod1901(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_Handle
		private static bool CallerMethod1902(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_HandleCount
		private static bool CallerMethod1903(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_Id
		private static bool CallerMethod1904(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_MachineName
		private static bool CallerMethod1905(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_MainWindowHandle
		private static bool CallerMethod1906(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_MainWindowTitle
		private static bool CallerMethod1907(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_MainModule
		private static bool CallerMethod1908(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_MaxWorkingSet
		private static bool CallerMethod1909(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.set_MaxWorkingSet
		private static bool CallerMethod1910(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_MinWorkingSet
		private static bool CallerMethod1911(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.set_MinWorkingSet
		private static bool CallerMethod1912(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_Modules
		private static bool CallerMethod1913(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_NonpagedSystemMemorySize
		private static bool CallerMethod1914(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_PagedMemorySize
		private static bool CallerMethod1915(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_PagedSystemMemorySize
		private static bool CallerMethod1916(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_PeakPagedMemorySize
		private static bool CallerMethod1917(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_PeakWorkingSet
		private static bool CallerMethod1918(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_PeakVirtualMemorySize
		private static bool CallerMethod1919(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_PriorityBoostEnabled
		private static bool CallerMethod1920(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.set_PriorityBoostEnabled
		private static bool CallerMethod1921(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_PriorityClass
		private static bool CallerMethod1922(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.set_PriorityClass
		private static bool CallerMethod1923(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_PrivateMemorySize
		private static bool CallerMethod1924(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_PrivilegedProcessorTime
		private static bool CallerMethod1925(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_ProcessName
		private static bool CallerMethod1926(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_ProcessorAffinity
		private static bool CallerMethod1927(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.set_ProcessorAffinity
		private static bool CallerMethod1928(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_Responding
		private static bool CallerMethod1929(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_StartInfo
		private static bool CallerMethod1930(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.set_StartInfo
		private static bool CallerMethod1931(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_StartTime
		private static bool CallerMethod1932(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_SynchronizingObject
		private static bool CallerMethod1933(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.set_SynchronizingObject
		private static bool CallerMethod1934(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_Threads
		private static bool CallerMethod1935(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_TotalProcessorTime
		private static bool CallerMethod1936(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_UserProcessorTime
		private static bool CallerMethod1937(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_VirtualMemorySize
		private static bool CallerMethod1938(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_EnableRaisingEvents
		private static bool CallerMethod1939(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.set_EnableRaisingEvents
		private static bool CallerMethod1940(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_StandardInput
		private static bool CallerMethod1941(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_StandardOutput
		private static bool CallerMethod1942(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_StandardError
		private static bool CallerMethod1943(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.get_WorkingSet
		private static bool CallerMethod1944(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.add_Exited
		private static bool CallerMethod1945(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.remove_Exited
		private static bool CallerMethod1946(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.CloseMainWindow
		private static bool CallerMethod1947(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.Close
		private static bool CallerMethod1948(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.Refresh
		private static bool CallerMethod1949(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.Start
		private static bool CallerMethod1950(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.Kill
		private static bool CallerMethod1951(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.WaitForExit
		private static bool CallerMethod1952(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.WaitForExit
		private static bool CallerMethod1953(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.WaitForInputIdle
		private static bool CallerMethod1954(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.WaitForInputIdle
		private static bool CallerMethod1955(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.EnterDebugMode
		private static bool CallerMethod1956(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.LeaveDebugMode
		private static bool CallerMethod1957(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.GetProcessById
		private static bool CallerMethod1958(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.GetProcessById
		private static bool CallerMethod1959(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.GetProcessesByName
		private static bool CallerMethod1960(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.GetProcessesByName
		private static bool CallerMethod1961(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.GetProcesses
		private static bool CallerMethod1962(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.GetProcesses
		private static bool CallerMethod1963(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.GetCurrentProcess
		private static bool CallerMethod1964(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.Start
		private static bool CallerMethod1965(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.Start
		private static bool CallerMethod1966(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process.Start
		private static bool CallerMethod1967(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.Process..ctor
		private static bool CallerMethod1968(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1897), "PROCESS", "System.Diagnostics.Process.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_BasePriority(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1898), "PROCESS", "System.Diagnostics.Process.get_BasePriority()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_ExitCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1899), "PROCESS", "System.Diagnostics.Process.get_ExitCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean get_HasExited(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1900), "PROCESS", "System.Diagnostics.Process.get_HasExited()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.DateTime get_ExitTime(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1901), "PROCESS", "System.Diagnostics.Process.get_ExitTime()", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.IntPtr get_Handle(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1902), "PROCESS", "System.Diagnostics.Process.get_Handle()", paramObjs, typeof(System.IntPtr), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IntPtr)retValue;
		}

		public static System.Int32 get_HandleCount(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1903), "PROCESS", "System.Diagnostics.Process.get_HandleCount()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_Id(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1904), "PROCESS", "System.Diagnostics.Process.get_Id()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String get_MachineName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1905), "PROCESS", "System.Diagnostics.Process.get_MachineName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.IntPtr get_MainWindowHandle(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1906), "PROCESS", "System.Diagnostics.Process.get_MainWindowHandle()", paramObjs, typeof(System.IntPtr), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IntPtr)retValue;
		}

		public static System.String get_MainWindowTitle(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1907), "PROCESS", "System.Diagnostics.Process.get_MainWindowTitle()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Diagnostics.ProcessModule get_MainModule(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1908), "PROCESS", "System.Diagnostics.Process.get_MainModule()", paramObjs, typeof(System.Diagnostics.ProcessModule), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.ProcessModule)retValue;
		}

		public static System.IntPtr get_MaxWorkingSet(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1909), "PROCESS", "System.Diagnostics.Process.get_MaxWorkingSet()", paramObjs, typeof(System.IntPtr), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IntPtr)retValue;
		}

		public static void set_MaxWorkingSet(HeatDotNet.MethodInterceptInfo methodIntercept, System.IntPtr value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1910), "PROCESS", "System.Diagnostics.Process.set_MaxWorkingSet(IntPtr)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IntPtr get_MinWorkingSet(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1911), "PROCESS", "System.Diagnostics.Process.get_MinWorkingSet()", paramObjs, typeof(System.IntPtr), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IntPtr)retValue;
		}

		public static void set_MinWorkingSet(HeatDotNet.MethodInterceptInfo methodIntercept, System.IntPtr value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1912), "PROCESS", "System.Diagnostics.Process.set_MinWorkingSet(IntPtr)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Diagnostics.ProcessModuleCollection get_Modules(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1913), "PROCESS", "System.Diagnostics.Process.get_Modules()", paramObjs, typeof(System.Diagnostics.ProcessModuleCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.ProcessModuleCollection)retValue;
		}

		public static System.Int32 get_NonpagedSystemMemorySize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1914), "PROCESS", "System.Diagnostics.Process.get_NonpagedSystemMemorySize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_PagedMemorySize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1915), "PROCESS", "System.Diagnostics.Process.get_PagedMemorySize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_PagedSystemMemorySize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1916), "PROCESS", "System.Diagnostics.Process.get_PagedSystemMemorySize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_PeakPagedMemorySize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1917), "PROCESS", "System.Diagnostics.Process.get_PeakPagedMemorySize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_PeakWorkingSet(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1918), "PROCESS", "System.Diagnostics.Process.get_PeakWorkingSet()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_PeakVirtualMemorySize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1919), "PROCESS", "System.Diagnostics.Process.get_PeakVirtualMemorySize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean get_PriorityBoostEnabled(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1920), "PROCESS", "System.Diagnostics.Process.get_PriorityBoostEnabled()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_PriorityBoostEnabled(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1921), "PROCESS", "System.Diagnostics.Process.set_PriorityBoostEnabled(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Diagnostics.ProcessPriorityClass get_PriorityClass(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1922), "PROCESS", "System.Diagnostics.Process.get_PriorityClass()", paramObjs, typeof(System.Diagnostics.ProcessPriorityClass), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.ProcessPriorityClass)retValue;
		}

		public static void set_PriorityClass(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.ProcessPriorityClass value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1923), "PROCESS", "System.Diagnostics.Process.set_PriorityClass(ProcessPriorityClass)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_PrivateMemorySize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1924), "PROCESS", "System.Diagnostics.Process.get_PrivateMemorySize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.TimeSpan get_PrivilegedProcessorTime(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1925), "PROCESS", "System.Diagnostics.Process.get_PrivilegedProcessorTime()", paramObjs, typeof(System.TimeSpan), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.TimeSpan)retValue;
		}

		public static System.String get_ProcessName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1926), "PROCESS", "System.Diagnostics.Process.get_ProcessName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.IntPtr get_ProcessorAffinity(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1927), "PROCESS", "System.Diagnostics.Process.get_ProcessorAffinity()", paramObjs, typeof(System.IntPtr), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IntPtr)retValue;
		}

		public static void set_ProcessorAffinity(HeatDotNet.MethodInterceptInfo methodIntercept, System.IntPtr value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1928), "PROCESS", "System.Diagnostics.Process.set_ProcessorAffinity(IntPtr)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_Responding(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1929), "PROCESS", "System.Diagnostics.Process.get_Responding()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Diagnostics.ProcessStartInfo get_StartInfo(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1930), "PROCESS", "System.Diagnostics.Process.get_StartInfo()", paramObjs, typeof(System.Diagnostics.ProcessStartInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.ProcessStartInfo)retValue;
		}

		public static void set_StartInfo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.ProcessStartInfo value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1931), "PROCESS", "System.Diagnostics.Process.set_StartInfo(ProcessStartInfo)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.DateTime get_StartTime(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1932), "PROCESS", "System.Diagnostics.Process.get_StartTime()", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.ComponentModel.ISynchronizeInvoke get_SynchronizingObject(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1933), "PROCESS", "System.Diagnostics.Process.get_SynchronizingObject()", paramObjs, typeof(System.ComponentModel.ISynchronizeInvoke), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.ComponentModel.ISynchronizeInvoke)retValue;
		}

		public static void set_SynchronizingObject(HeatDotNet.MethodInterceptInfo methodIntercept, System.ComponentModel.ISynchronizeInvoke value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1934), "PROCESS", "System.Diagnostics.Process.set_SynchronizingObject(ISynchronizeInvoke)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Diagnostics.ProcessThreadCollection get_Threads(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1935), "PROCESS", "System.Diagnostics.Process.get_Threads()", paramObjs, typeof(System.Diagnostics.ProcessThreadCollection), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.ProcessThreadCollection)retValue;
		}

		public static System.TimeSpan get_TotalProcessorTime(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1936), "PROCESS", "System.Diagnostics.Process.get_TotalProcessorTime()", paramObjs, typeof(System.TimeSpan), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.TimeSpan)retValue;
		}

		public static System.TimeSpan get_UserProcessorTime(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1937), "PROCESS", "System.Diagnostics.Process.get_UserProcessorTime()", paramObjs, typeof(System.TimeSpan), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.TimeSpan)retValue;
		}

		public static System.Int32 get_VirtualMemorySize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1938), "PROCESS", "System.Diagnostics.Process.get_VirtualMemorySize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean get_EnableRaisingEvents(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1939), "PROCESS", "System.Diagnostics.Process.get_EnableRaisingEvents()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_EnableRaisingEvents(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1940), "PROCESS", "System.Diagnostics.Process.set_EnableRaisingEvents(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IO.StreamWriter get_StandardInput(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1941), "PROCESS", "System.Diagnostics.Process.get_StandardInput()", paramObjs, typeof(System.IO.StreamWriter), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.StreamWriter)retValue;
		}

		public static System.IO.StreamReader get_StandardOutput(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1942), "PROCESS", "System.Diagnostics.Process.get_StandardOutput()", paramObjs, typeof(System.IO.StreamReader), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.StreamReader)retValue;
		}

		public static System.IO.StreamReader get_StandardError(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1943), "PROCESS", "System.Diagnostics.Process.get_StandardError()", paramObjs, typeof(System.IO.StreamReader), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.StreamReader)retValue;
		}

		public static System.Int32 get_WorkingSet(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1944), "PROCESS", "System.Diagnostics.Process.get_WorkingSet()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void add_Exited(HeatDotNet.MethodInterceptInfo methodIntercept, System.EventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1945), "PROCESS", "System.Diagnostics.Process.add_Exited(EventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void remove_Exited(HeatDotNet.MethodInterceptInfo methodIntercept, System.EventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1946), "PROCESS", "System.Diagnostics.Process.remove_Exited(EventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean CloseMainWindow(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1947), "PROCESS", "System.Diagnostics.Process.CloseMainWindow()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1948), "PROCESS", "System.Diagnostics.Process.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Refresh(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1949), "PROCESS", "System.Diagnostics.Process.Refresh()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean Start(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1950), "PROCESS", "System.Diagnostics.Process.Start()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void Kill(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1951), "PROCESS", "System.Diagnostics.Process.Kill()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean WaitForExit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 milliseconds)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = milliseconds;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1952), "PROCESS", "System.Diagnostics.Process.WaitForExit(Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void WaitForExit(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1953), "PROCESS", "System.Diagnostics.Process.WaitForExit()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean WaitForInputIdle(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 milliseconds)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = milliseconds;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1954), "PROCESS", "System.Diagnostics.Process.WaitForInputIdle(Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean WaitForInputIdle(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1955), "PROCESS", "System.Diagnostics.Process.WaitForInputIdle()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void EnterDebugMode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1956), "PROCESS", "System.Diagnostics.Process.EnterDebugMode()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void LeaveDebugMode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1957), "PROCESS", "System.Diagnostics.Process.LeaveDebugMode()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Diagnostics.Process GetProcessById(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 processId, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = processId;
			paramObjs[2] = machineName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1958), "PROCESS", "System.Diagnostics.Process.GetProcessById(Int32, String)", paramObjs, typeof(System.Diagnostics.Process), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.Process)retValue;
		}

		public static System.Diagnostics.Process GetProcessById(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 processId)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = processId;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1959), "PROCESS", "System.Diagnostics.Process.GetProcessById(Int32)", paramObjs, typeof(System.Diagnostics.Process), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.Process)retValue;
		}

		public static System.Diagnostics.Process[] GetProcessesByName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String processName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = processName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1960), "PROCESS", "System.Diagnostics.Process.GetProcessesByName(String)", paramObjs, typeof(System.Diagnostics.Process[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.Process[])retValue;
		}

		public static System.Diagnostics.Process[] GetProcessesByName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String processName, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = processName;
			paramObjs[2] = machineName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1961), "PROCESS", "System.Diagnostics.Process.GetProcessesByName(String, String)", paramObjs, typeof(System.Diagnostics.Process[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.Process[])retValue;
		}

		public static System.Diagnostics.Process[] GetProcesses(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1962), "PROCESS", "System.Diagnostics.Process.GetProcesses()", paramObjs, typeof(System.Diagnostics.Process[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.Process[])retValue;
		}

		public static System.Diagnostics.Process[] GetProcesses(HeatDotNet.MethodInterceptInfo methodIntercept, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = machineName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1963), "PROCESS", "System.Diagnostics.Process.GetProcesses(String)", paramObjs, typeof(System.Diagnostics.Process[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.Process[])retValue;
		}

		public static System.Diagnostics.Process GetCurrentProcess(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1964), "PROCESS", "System.Diagnostics.Process.GetCurrentProcess()", paramObjs, typeof(System.Diagnostics.Process), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.Process)retValue;
		}

		public static System.Diagnostics.Process Start(HeatDotNet.MethodInterceptInfo methodIntercept, System.String fileName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = fileName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1965), "PROCESS", "System.Diagnostics.Process.Start(String)", paramObjs, typeof(System.Diagnostics.Process), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.Process)retValue;
		}

		public static System.Diagnostics.Process Start(HeatDotNet.MethodInterceptInfo methodIntercept, System.String fileName, System.String arguments)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = fileName;
			paramObjs[2] = arguments;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1966), "PROCESS", "System.Diagnostics.Process.Start(String, String)", paramObjs, typeof(System.Diagnostics.Process), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.Process)retValue;
		}

		public static System.Diagnostics.Process Start(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.ProcessStartInfo startInfo)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = startInfo;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1967), "PROCESS", "System.Diagnostics.Process.Start(ProcessStartInfo)", paramObjs, typeof(System.Diagnostics.Process), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.Process)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1968), "PROCESS", "System.Diagnostics.Process.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.ProcessModule")]
	public class HandlerClass206
	{
		// System.Diagnostics.ProcessModule.ToString
		private static bool CallerMethod1969(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessModule.get_ModuleName
		private static bool CallerMethod1970(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessModule.get_FileName
		private static bool CallerMethod1971(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessModule.get_BaseAddress
		private static bool CallerMethod1972(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessModule.get_ModuleMemorySize
		private static bool CallerMethod1973(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessModule.get_EntryPointAddress
		private static bool CallerMethod1974(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessModule.get_FileVersionInfo
		private static bool CallerMethod1975(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1969), "PROCESS", "System.Diagnostics.ProcessModule.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_ModuleName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1970), "PROCESS", "System.Diagnostics.ProcessModule.get_ModuleName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_FileName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1971), "PROCESS", "System.Diagnostics.ProcessModule.get_FileName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.IntPtr get_BaseAddress(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1972), "PROCESS", "System.Diagnostics.ProcessModule.get_BaseAddress()", paramObjs, typeof(System.IntPtr), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IntPtr)retValue;
		}

		public static System.Int32 get_ModuleMemorySize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1973), "PROCESS", "System.Diagnostics.ProcessModule.get_ModuleMemorySize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.IntPtr get_EntryPointAddress(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1974), "PROCESS", "System.Diagnostics.ProcessModule.get_EntryPointAddress()", paramObjs, typeof(System.IntPtr), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IntPtr)retValue;
		}

		public static System.Diagnostics.FileVersionInfo get_FileVersionInfo(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1975), "PROCESS", "System.Diagnostics.ProcessModule.get_FileVersionInfo()", paramObjs, typeof(System.Diagnostics.FileVersionInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.FileVersionInfo)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.ProcessModuleCollection")]
	public class HandlerClass207
	{
		// System.Diagnostics.ProcessModuleCollection.get_Item
		private static bool CallerMethod1976(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessModuleCollection.IndexOf
		private static bool CallerMethod1977(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessModuleCollection.Contains
		private static bool CallerMethod1978(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessModuleCollection.CopyTo
		private static bool CallerMethod1979(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessModuleCollection..ctor
		private static bool CallerMethod1980(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Diagnostics.ProcessModule get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1976), "PROCESS", "System.Diagnostics.ProcessModuleCollection.get_Item(Int32)", paramObjs, typeof(System.Diagnostics.ProcessModule), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.ProcessModule)retValue;
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.ProcessModule module)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = module;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1977), "PROCESS", "System.Diagnostics.ProcessModuleCollection.IndexOf(ProcessModule)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Contains(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.ProcessModule module)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = module;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1978), "PROCESS", "System.Diagnostics.ProcessModuleCollection.Contains(ProcessModule)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void CopyTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.ProcessModule[] array, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1979), "PROCESS", "System.Diagnostics.ProcessModuleCollection.CopyTo(ProcessModule[], Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Diagnostics.ProcessModule[] processModules)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = processModules;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1980), "PROCESS", "System.Diagnostics.ProcessModuleCollection.ctor(ProcessModule[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.ProcessStartInfo")]
	public class HandlerClass208
	{
		// System.Diagnostics.ProcessStartInfo.get_Verb
		private static bool CallerMethod1981(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.set_Verb
		private static bool CallerMethod1982(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.get_Arguments
		private static bool CallerMethod1983(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.set_Arguments
		private static bool CallerMethod1984(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.get_CreateNoWindow
		private static bool CallerMethod1985(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.set_CreateNoWindow
		private static bool CallerMethod1986(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.get_EnvironmentVariables
		private static bool CallerMethod1987(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.get_RedirectStandardInput
		private static bool CallerMethod1988(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.set_RedirectStandardInput
		private static bool CallerMethod1989(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.get_RedirectStandardOutput
		private static bool CallerMethod1990(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.set_RedirectStandardOutput
		private static bool CallerMethod1991(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.get_RedirectStandardError
		private static bool CallerMethod1992(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.set_RedirectStandardError
		private static bool CallerMethod1993(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.get_UseShellExecute
		private static bool CallerMethod1994(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.set_UseShellExecute
		private static bool CallerMethod1995(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.get_Verbs
		private static bool CallerMethod1996(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.get_FileName
		private static bool CallerMethod1997(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.set_FileName
		private static bool CallerMethod1998(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.get_WorkingDirectory
		private static bool CallerMethod1999(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.set_WorkingDirectory
		private static bool CallerMethod2000(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.get_ErrorDialog
		private static bool CallerMethod2001(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.set_ErrorDialog
		private static bool CallerMethod2002(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.get_ErrorDialogParentHandle
		private static bool CallerMethod2003(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.set_ErrorDialogParentHandle
		private static bool CallerMethod2004(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.get_WindowStyle
		private static bool CallerMethod2005(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo.set_WindowStyle
		private static bool CallerMethod2006(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo..ctor
		private static bool CallerMethod2007(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo..ctor
		private static bool CallerMethod2008(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessStartInfo..ctor
		private static bool CallerMethod2009(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_Verb(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1981), "PROCESS", "System.Diagnostics.ProcessStartInfo.get_Verb()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Verb(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1982), "PROCESS", "System.Diagnostics.ProcessStartInfo.set_Verb(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Arguments(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1983), "PROCESS", "System.Diagnostics.ProcessStartInfo.get_Arguments()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Arguments(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1984), "PROCESS", "System.Diagnostics.ProcessStartInfo.set_Arguments(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_CreateNoWindow(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1985), "PROCESS", "System.Diagnostics.ProcessStartInfo.get_CreateNoWindow()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_CreateNoWindow(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1986), "PROCESS", "System.Diagnostics.ProcessStartInfo.set_CreateNoWindow(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Collections.Specialized.StringDictionary get_EnvironmentVariables(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1987), "PROCESS", "System.Diagnostics.ProcessStartInfo.get_EnvironmentVariables()", paramObjs, typeof(System.Collections.Specialized.StringDictionary), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.Specialized.StringDictionary)retValue;
		}

		public static System.Boolean get_RedirectStandardInput(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1988), "PROCESS", "System.Diagnostics.ProcessStartInfo.get_RedirectStandardInput()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_RedirectStandardInput(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1989), "PROCESS", "System.Diagnostics.ProcessStartInfo.set_RedirectStandardInput(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_RedirectStandardOutput(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1990), "PROCESS", "System.Diagnostics.ProcessStartInfo.get_RedirectStandardOutput()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_RedirectStandardOutput(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1991), "PROCESS", "System.Diagnostics.ProcessStartInfo.set_RedirectStandardOutput(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_RedirectStandardError(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1992), "PROCESS", "System.Diagnostics.ProcessStartInfo.get_RedirectStandardError()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_RedirectStandardError(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1993), "PROCESS", "System.Diagnostics.ProcessStartInfo.set_RedirectStandardError(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_UseShellExecute(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1994), "PROCESS", "System.Diagnostics.ProcessStartInfo.get_UseShellExecute()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_UseShellExecute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1995), "PROCESS", "System.Diagnostics.ProcessStartInfo.set_UseShellExecute(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String[] get_Verbs(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1996), "PROCESS", "System.Diagnostics.ProcessStartInfo.get_Verbs()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.String get_FileName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1997), "PROCESS", "System.Diagnostics.ProcessStartInfo.get_FileName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_FileName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1998), "PROCESS", "System.Diagnostics.ProcessStartInfo.set_FileName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_WorkingDirectory(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1999), "PROCESS", "System.Diagnostics.ProcessStartInfo.get_WorkingDirectory()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_WorkingDirectory(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2000), "PROCESS", "System.Diagnostics.ProcessStartInfo.set_WorkingDirectory(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_ErrorDialog(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2001), "PROCESS", "System.Diagnostics.ProcessStartInfo.get_ErrorDialog()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_ErrorDialog(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2002), "PROCESS", "System.Diagnostics.ProcessStartInfo.set_ErrorDialog(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IntPtr get_ErrorDialogParentHandle(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2003), "PROCESS", "System.Diagnostics.ProcessStartInfo.get_ErrorDialogParentHandle()", paramObjs, typeof(System.IntPtr), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IntPtr)retValue;
		}

		public static void set_ErrorDialogParentHandle(HeatDotNet.MethodInterceptInfo methodIntercept, System.IntPtr value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2004), "PROCESS", "System.Diagnostics.ProcessStartInfo.set_ErrorDialogParentHandle(IntPtr)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Diagnostics.ProcessWindowStyle get_WindowStyle(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2005), "PROCESS", "System.Diagnostics.ProcessStartInfo.get_WindowStyle()", paramObjs, typeof(System.Diagnostics.ProcessWindowStyle), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.ProcessWindowStyle)retValue;
		}

		public static void set_WindowStyle(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.ProcessWindowStyle value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2006), "PROCESS", "System.Diagnostics.ProcessStartInfo.set_WindowStyle(ProcessWindowStyle)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2007), "PROCESS", "System.Diagnostics.ProcessStartInfo.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String fileName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = fileName;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2008), "PROCESS", "System.Diagnostics.ProcessStartInfo.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String fileName, System.String arguments)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = fileName;
			paramObjs[2] = arguments;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2009), "PROCESS", "System.Diagnostics.ProcessStartInfo.ctor(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.ProcessThread")]
	public class HandlerClass209
	{
		// System.Diagnostics.ProcessThread.get_BasePriority
		private static bool CallerMethod2010(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThread.get_CurrentPriority
		private static bool CallerMethod2011(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThread.get_Id
		private static bool CallerMethod2012(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThread.set_IdealProcessor
		private static bool CallerMethod2013(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThread.get_PriorityBoostEnabled
		private static bool CallerMethod2014(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThread.set_PriorityBoostEnabled
		private static bool CallerMethod2015(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThread.get_PriorityLevel
		private static bool CallerMethod2016(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThread.set_PriorityLevel
		private static bool CallerMethod2017(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThread.get_PrivilegedProcessorTime
		private static bool CallerMethod2018(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThread.get_StartAddress
		private static bool CallerMethod2019(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThread.get_StartTime
		private static bool CallerMethod2020(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThread.get_ThreadState
		private static bool CallerMethod2021(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThread.get_TotalProcessorTime
		private static bool CallerMethod2022(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThread.get_UserProcessorTime
		private static bool CallerMethod2023(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThread.get_WaitReason
		private static bool CallerMethod2024(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThread.ResetIdealProcessor
		private static bool CallerMethod2025(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThread.set_ProcessorAffinity
		private static bool CallerMethod2026(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 get_BasePriority(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2010), "PROCESS", "System.Diagnostics.ProcessThread.get_BasePriority()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_CurrentPriority(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2011), "PROCESS", "System.Diagnostics.ProcessThread.get_CurrentPriority()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_Id(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2012), "PROCESS", "System.Diagnostics.ProcessThread.get_Id()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_IdealProcessor(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2013), "PROCESS", "System.Diagnostics.ProcessThread.set_IdealProcessor(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_PriorityBoostEnabled(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2014), "PROCESS", "System.Diagnostics.ProcessThread.get_PriorityBoostEnabled()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_PriorityBoostEnabled(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2015), "PROCESS", "System.Diagnostics.ProcessThread.set_PriorityBoostEnabled(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Diagnostics.ThreadPriorityLevel get_PriorityLevel(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2016), "PROCESS", "System.Diagnostics.ProcessThread.get_PriorityLevel()", paramObjs, typeof(System.Diagnostics.ThreadPriorityLevel), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.ThreadPriorityLevel)retValue;
		}

		public static void set_PriorityLevel(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.ThreadPriorityLevel value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2017), "PROCESS", "System.Diagnostics.ProcessThread.set_PriorityLevel(ThreadPriorityLevel)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.TimeSpan get_PrivilegedProcessorTime(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2018), "PROCESS", "System.Diagnostics.ProcessThread.get_PrivilegedProcessorTime()", paramObjs, typeof(System.TimeSpan), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.TimeSpan)retValue;
		}

		public static System.IntPtr get_StartAddress(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2019), "PROCESS", "System.Diagnostics.ProcessThread.get_StartAddress()", paramObjs, typeof(System.IntPtr), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IntPtr)retValue;
		}

		public static System.DateTime get_StartTime(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2020), "PROCESS", "System.Diagnostics.ProcessThread.get_StartTime()", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.Diagnostics.ThreadState get_ThreadState(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2021), "PROCESS", "System.Diagnostics.ProcessThread.get_ThreadState()", paramObjs, typeof(System.Diagnostics.ThreadState), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.ThreadState)retValue;
		}

		public static System.TimeSpan get_TotalProcessorTime(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2022), "PROCESS", "System.Diagnostics.ProcessThread.get_TotalProcessorTime()", paramObjs, typeof(System.TimeSpan), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.TimeSpan)retValue;
		}

		public static System.TimeSpan get_UserProcessorTime(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2023), "PROCESS", "System.Diagnostics.ProcessThread.get_UserProcessorTime()", paramObjs, typeof(System.TimeSpan), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.TimeSpan)retValue;
		}

		public static System.Diagnostics.ThreadWaitReason get_WaitReason(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2024), "PROCESS", "System.Diagnostics.ProcessThread.get_WaitReason()", paramObjs, typeof(System.Diagnostics.ThreadWaitReason), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.ThreadWaitReason)retValue;
		}

		public static void ResetIdealProcessor(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2025), "PROCESS", "System.Diagnostics.ProcessThread.ResetIdealProcessor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_ProcessorAffinity(HeatDotNet.MethodInterceptInfo methodIntercept, System.IntPtr value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2026), "PROCESS", "System.Diagnostics.ProcessThread.set_ProcessorAffinity(IntPtr)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Diagnostics.ProcessThreadCollection")]
	public class HandlerClass210
	{
		// System.Diagnostics.ProcessThreadCollection.get_Item
		private static bool CallerMethod2027(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThreadCollection.Add
		private static bool CallerMethod2028(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThreadCollection.Insert
		private static bool CallerMethod2029(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThreadCollection.IndexOf
		private static bool CallerMethod2030(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThreadCollection.Contains
		private static bool CallerMethod2031(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThreadCollection.Remove
		private static bool CallerMethod2032(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThreadCollection.CopyTo
		private static bool CallerMethod2033(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Diagnostics.ProcessThreadCollection..ctor
		private static bool CallerMethod2034(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Diagnostics.ProcessThread get_Item(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2027), "PROCESS", "System.Diagnostics.ProcessThreadCollection.get_Item(Int32)", paramObjs, typeof(System.Diagnostics.ProcessThread), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.ProcessThread)retValue;
		}

		public static System.Int32 Add(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.ProcessThread thread)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = thread;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2028), "PROCESS", "System.Diagnostics.ProcessThreadCollection.Add(ProcessThread)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Insert(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 index, System.Diagnostics.ProcessThread thread)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = index;
			paramObjs[2] = thread;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2029), "PROCESS", "System.Diagnostics.ProcessThreadCollection.Insert(Int32, ProcessThread)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.ProcessThread thread)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = thread;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2030), "PROCESS", "System.Diagnostics.ProcessThreadCollection.IndexOf(ProcessThread)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Contains(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.ProcessThread thread)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = thread;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2031), "PROCESS", "System.Diagnostics.ProcessThreadCollection.Contains(ProcessThread)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void Remove(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.ProcessThread thread)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = thread;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2032), "PROCESS", "System.Diagnostics.ProcessThreadCollection.Remove(ProcessThread)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void CopyTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.ProcessThread[] array, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = index;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2033), "PROCESS", "System.Diagnostics.ProcessThreadCollection.CopyTo(ProcessThread[], Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Diagnostics.ProcessThread[] processThreads)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = processThreads;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2034), "PROCESS", "System.Diagnostics.ProcessThreadCollection.ctor(ProcessThread[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Configuration.AppSettingsReader")]
	public class HandlerClass211
	{
		// System.Configuration.AppSettingsReader.GetValue
		private static bool CallerMethod2035(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Configuration.AppSettingsReader..ctor
		private static bool CallerMethod2036(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object GetValue(HeatDotNet.MethodInterceptInfo methodIntercept, System.String key, System.Type type)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = key;
			paramObjs[2] = type;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2035), "FILE", "System.Configuration.AppSettingsReader.GetValue(String, Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			SystemReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2036), "FILE", "System.Configuration.AppSettingsReader.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

}
