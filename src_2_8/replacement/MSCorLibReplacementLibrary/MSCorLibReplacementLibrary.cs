// This file was automatically generated by GenerateReplacementLibrary.  Do not modify.

using Replacement;
using System;


namespace Replacement
{
	public class MSCorLibReplacementLibrary
	{
		public static DotNetReplacementLibrary ReplacementLibrary = new DotNetReplacementLibrary("mscorlib.dll");
	};
}


namespace HeatInterceptHandlers
{
	[HeatDotNet.InterceptTypeName("System.Console")]
	public class HandlerClass1
	{
		// System.Console.get_Error
		private static bool CallerMethod1(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.get_In
		private static bool CallerMethod2(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.get_Out
		private static bool CallerMethod3(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.OpenStandardError
		private static bool CallerMethod4(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.OpenStandardError
		private static bool CallerMethod5(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.OpenStandardInput
		private static bool CallerMethod6(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.OpenStandardInput
		private static bool CallerMethod7(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.OpenStandardOutput
		private static bool CallerMethod8(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.OpenStandardOutput
		private static bool CallerMethod9(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.SetIn
		private static bool CallerMethod10(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.SetOut
		private static bool CallerMethod11(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.SetError
		private static bool CallerMethod12(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.Read
		private static bool CallerMethod13(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.ReadLine
		private static bool CallerMethod14(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.WriteLine
		private static bool CallerMethod15(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.WriteLine
		private static bool CallerMethod16(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.WriteLine
		private static bool CallerMethod17(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.WriteLine
		private static bool CallerMethod18(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.WriteLine
		private static bool CallerMethod19(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.WriteLine
		private static bool CallerMethod20(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.WriteLine
		private static bool CallerMethod21(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.WriteLine
		private static bool CallerMethod22(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.WriteLine
		private static bool CallerMethod23(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.WriteLine
		private static bool CallerMethod24(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.WriteLine
		private static bool CallerMethod25(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.WriteLine
		private static bool CallerMethod26(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.WriteLine
		private static bool CallerMethod27(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.WriteLine
		private static bool CallerMethod28(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.WriteLine
		private static bool CallerMethod29(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.WriteLine
		private static bool CallerMethod30(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.WriteLine
		private static bool CallerMethod31(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.WriteLine
		private static bool CallerMethod32(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.WriteLine
		private static bool CallerMethod33(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.Write
		private static bool CallerMethod34(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.Write
		private static bool CallerMethod35(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.Write
		private static bool CallerMethod36(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.Write
		private static bool CallerMethod37(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.Write
		private static bool CallerMethod38(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.Write
		private static bool CallerMethod39(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.Write
		private static bool CallerMethod40(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.Write
		private static bool CallerMethod41(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.Write
		private static bool CallerMethod42(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.Write
		private static bool CallerMethod43(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.Write
		private static bool CallerMethod44(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.Write
		private static bool CallerMethod45(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.Write
		private static bool CallerMethod46(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.Write
		private static bool CallerMethod47(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.Write
		private static bool CallerMethod48(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.Write
		private static bool CallerMethod49(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.Write
		private static bool CallerMethod50(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Console.Write
		private static bool CallerMethod51(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.IO.TextWriter get_Error(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1), "FILE", "System.Console.get_Error()", paramObjs, typeof(System.IO.TextWriter), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.TextWriter)retValue;
		}

		public static System.IO.TextReader get_In(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod2), "FILE", "System.Console.get_In()", paramObjs, typeof(System.IO.TextReader), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.TextReader)retValue;
		}

		public static System.IO.TextWriter get_Out(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod3), "FILE", "System.Console.get_Out()", paramObjs, typeof(System.IO.TextWriter), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.TextWriter)retValue;
		}

		public static System.IO.Stream OpenStandardError(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod4), "FILE", "System.Console.OpenStandardError()", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static System.IO.Stream OpenStandardError(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 bufferSize)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bufferSize;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod5), "FILE", "System.Console.OpenStandardError(Int32)", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static System.IO.Stream OpenStandardInput(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod6), "FILE", "System.Console.OpenStandardInput()", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static System.IO.Stream OpenStandardInput(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 bufferSize)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bufferSize;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod7), "FILE", "System.Console.OpenStandardInput(Int32)", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static System.IO.Stream OpenStandardOutput(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod8), "FILE", "System.Console.OpenStandardOutput()", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static System.IO.Stream OpenStandardOutput(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 bufferSize)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bufferSize;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod9), "FILE", "System.Console.OpenStandardOutput(Int32)", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static void SetIn(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.TextReader newIn)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = newIn;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod10), "FILE", "System.Console.SetIn(TextReader)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetOut(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.TextWriter newOut)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = newOut;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod11), "FILE", "System.Console.SetOut(TextWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetError(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.TextWriter newError)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = newError;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod12), "FILE", "System.Console.SetError(TextWriter)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 Read(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod13), "FILE", "System.Console.Read()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String ReadLine(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod14), "FILE", "System.Console.ReadLine()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod15), "FILE", "System.Console.WriteLine()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod16), "FILE", "System.Console.WriteLine(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod17), "FILE", "System.Console.WriteLine(Char)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char[] buffer)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod18), "FILE", "System.Console.WriteLine(Char[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char[] buffer, System.Int32 index, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = index;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod19), "FILE", "System.Console.WriteLine(Char[], Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Decimal value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod20), "FILE", "System.Console.WriteLine(Decimal)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Double value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod21), "FILE", "System.Console.WriteLine(Double)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Single value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod22), "FILE", "System.Console.WriteLine(Single)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod23), "FILE", "System.Console.WriteLine(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.UInt32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod24), "FILE", "System.Console.WriteLine(UInt32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod25), "FILE", "System.Console.WriteLine(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.UInt64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod26), "FILE", "System.Console.WriteLine(UInt64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod27), "FILE", "System.Console.WriteLine(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod28), "FILE", "System.Console.WriteLine(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String format, System.Object arg0)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = format;
			paramObjs[2] = arg0;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod29), "FILE", "System.Console.WriteLine(String, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String format, System.Object arg0, System.Object arg1)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = format;
			paramObjs[2] = arg0;
			paramObjs[3] = arg1;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod30), "FILE", "System.Console.WriteLine(String, Object, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String format, System.Object arg0, System.Object arg1, System.Object arg2)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = format;
			paramObjs[2] = arg0;
			paramObjs[3] = arg1;
			paramObjs[4] = arg2;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod31), "FILE", "System.Console.WriteLine(String, Object, Object, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String format, System.Object arg0, System.Object arg1, System.Object arg2, System.Object arg3)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = format;
			paramObjs[2] = arg0;
			paramObjs[3] = arg1;
			paramObjs[4] = arg2;
			paramObjs[5] = arg3;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod32), "FILE", "System.Console.WriteLine(String, Object, Object, Object, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String format, System.Object[] arg)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = format;
			paramObjs[2] = arg;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod33), "FILE", "System.Console.WriteLine(String, Object[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String format, System.Object arg0)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = format;
			paramObjs[2] = arg0;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod34), "FILE", "System.Console.Write(String, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String format, System.Object arg0, System.Object arg1)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = format;
			paramObjs[2] = arg0;
			paramObjs[3] = arg1;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod35), "FILE", "System.Console.Write(String, Object, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String format, System.Object arg0, System.Object arg1, System.Object arg2)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = format;
			paramObjs[2] = arg0;
			paramObjs[3] = arg1;
			paramObjs[4] = arg2;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod36), "FILE", "System.Console.Write(String, Object, Object, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String format, System.Object arg0, System.Object arg1, System.Object arg2, System.Object arg3)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = format;
			paramObjs[2] = arg0;
			paramObjs[3] = arg1;
			paramObjs[4] = arg2;
			paramObjs[5] = arg3;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod37), "FILE", "System.Console.Write(String, Object, Object, Object, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String format, System.Object[] arg)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = format;
			paramObjs[2] = arg;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod38), "FILE", "System.Console.Write(String, Object[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod39), "FILE", "System.Console.Write(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod40), "FILE", "System.Console.Write(Char)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char[] buffer)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod41), "FILE", "System.Console.Write(Char[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char[] buffer, System.Int32 index, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = index;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod42), "FILE", "System.Console.Write(Char[], Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Double value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod43), "FILE", "System.Console.Write(Double)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Decimal value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod44), "FILE", "System.Console.Write(Decimal)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Single value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod45), "FILE", "System.Console.Write(Single)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod46), "FILE", "System.Console.Write(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.UInt32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod47), "FILE", "System.Console.Write(UInt32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod48), "FILE", "System.Console.Write(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.UInt64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod49), "FILE", "System.Console.Write(UInt64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod50), "FILE", "System.Console.Write(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod51), "FILE", "System.Console.Write(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.TimeZone")]
	public class HandlerClass2
	{
		// System.TimeZone.IsDaylightSavingTime
		private static bool CallerMethod52(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.TimeZone.ToLocalTime
		private static bool CallerMethod53(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.TimeZone.ToUniversalTime
		private static bool CallerMethod54(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.TimeZone.get_CurrentTimeZone
		private static bool CallerMethod55(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.TimeZone.IsDaylightSavingTime
		private static bool CallerMethod56(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDaylightSavingTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod52), "TIME", "System.TimeZone.IsDaylightSavingTime(DateTime)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.DateTime ToLocalTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod53), "TIME", "System.TimeZone.ToLocalTime(DateTime)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime ToUniversalTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod54), "TIME", "System.TimeZone.ToUniversalTime(DateTime)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.TimeZone get_CurrentTimeZone(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod55), "TIME", "System.TimeZone.get_CurrentTimeZone()", paramObjs, typeof(System.TimeZone), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.TimeZone)retValue;
		}

		public static System.Boolean IsDaylightSavingTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Globalization.DaylightTime daylightTimes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = daylightTimes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod56), "TIME", "System.TimeZone.IsDaylightSavingTime(DateTime, DaylightTime)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Environment")]
	public class HandlerClass3
	{
		// System.Environment.get_TickCount
		private static bool CallerMethod57(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.Exit
		private static bool CallerMethod58(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.get_ExitCode
		private static bool CallerMethod59(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.set_ExitCode
		private static bool CallerMethod60(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.get_CommandLine
		private static bool CallerMethod61(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.get_CurrentDirectory
		private static bool CallerMethod62(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.set_CurrentDirectory
		private static bool CallerMethod63(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.get_SystemDirectory
		private static bool CallerMethod64(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.ExpandEnvironmentVariables
		private static bool CallerMethod65(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.get_MachineName
		private static bool CallerMethod66(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.GetCommandLineArgs
		private static bool CallerMethod67(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.GetEnvironmentVariable
		private static bool CallerMethod68(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.GetEnvironmentVariables
		private static bool CallerMethod69(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.GetLogicalDrives
		private static bool CallerMethod70(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.get_NewLine
		private static bool CallerMethod71(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.get_Version
		private static bool CallerMethod72(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.get_WorkingSet
		private static bool CallerMethod73(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.get_OSVersion
		private static bool CallerMethod74(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.get_StackTrace
		private static bool CallerMethod75(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.get_HasShutdownStarted
		private static bool CallerMethod76(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.get_UserName
		private static bool CallerMethod77(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.get_UserInteractive
		private static bool CallerMethod78(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.GetFolderPath
		private static bool CallerMethod79(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Environment.get_UserDomainName
		private static bool CallerMethod80(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 get_TickCount(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod57), "PROCESS", "System.Environment.get_TickCount()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Exit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 exitCode)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = exitCode;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod58), "PROCESS", "System.Environment.Exit(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_ExitCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod59), "PROCESS", "System.Environment.get_ExitCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_ExitCode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod60), "PROCESS", "System.Environment.set_ExitCode(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_CommandLine(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod61), "PROCESS", "System.Environment.get_CommandLine()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_CurrentDirectory(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod62), "PROCESS", "System.Environment.get_CurrentDirectory()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_CurrentDirectory(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod63), "PROCESS", "System.Environment.set_CurrentDirectory(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_SystemDirectory(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod64), "PROCESS", "System.Environment.get_SystemDirectory()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ExpandEnvironmentVariables(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod65), "PROCESS", "System.Environment.ExpandEnvironmentVariables(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_MachineName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod66), "PROCESS", "System.Environment.get_MachineName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String[] GetCommandLineArgs(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod67), "PROCESS", "System.Environment.GetCommandLineArgs()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.String GetEnvironmentVariable(HeatDotNet.MethodInterceptInfo methodIntercept, System.String variable)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = variable;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod68), "PROCESS", "System.Environment.GetEnvironmentVariable(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Collections.IDictionary GetEnvironmentVariables(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod69), "PROCESS", "System.Environment.GetEnvironmentVariables()", paramObjs, typeof(System.Collections.IDictionary), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IDictionary)retValue;
		}

		public static System.String[] GetLogicalDrives(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod70), "PROCESS", "System.Environment.GetLogicalDrives()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.String get_NewLine(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod71), "PROCESS", "System.Environment.get_NewLine()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Version get_Version(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod72), "PROCESS", "System.Environment.get_Version()", paramObjs, typeof(System.Version), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Version)retValue;
		}

		public static System.Int64 get_WorkingSet(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod73), "PROCESS", "System.Environment.get_WorkingSet()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.OperatingSystem get_OSVersion(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod74), "PROCESS", "System.Environment.get_OSVersion()", paramObjs, typeof(System.OperatingSystem), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.OperatingSystem)retValue;
		}

		public static System.String get_StackTrace(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod75), "PROCESS", "System.Environment.get_StackTrace()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean get_HasShutdownStarted(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod76), "PROCESS", "System.Environment.get_HasShutdownStarted()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_UserName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod77), "PROCESS", "System.Environment.get_UserName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean get_UserInteractive(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod78), "PROCESS", "System.Environment.get_UserInteractive()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String GetFolderPath(HeatDotNet.MethodInterceptInfo methodIntercept, System.Environment.SpecialFolder folder)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = folder;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod79), "PROCESS", "System.Environment.GetFolderPath(Environment+SpecialFolder)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_UserDomainName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod80), "PROCESS", "System.Environment.get_UserDomainName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.Assembly")]
	public class HandlerClass4
	{
		// System.Reflection.Assembly.GetObjectData
		private static bool CallerMethod81(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.IsDefined
		private static bool CallerMethod82(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetCustomAttributes
		private static bool CallerMethod83(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetCustomAttributes
		private static bool CallerMethod84(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.get_Evidence
		private static bool CallerMethod85(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.get_ImageRuntimeVersion
		private static bool CallerMethod86(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.get_Location
		private static bool CallerMethod87(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetManifestResourceInfo
		private static bool CallerMethod88(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetManifestResourceNames
		private static bool CallerMethod89(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetFiles
		private static bool CallerMethod90(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetFiles
		private static bool CallerMethod91(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetFile
		private static bool CallerMethod92(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetManifestResourceStream
		private static bool CallerMethod93(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetManifestResourceStream
		private static bool CallerMethod94(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetTypes
		private static bool CallerMethod95(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetExportedTypes
		private static bool CallerMethod96(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetType
		private static bool CallerMethod97(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetType
		private static bool CallerMethod98(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.get_EntryPoint
		private static bool CallerMethod99(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.get_FullName
		private static bool CallerMethod100(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetName
		private static bool CallerMethod101(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetName
		private static bool CallerMethod102(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.get_EscapedCodeBase
		private static bool CallerMethod103(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.get_CodeBase
		private static bool CallerMethod104(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.ToString
		private static bool CallerMethod105(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.add_ModuleResolve
		private static bool CallerMethod106(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.remove_ModuleResolve
		private static bool CallerMethod107(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetType
		private static bool CallerMethod108(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetSatelliteAssembly
		private static bool CallerMethod109(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetSatelliteAssembly
		private static bool CallerMethod110(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.LoadModule
		private static bool CallerMethod111(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.LoadModule
		private static bool CallerMethod112(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.CreateInstance
		private static bool CallerMethod113(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.CreateInstance
		private static bool CallerMethod114(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.CreateInstance
		private static bool CallerMethod115(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 8) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetLoadedModules
		private static bool CallerMethod116(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetLoadedModules
		private static bool CallerMethod117(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetModules
		private static bool CallerMethod118(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetModules
		private static bool CallerMethod119(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetModule
		private static bool CallerMethod120(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetReferencedAssemblies
		private static bool CallerMethod121(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.get_GlobalAssemblyCache
		private static bool CallerMethod122(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.CreateQualifiedName
		private static bool CallerMethod123(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetAssembly
		private static bool CallerMethod124(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.LoadFrom
		private static bool CallerMethod125(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.LoadFrom
		private static bool CallerMethod126(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.LoadFrom
		private static bool CallerMethod127(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.Load
		private static bool CallerMethod128(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.Load
		private static bool CallerMethod129(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.Load
		private static bool CallerMethod130(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.Load
		private static bool CallerMethod131(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.LoadWithPartialName
		private static bool CallerMethod132(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.LoadWithPartialName
		private static bool CallerMethod133(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.Load
		private static bool CallerMethod134(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.Load
		private static bool CallerMethod135(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.Load
		private static bool CallerMethod136(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.LoadFile
		private static bool CallerMethod137(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.LoadFile
		private static bool CallerMethod138(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Assembly.GetEntryAssembly
		private static bool CallerMethod139(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void GetObjectData(HeatDotNet.MethodInterceptInfo methodIntercept, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = info;
			paramObjs[2] = context;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod81), "LIBRARY", "System.Reflection.Assembly.GetObjectData(SerializationInfo, StreamingContext)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean IsDefined(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type attributeType, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeType;
			paramObjs[2] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod82), "LIBRARY", "System.Reflection.Assembly.IsDefined(Type, Boolean)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Object[] GetCustomAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod83), "LIBRARY", "System.Reflection.Assembly.GetCustomAttributes(Boolean)", paramObjs, typeof(System.Object[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object[])retValue;
		}

		public static System.Object[] GetCustomAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type attributeType, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeType;
			paramObjs[2] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod84), "LIBRARY", "System.Reflection.Assembly.GetCustomAttributes(Type, Boolean)", paramObjs, typeof(System.Object[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object[])retValue;
		}

		public static System.Security.Policy.Evidence get_Evidence(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod85), "LIBRARY", "System.Reflection.Assembly.get_Evidence()", paramObjs, typeof(System.Security.Policy.Evidence), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Policy.Evidence)retValue;
		}

		public static System.String get_ImageRuntimeVersion(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod86), "LIBRARY", "System.Reflection.Assembly.get_ImageRuntimeVersion()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Location(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod87), "LIBRARY", "System.Reflection.Assembly.get_Location()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Reflection.ManifestResourceInfo GetManifestResourceInfo(HeatDotNet.MethodInterceptInfo methodIntercept, System.String resourceName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = resourceName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod88), "LIBRARY", "System.Reflection.Assembly.GetManifestResourceInfo(String)", paramObjs, typeof(System.Reflection.ManifestResourceInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.ManifestResourceInfo)retValue;
		}

		public static System.String[] GetManifestResourceNames(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod89), "LIBRARY", "System.Reflection.Assembly.GetManifestResourceNames()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.IO.FileStream[] GetFiles(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean getResourceModules)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = getResourceModules;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod90), "LIBRARY", "System.Reflection.Assembly.GetFiles(Boolean)", paramObjs, typeof(System.IO.FileStream[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileStream[])retValue;
		}

		public static System.IO.FileStream[] GetFiles(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod91), "LIBRARY", "System.Reflection.Assembly.GetFiles()", paramObjs, typeof(System.IO.FileStream[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileStream[])retValue;
		}

		public static System.IO.FileStream GetFile(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod92), "LIBRARY", "System.Reflection.Assembly.GetFile(String)", paramObjs, typeof(System.IO.FileStream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileStream)retValue;
		}

		public static System.IO.Stream GetManifestResourceStream(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod93), "LIBRARY", "System.Reflection.Assembly.GetManifestResourceStream(String)", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static System.IO.Stream GetManifestResourceStream(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type type, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			paramObjs[2] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod94), "LIBRARY", "System.Reflection.Assembly.GetManifestResourceStream(Type, String)", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static System.Type[] GetTypes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod95), "LIBRARY", "System.Reflection.Assembly.GetTypes()", paramObjs, typeof(System.Type[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type[])retValue;
		}

		public static System.Type[] GetExportedTypes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod96), "LIBRARY", "System.Reflection.Assembly.GetExportedTypes()", paramObjs, typeof(System.Type[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type[])retValue;
		}

		public static System.Type GetType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Boolean throwOnError)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = throwOnError;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod97), "LIBRARY", "System.Reflection.Assembly.GetType(String, Boolean)", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Type GetType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod98), "LIBRARY", "System.Reflection.Assembly.GetType(String)", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Reflection.MethodInfo get_EntryPoint(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod99), "LIBRARY", "System.Reflection.Assembly.get_EntryPoint()", paramObjs, typeof(System.Reflection.MethodInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodInfo)retValue;
		}

		public static System.String get_FullName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod100), "LIBRARY", "System.Reflection.Assembly.get_FullName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Reflection.AssemblyName GetName(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean copiedName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = copiedName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod101), "LIBRARY", "System.Reflection.Assembly.GetName(Boolean)", paramObjs, typeof(System.Reflection.AssemblyName), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.AssemblyName)retValue;
		}

		public static System.Reflection.AssemblyName GetName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod102), "LIBRARY", "System.Reflection.Assembly.GetName()", paramObjs, typeof(System.Reflection.AssemblyName), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.AssemblyName)retValue;
		}

		public static System.String get_EscapedCodeBase(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod103), "LIBRARY", "System.Reflection.Assembly.get_EscapedCodeBase()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_CodeBase(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod104), "LIBRARY", "System.Reflection.Assembly.get_CodeBase()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod105), "LIBRARY", "System.Reflection.Assembly.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void add_ModuleResolve(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.ModuleResolveEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod106), "LIBRARY", "System.Reflection.Assembly.add_ModuleResolve(ModuleResolveEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void remove_ModuleResolve(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.ModuleResolveEventHandler value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod107), "LIBRARY", "System.Reflection.Assembly.remove_ModuleResolve(ModuleResolveEventHandler)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Type GetType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Boolean throwOnError, System.Boolean ignoreCase)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = throwOnError;
			paramObjs[3] = ignoreCase;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod108), "LIBRARY", "System.Reflection.Assembly.GetType(String, Boolean, Boolean)", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Reflection.Assembly GetSatelliteAssembly(HeatDotNet.MethodInterceptInfo methodIntercept, System.Globalization.CultureInfo culture)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = culture;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod109), "LIBRARY", "System.Reflection.Assembly.GetSatelliteAssembly(CultureInfo)", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

		public static System.Reflection.Assembly GetSatelliteAssembly(HeatDotNet.MethodInterceptInfo methodIntercept, System.Globalization.CultureInfo culture, System.Version version)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = culture;
			paramObjs[2] = version;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod110), "LIBRARY", "System.Reflection.Assembly.GetSatelliteAssembly(CultureInfo, Version)", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

		public static System.Reflection.Module LoadModule(HeatDotNet.MethodInterceptInfo methodIntercept, System.String moduleName, System.Byte[] rawModule)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = moduleName;
			paramObjs[2] = rawModule;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod111), "LIBRARY", "System.Reflection.Assembly.LoadModule(String, Byte[])", paramObjs, typeof(System.Reflection.Module), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Module)retValue;
		}

		public static System.Reflection.Module LoadModule(HeatDotNet.MethodInterceptInfo methodIntercept, System.String moduleName, System.Byte[] rawModule, System.Byte[] rawSymbolStore)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = moduleName;
			paramObjs[2] = rawModule;
			paramObjs[3] = rawSymbolStore;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod112), "LIBRARY", "System.Reflection.Assembly.LoadModule(String, Byte[], Byte[])", paramObjs, typeof(System.Reflection.Module), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Module)retValue;
		}

		public static System.Object CreateInstance(HeatDotNet.MethodInterceptInfo methodIntercept, System.String typeName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = typeName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod113), "LIBRARY", "System.Reflection.Assembly.CreateInstance(String)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object CreateInstance(HeatDotNet.MethodInterceptInfo methodIntercept, System.String typeName, System.Boolean ignoreCase)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = typeName;
			paramObjs[2] = ignoreCase;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod114), "LIBRARY", "System.Reflection.Assembly.CreateInstance(String, Boolean)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object CreateInstance(HeatDotNet.MethodInterceptInfo methodIntercept, System.String typeName, System.Boolean ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Object[] args, System.Globalization.CultureInfo culture, System.Object[] activationAttributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[8];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = typeName;
			paramObjs[2] = ignoreCase;
			paramObjs[3] = bindingAttr;
			paramObjs[4] = binder;
			paramObjs[5] = args;
			paramObjs[6] = culture;
			paramObjs[7] = activationAttributes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod115), "LIBRARY", "System.Reflection.Assembly.CreateInstance(String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Reflection.Module[] GetLoadedModules(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod116), "LIBRARY", "System.Reflection.Assembly.GetLoadedModules()", paramObjs, typeof(System.Reflection.Module[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Module[])retValue;
		}

		public static System.Reflection.Module[] GetLoadedModules(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean getResourceModules)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = getResourceModules;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod117), "LIBRARY", "System.Reflection.Assembly.GetLoadedModules(Boolean)", paramObjs, typeof(System.Reflection.Module[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Module[])retValue;
		}

		public static System.Reflection.Module[] GetModules(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod118), "LIBRARY", "System.Reflection.Assembly.GetModules()", paramObjs, typeof(System.Reflection.Module[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Module[])retValue;
		}

		public static System.Reflection.Module[] GetModules(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean getResourceModules)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = getResourceModules;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod119), "LIBRARY", "System.Reflection.Assembly.GetModules(Boolean)", paramObjs, typeof(System.Reflection.Module[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Module[])retValue;
		}

		public static System.Reflection.Module GetModule(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod120), "LIBRARY", "System.Reflection.Assembly.GetModule(String)", paramObjs, typeof(System.Reflection.Module), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Module)retValue;
		}

		public static System.Reflection.AssemblyName[] GetReferencedAssemblies(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod121), "LIBRARY", "System.Reflection.Assembly.GetReferencedAssemblies()", paramObjs, typeof(System.Reflection.AssemblyName[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.AssemblyName[])retValue;
		}

		public static System.Boolean get_GlobalAssemblyCache(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod122), "LIBRARY", "System.Reflection.Assembly.get_GlobalAssemblyCache()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String CreateQualifiedName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String assemblyName, System.String typeName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = assemblyName;
			paramObjs[2] = typeName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod123), "LIBRARY", "System.Reflection.Assembly.CreateQualifiedName(String, String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Reflection.Assembly GetAssembly(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type type)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod124), "LIBRARY", "System.Reflection.Assembly.GetAssembly(Type)", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

		public static System.Reflection.Assembly LoadFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.String assemblyFile)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = assemblyFile;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod125), "LIBRARY", "System.Reflection.Assembly.LoadFrom(String)", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

		public static System.Reflection.Assembly LoadFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.String assemblyFile, System.Security.Policy.Evidence securityEvidence)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = assemblyFile;
			paramObjs[2] = securityEvidence;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod126), "LIBRARY", "System.Reflection.Assembly.LoadFrom(String, Evidence)", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

		public static System.Reflection.Assembly LoadFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.String assemblyFile, System.Security.Policy.Evidence securityEvidence, System.Byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = assemblyFile;
			paramObjs[2] = securityEvidence;
			paramObjs[3] = hashValue;
			paramObjs[4] = hashAlgorithm;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod127), "LIBRARY", "System.Reflection.Assembly.LoadFrom(String, Evidence, Byte[], AssemblyHashAlgorithm)", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

		public static System.Reflection.Assembly Load(HeatDotNet.MethodInterceptInfo methodIntercept, System.String assemblyString)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = assemblyString;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod128), "LIBRARY", "System.Reflection.Assembly.Load(String)", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

		public static System.Reflection.Assembly Load(HeatDotNet.MethodInterceptInfo methodIntercept, System.String assemblyString, System.Security.Policy.Evidence assemblySecurity)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = assemblyString;
			paramObjs[2] = assemblySecurity;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod129), "LIBRARY", "System.Reflection.Assembly.Load(String, Evidence)", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

		public static System.Reflection.Assembly Load(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.AssemblyName assemblyRef)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = assemblyRef;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod130), "LIBRARY", "System.Reflection.Assembly.Load(AssemblyName)", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

		public static System.Reflection.Assembly Load(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.AssemblyName assemblyRef, System.Security.Policy.Evidence assemblySecurity)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = assemblyRef;
			paramObjs[2] = assemblySecurity;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod131), "LIBRARY", "System.Reflection.Assembly.Load(AssemblyName, Evidence)", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

		public static System.Reflection.Assembly LoadWithPartialName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String partialName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = partialName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod132), "LIBRARY", "System.Reflection.Assembly.LoadWithPartialName(String)", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

		public static System.Reflection.Assembly LoadWithPartialName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String partialName, System.Security.Policy.Evidence securityEvidence)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = partialName;
			paramObjs[2] = securityEvidence;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod133), "LIBRARY", "System.Reflection.Assembly.LoadWithPartialName(String, Evidence)", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

		public static System.Reflection.Assembly Load(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rawAssembly)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rawAssembly;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod134), "LIBRARY", "System.Reflection.Assembly.Load(Byte[])", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

		public static System.Reflection.Assembly Load(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rawAssembly, System.Byte[] rawSymbolStore)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rawAssembly;
			paramObjs[2] = rawSymbolStore;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod135), "LIBRARY", "System.Reflection.Assembly.Load(Byte[], Byte[])", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

		public static System.Reflection.Assembly Load(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rawAssembly, System.Byte[] rawSymbolStore, System.Security.Policy.Evidence securityEvidence)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rawAssembly;
			paramObjs[2] = rawSymbolStore;
			paramObjs[3] = securityEvidence;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod136), "LIBRARY", "System.Reflection.Assembly.Load(Byte[], Byte[], Evidence)", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

		public static System.Reflection.Assembly LoadFile(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod137), "LIBRARY", "System.Reflection.Assembly.LoadFile(String)", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

		public static System.Reflection.Assembly LoadFile(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.Security.Policy.Evidence securityEvidence)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = securityEvidence;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod138), "LIBRARY", "System.Reflection.Assembly.LoadFile(String, Evidence)", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

		public static System.Reflection.Assembly GetEntryAssembly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod139), "LIBRARY", "System.Reflection.Assembly.GetEntryAssembly()", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.AssemblyCultureAttribute")]
	public class HandlerClass5
	{
		// System.Reflection.AssemblyCultureAttribute.get_Culture
		private static bool CallerMethod140(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyCultureAttribute..ctor
		private static bool CallerMethod141(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_Culture(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod140), "LIBRARY", "System.Reflection.AssemblyCultureAttribute.get_Culture()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String culture)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = culture;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod141), "LIBRARY", "System.Reflection.AssemblyCultureAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.AssemblyVersionAttribute")]
	public class HandlerClass6
	{
		// System.Reflection.AssemblyVersionAttribute.get_Version
		private static bool CallerMethod142(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyVersionAttribute..ctor
		private static bool CallerMethod143(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_Version(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod142), "LIBRARY", "System.Reflection.AssemblyVersionAttribute.get_Version()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String version)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = version;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod143), "LIBRARY", "System.Reflection.AssemblyVersionAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.AssemblyKeyFileAttribute")]
	public class HandlerClass7
	{
		// System.Reflection.AssemblyKeyFileAttribute.get_KeyFile
		private static bool CallerMethod144(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyKeyFileAttribute..ctor
		private static bool CallerMethod145(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_KeyFile(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod144), "LIBRARY", "System.Reflection.AssemblyKeyFileAttribute.get_KeyFile()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String keyFile)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = keyFile;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod145), "LIBRARY", "System.Reflection.AssemblyKeyFileAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.AssemblyKeyNameAttribute")]
	public class HandlerClass8
	{
		// System.Reflection.AssemblyKeyNameAttribute.get_KeyName
		private static bool CallerMethod146(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyKeyNameAttribute..ctor
		private static bool CallerMethod147(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_KeyName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod146), "LIBRARY", "System.Reflection.AssemblyKeyNameAttribute.get_KeyName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String keyName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = keyName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod147), "LIBRARY", "System.Reflection.AssemblyKeyNameAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.AssemblyDelaySignAttribute")]
	public class HandlerClass9
	{
		// System.Reflection.AssemblyDelaySignAttribute.get_DelaySign
		private static bool CallerMethod148(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyDelaySignAttribute..ctor
		private static bool CallerMethod149(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean get_DelaySign(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod148), "LIBRARY", "System.Reflection.AssemblyDelaySignAttribute.get_DelaySign()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Boolean delaySign)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = delaySign;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod149), "LIBRARY", "System.Reflection.AssemblyDelaySignAttribute.ctor(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.AssemblyAlgorithmIdAttribute")]
	public class HandlerClass10
	{
		// System.Reflection.AssemblyAlgorithmIdAttribute.get_AlgorithmId
		private static bool CallerMethod150(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyAlgorithmIdAttribute..ctor
		private static bool CallerMethod151(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyAlgorithmIdAttribute..ctor
		private static bool CallerMethod152(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.UInt32 get_AlgorithmId(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod150), "LIBRARY", "System.Reflection.AssemblyAlgorithmIdAttribute.get_AlgorithmId()", paramObjs, typeof(System.UInt32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.UInt32)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Configuration.Assemblies.AssemblyHashAlgorithm algorithmId)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = algorithmId;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod151), "LIBRARY", "System.Reflection.AssemblyAlgorithmIdAttribute.ctor(AssemblyHashAlgorithm)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.UInt32 algorithmId)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = algorithmId;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod152), "LIBRARY", "System.Reflection.AssemblyAlgorithmIdAttribute.ctor(UInt32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.AssemblyFlagsAttribute")]
	public class HandlerClass11
	{
		// System.Reflection.AssemblyFlagsAttribute.get_Flags
		private static bool CallerMethod153(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyFlagsAttribute.get_AssemblyFlags
		private static bool CallerMethod154(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyFlagsAttribute..ctor
		private static bool CallerMethod155(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyFlagsAttribute..ctor
		private static bool CallerMethod156(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.UInt32 get_Flags(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod153), "LIBRARY", "System.Reflection.AssemblyFlagsAttribute.get_Flags()", paramObjs, typeof(System.UInt32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.UInt32)retValue;
		}

		public static System.Int32 get_AssemblyFlags(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod154), "LIBRARY", "System.Reflection.AssemblyFlagsAttribute.get_AssemblyFlags()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.UInt32 flags)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = flags;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod155), "LIBRARY", "System.Reflection.AssemblyFlagsAttribute.ctor(UInt32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int32 assemblyFlags)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = assemblyFlags;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod156), "LIBRARY", "System.Reflection.AssemblyFlagsAttribute.ctor(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.AssemblyFileVersionAttribute")]
	public class HandlerClass12
	{
		// System.Reflection.AssemblyFileVersionAttribute.get_Version
		private static bool CallerMethod157(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyFileVersionAttribute..ctor
		private static bool CallerMethod158(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_Version(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod157), "LIBRARY", "System.Reflection.AssemblyFileVersionAttribute.get_Version()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String version)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = version;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod158), "LIBRARY", "System.Reflection.AssemblyFileVersionAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.AssemblyName")]
	public class HandlerClass13
	{
		// System.Reflection.AssemblyName.OnDeserialization
		private static bool CallerMethod159(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.GetObjectData
		private static bool CallerMethod160(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.Clone
		private static bool CallerMethod161(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.ToString
		private static bool CallerMethod162(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.get_Name
		private static bool CallerMethod163(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.set_Name
		private static bool CallerMethod164(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.get_Version
		private static bool CallerMethod165(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.set_Version
		private static bool CallerMethod166(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.get_CultureInfo
		private static bool CallerMethod167(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.set_CultureInfo
		private static bool CallerMethod168(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.get_CodeBase
		private static bool CallerMethod169(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.set_CodeBase
		private static bool CallerMethod170(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.get_EscapedCodeBase
		private static bool CallerMethod171(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.GetPublicKey
		private static bool CallerMethod172(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.SetPublicKey
		private static bool CallerMethod173(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.GetPublicKeyToken
		private static bool CallerMethod174(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.SetPublicKeyToken
		private static bool CallerMethod175(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.get_Flags
		private static bool CallerMethod176(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.set_Flags
		private static bool CallerMethod177(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.get_HashAlgorithm
		private static bool CallerMethod178(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.set_HashAlgorithm
		private static bool CallerMethod179(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.get_VersionCompatibility
		private static bool CallerMethod180(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.set_VersionCompatibility
		private static bool CallerMethod181(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.get_KeyPair
		private static bool CallerMethod182(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.set_KeyPair
		private static bool CallerMethod183(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.get_FullName
		private static bool CallerMethod184(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName.GetAssemblyName
		private static bool CallerMethod185(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyName..ctor
		private static bool CallerMethod186(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void OnDeserialization(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object sender)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = sender;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod159), "LIBRARY", "System.Reflection.AssemblyName.OnDeserialization(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void GetObjectData(HeatDotNet.MethodInterceptInfo methodIntercept, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = info;
			paramObjs[2] = context;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod160), "LIBRARY", "System.Reflection.AssemblyName.GetObjectData(SerializationInfo, StreamingContext)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Object Clone(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod161), "LIBRARY", "System.Reflection.AssemblyName.Clone()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod162), "LIBRARY", "System.Reflection.AssemblyName.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod163), "LIBRARY", "System.Reflection.AssemblyName.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_Name(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod164), "LIBRARY", "System.Reflection.AssemblyName.set_Name(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Version get_Version(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod165), "LIBRARY", "System.Reflection.AssemblyName.get_Version()", paramObjs, typeof(System.Version), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Version)retValue;
		}

		public static void set_Version(HeatDotNet.MethodInterceptInfo methodIntercept, System.Version value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod166), "LIBRARY", "System.Reflection.AssemblyName.set_Version(Version)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Globalization.CultureInfo get_CultureInfo(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod167), "LIBRARY", "System.Reflection.AssemblyName.get_CultureInfo()", paramObjs, typeof(System.Globalization.CultureInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.CultureInfo)retValue;
		}

		public static void set_CultureInfo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Globalization.CultureInfo value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod168), "LIBRARY", "System.Reflection.AssemblyName.set_CultureInfo(CultureInfo)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_CodeBase(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod169), "LIBRARY", "System.Reflection.AssemblyName.get_CodeBase()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_CodeBase(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod170), "LIBRARY", "System.Reflection.AssemblyName.set_CodeBase(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_EscapedCodeBase(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod171), "LIBRARY", "System.Reflection.AssemblyName.get_EscapedCodeBase()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Byte[] GetPublicKey(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod172), "LIBRARY", "System.Reflection.AssemblyName.GetPublicKey()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void SetPublicKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] publicKey)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = publicKey;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod173), "LIBRARY", "System.Reflection.AssemblyName.SetPublicKey(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Byte[] GetPublicKeyToken(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod174), "LIBRARY", "System.Reflection.AssemblyName.GetPublicKeyToken()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void SetPublicKeyToken(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] publicKeyToken)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = publicKeyToken;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod175), "LIBRARY", "System.Reflection.AssemblyName.SetPublicKeyToken(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Reflection.AssemblyNameFlags get_Flags(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod176), "LIBRARY", "System.Reflection.AssemblyName.get_Flags()", paramObjs, typeof(System.Reflection.AssemblyNameFlags), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.AssemblyNameFlags)retValue;
		}

		public static void set_Flags(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.AssemblyNameFlags value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod177), "LIBRARY", "System.Reflection.AssemblyName.set_Flags(AssemblyNameFlags)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Configuration.Assemblies.AssemblyHashAlgorithm get_HashAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod178), "LIBRARY", "System.Reflection.AssemblyName.get_HashAlgorithm()", paramObjs, typeof(System.Configuration.Assemblies.AssemblyHashAlgorithm), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Configuration.Assemblies.AssemblyHashAlgorithm)retValue;
		}

		public static void set_HashAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept, System.Configuration.Assemblies.AssemblyHashAlgorithm value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod179), "LIBRARY", "System.Reflection.AssemblyName.set_HashAlgorithm(AssemblyHashAlgorithm)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Configuration.Assemblies.AssemblyVersionCompatibility get_VersionCompatibility(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod180), "LIBRARY", "System.Reflection.AssemblyName.get_VersionCompatibility()", paramObjs, typeof(System.Configuration.Assemblies.AssemblyVersionCompatibility), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Configuration.Assemblies.AssemblyVersionCompatibility)retValue;
		}

		public static void set_VersionCompatibility(HeatDotNet.MethodInterceptInfo methodIntercept, System.Configuration.Assemblies.AssemblyVersionCompatibility value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod181), "LIBRARY", "System.Reflection.AssemblyName.set_VersionCompatibility(AssemblyVersionCompatibility)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Reflection.StrongNameKeyPair get_KeyPair(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod182), "LIBRARY", "System.Reflection.AssemblyName.get_KeyPair()", paramObjs, typeof(System.Reflection.StrongNameKeyPair), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.StrongNameKeyPair)retValue;
		}

		public static void set_KeyPair(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.StrongNameKeyPair value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod183), "LIBRARY", "System.Reflection.AssemblyName.set_KeyPair(StrongNameKeyPair)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_FullName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod184), "LIBRARY", "System.Reflection.AssemblyName.get_FullName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Reflection.AssemblyName GetAssemblyName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String assemblyFile)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = assemblyFile;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod185), "LIBRARY", "System.Reflection.AssemblyName.GetAssemblyName(String)", paramObjs, typeof(System.Reflection.AssemblyName), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.AssemblyName)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod186), "LIBRARY", "System.Reflection.AssemblyName.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.AssemblyNameProxy")]
	public class HandlerClass14
	{
		// System.Reflection.AssemblyNameProxy.GetAssemblyName
		private static bool CallerMethod187(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyNameProxy..ctor
		private static bool CallerMethod188(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Reflection.AssemblyName GetAssemblyName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String assemblyFile)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = assemblyFile;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod187), "LIBRARY", "System.Reflection.AssemblyNameProxy.GetAssemblyName(String)", paramObjs, typeof(System.Reflection.AssemblyName), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.AssemblyName)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod188), "LIBRARY", "System.Reflection.AssemblyNameProxy.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.AssemblyCopyrightAttribute")]
	public class HandlerClass15
	{
		// System.Reflection.AssemblyCopyrightAttribute.get_Copyright
		private static bool CallerMethod189(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyCopyrightAttribute..ctor
		private static bool CallerMethod190(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_Copyright(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod189), "LIBRARY", "System.Reflection.AssemblyCopyrightAttribute.get_Copyright()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String copyright)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = copyright;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod190), "LIBRARY", "System.Reflection.AssemblyCopyrightAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.AssemblyTrademarkAttribute")]
	public class HandlerClass16
	{
		// System.Reflection.AssemblyTrademarkAttribute.get_Trademark
		private static bool CallerMethod191(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyTrademarkAttribute..ctor
		private static bool CallerMethod192(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_Trademark(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod191), "LIBRARY", "System.Reflection.AssemblyTrademarkAttribute.get_Trademark()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String trademark)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = trademark;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod192), "LIBRARY", "System.Reflection.AssemblyTrademarkAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.AssemblyProductAttribute")]
	public class HandlerClass17
	{
		// System.Reflection.AssemblyProductAttribute.get_Product
		private static bool CallerMethod193(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyProductAttribute..ctor
		private static bool CallerMethod194(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_Product(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod193), "LIBRARY", "System.Reflection.AssemblyProductAttribute.get_Product()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String product)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = product;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod194), "LIBRARY", "System.Reflection.AssemblyProductAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.AssemblyCompanyAttribute")]
	public class HandlerClass18
	{
		// System.Reflection.AssemblyCompanyAttribute.get_Company
		private static bool CallerMethod195(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyCompanyAttribute..ctor
		private static bool CallerMethod196(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_Company(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod195), "LIBRARY", "System.Reflection.AssemblyCompanyAttribute.get_Company()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String company)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = company;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod196), "LIBRARY", "System.Reflection.AssemblyCompanyAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.AssemblyDescriptionAttribute")]
	public class HandlerClass19
	{
		// System.Reflection.AssemblyDescriptionAttribute.get_Description
		private static bool CallerMethod197(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyDescriptionAttribute..ctor
		private static bool CallerMethod198(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_Description(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod197), "LIBRARY", "System.Reflection.AssemblyDescriptionAttribute.get_Description()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String description)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = description;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod198), "LIBRARY", "System.Reflection.AssemblyDescriptionAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.AssemblyTitleAttribute")]
	public class HandlerClass20
	{
		// System.Reflection.AssemblyTitleAttribute.get_Title
		private static bool CallerMethod199(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyTitleAttribute..ctor
		private static bool CallerMethod200(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_Title(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod199), "LIBRARY", "System.Reflection.AssemblyTitleAttribute.get_Title()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String title)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = title;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod200), "LIBRARY", "System.Reflection.AssemblyTitleAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.AssemblyConfigurationAttribute")]
	public class HandlerClass21
	{
		// System.Reflection.AssemblyConfigurationAttribute.get_Configuration
		private static bool CallerMethod201(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyConfigurationAttribute..ctor
		private static bool CallerMethod202(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_Configuration(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod201), "LIBRARY", "System.Reflection.AssemblyConfigurationAttribute.get_Configuration()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String configuration)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = configuration;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod202), "LIBRARY", "System.Reflection.AssemblyConfigurationAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.AssemblyDefaultAliasAttribute")]
	public class HandlerClass22
	{
		// System.Reflection.AssemblyDefaultAliasAttribute.get_DefaultAlias
		private static bool CallerMethod203(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyDefaultAliasAttribute..ctor
		private static bool CallerMethod204(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_DefaultAlias(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod203), "LIBRARY", "System.Reflection.AssemblyDefaultAliasAttribute.get_DefaultAlias()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String defaultAlias)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = defaultAlias;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod204), "LIBRARY", "System.Reflection.AssemblyDefaultAliasAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.AssemblyInformationalVersionAttribute")]
	public class HandlerClass23
	{
		// System.Reflection.AssemblyInformationalVersionAttribute.get_InformationalVersion
		private static bool CallerMethod205(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.AssemblyInformationalVersionAttribute..ctor
		private static bool CallerMethod206(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_InformationalVersion(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod205), "LIBRARY", "System.Reflection.AssemblyInformationalVersionAttribute.get_InformationalVersion()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String informationalVersion)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = informationalVersion;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod206), "LIBRARY", "System.Reflection.AssemblyInformationalVersionAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.MethodBase")]
	public class HandlerClass24
	{
		// System.Reflection.MethodBase.get_CallingConvention
		private static bool CallerMethod207(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.MethodBase.get_IsPublic
		private static bool CallerMethod208(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.MethodBase.get_IsPrivate
		private static bool CallerMethod209(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.MethodBase.get_IsFamily
		private static bool CallerMethod210(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.MethodBase.get_IsAssembly
		private static bool CallerMethod211(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.MethodBase.get_IsFamilyAndAssembly
		private static bool CallerMethod212(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.MethodBase.get_IsFamilyOrAssembly
		private static bool CallerMethod213(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.MethodBase.get_IsStatic
		private static bool CallerMethod214(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.MethodBase.get_IsFinal
		private static bool CallerMethod215(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.MethodBase.get_IsVirtual
		private static bool CallerMethod216(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.MethodBase.get_IsHideBySig
		private static bool CallerMethod217(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.MethodBase.get_IsAbstract
		private static bool CallerMethod218(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.MethodBase.get_IsSpecialName
		private static bool CallerMethod219(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.MethodBase.get_IsConstructor
		private static bool CallerMethod220(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.MethodBase.Invoke
		private static bool CallerMethod221(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.MethodBase.GetMethodFromHandle
		private static bool CallerMethod222(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.MethodBase.GetCurrentMethod
		private static bool CallerMethod223(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Reflection.CallingConventions get_CallingConvention(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod207), "LIBRARY", "System.Reflection.MethodBase.get_CallingConvention()", paramObjs, typeof(System.Reflection.CallingConventions), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.CallingConventions)retValue;
		}

		public static System.Boolean get_IsPublic(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod208), "LIBRARY", "System.Reflection.MethodBase.get_IsPublic()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsPrivate(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod209), "LIBRARY", "System.Reflection.MethodBase.get_IsPrivate()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsFamily(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod210), "LIBRARY", "System.Reflection.MethodBase.get_IsFamily()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsAssembly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod211), "LIBRARY", "System.Reflection.MethodBase.get_IsAssembly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsFamilyAndAssembly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod212), "LIBRARY", "System.Reflection.MethodBase.get_IsFamilyAndAssembly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsFamilyOrAssembly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod213), "LIBRARY", "System.Reflection.MethodBase.get_IsFamilyOrAssembly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsStatic(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod214), "LIBRARY", "System.Reflection.MethodBase.get_IsStatic()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsFinal(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod215), "LIBRARY", "System.Reflection.MethodBase.get_IsFinal()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsVirtual(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod216), "LIBRARY", "System.Reflection.MethodBase.get_IsVirtual()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsHideBySig(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod217), "LIBRARY", "System.Reflection.MethodBase.get_IsHideBySig()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsAbstract(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod218), "LIBRARY", "System.Reflection.MethodBase.get_IsAbstract()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsSpecialName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod219), "LIBRARY", "System.Reflection.MethodBase.get_IsSpecialName()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsConstructor(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod220), "LIBRARY", "System.Reflection.MethodBase.get_IsConstructor()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Object Invoke(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj, System.Object[] parameters)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			paramObjs[2] = parameters;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod221), "LIBRARY", "System.Reflection.MethodBase.Invoke(Object, Object[])", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Reflection.MethodBase GetMethodFromHandle(HeatDotNet.MethodInterceptInfo methodIntercept, System.RuntimeMethodHandle handle)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = handle;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod222), "LIBRARY", "System.Reflection.MethodBase.GetMethodFromHandle(RuntimeMethodHandle)", paramObjs, typeof(System.Reflection.MethodBase), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodBase)retValue;
		}

		public static System.Reflection.MethodBase GetCurrentMethod(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod223), "LIBRARY", "System.Reflection.MethodBase.GetCurrentMethod()", paramObjs, typeof(System.Reflection.MethodBase), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodBase)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.ConstructorInfo")]
	public class HandlerClass25
	{
		// System.Reflection.ConstructorInfo.get_MemberType
		private static bool CallerMethod224(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.ConstructorInfo.Invoke
		private static bool CallerMethod225(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Reflection.MemberTypes get_MemberType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod224), "LIBRARY", "System.Reflection.ConstructorInfo.get_MemberType()", paramObjs, typeof(System.Reflection.MemberTypes), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MemberTypes)retValue;
		}

		public static System.Object Invoke(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object[] parameters)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = parameters;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod225), "LIBRARY", "System.Reflection.ConstructorInfo.Invoke(Object[])", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.DefaultMemberAttribute")]
	public class HandlerClass26
	{
		// System.Reflection.DefaultMemberAttribute.get_MemberName
		private static bool CallerMethod226(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.DefaultMemberAttribute..ctor
		private static bool CallerMethod227(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_MemberName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod226), "LIBRARY", "System.Reflection.DefaultMemberAttribute.get_MemberName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String memberName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = memberName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod227), "LIBRARY", "System.Reflection.DefaultMemberAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.EventInfo")]
	public class HandlerClass27
	{
		// System.Reflection.EventInfo.get_MemberType
		private static bool CallerMethod228(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.EventInfo.GetAddMethod
		private static bool CallerMethod229(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.EventInfo.GetRemoveMethod
		private static bool CallerMethod230(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.EventInfo.GetRaiseMethod
		private static bool CallerMethod231(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.EventInfo.AddEventHandler
		private static bool CallerMethod232(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.EventInfo.RemoveEventHandler
		private static bool CallerMethod233(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.EventInfo.get_EventHandlerType
		private static bool CallerMethod234(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.EventInfo.get_IsSpecialName
		private static bool CallerMethod235(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.EventInfo.get_IsMulticast
		private static bool CallerMethod236(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Reflection.MemberTypes get_MemberType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod228), "LIBRARY", "System.Reflection.EventInfo.get_MemberType()", paramObjs, typeof(System.Reflection.MemberTypes), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MemberTypes)retValue;
		}

		public static System.Reflection.MethodInfo GetAddMethod(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod229), "LIBRARY", "System.Reflection.EventInfo.GetAddMethod()", paramObjs, typeof(System.Reflection.MethodInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodInfo)retValue;
		}

		public static System.Reflection.MethodInfo GetRemoveMethod(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod230), "LIBRARY", "System.Reflection.EventInfo.GetRemoveMethod()", paramObjs, typeof(System.Reflection.MethodInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodInfo)retValue;
		}

		public static System.Reflection.MethodInfo GetRaiseMethod(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod231), "LIBRARY", "System.Reflection.EventInfo.GetRaiseMethod()", paramObjs, typeof(System.Reflection.MethodInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodInfo)retValue;
		}

		public static void AddEventHandler(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object target, System.Delegate handler)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = target;
			paramObjs[2] = handler;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod232), "LIBRARY", "System.Reflection.EventInfo.AddEventHandler(Object, Delegate)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void RemoveEventHandler(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object target, System.Delegate handler)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = target;
			paramObjs[2] = handler;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod233), "LIBRARY", "System.Reflection.EventInfo.RemoveEventHandler(Object, Delegate)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Type get_EventHandlerType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod234), "LIBRARY", "System.Reflection.EventInfo.get_EventHandlerType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Boolean get_IsSpecialName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod235), "LIBRARY", "System.Reflection.EventInfo.get_IsSpecialName()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsMulticast(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod236), "LIBRARY", "System.Reflection.EventInfo.get_IsMulticast()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.FieldInfo")]
	public class HandlerClass28
	{
		// System.Reflection.FieldInfo.get_MemberType
		private static bool CallerMethod237(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.FieldInfo.SetValue
		private static bool CallerMethod238(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.FieldInfo.get_IsPublic
		private static bool CallerMethod239(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.FieldInfo.get_IsPrivate
		private static bool CallerMethod240(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.FieldInfo.get_IsFamily
		private static bool CallerMethod241(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.FieldInfo.get_IsAssembly
		private static bool CallerMethod242(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.FieldInfo.get_IsFamilyAndAssembly
		private static bool CallerMethod243(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.FieldInfo.get_IsFamilyOrAssembly
		private static bool CallerMethod244(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.FieldInfo.get_IsStatic
		private static bool CallerMethod245(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.FieldInfo.get_IsInitOnly
		private static bool CallerMethod246(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.FieldInfo.get_IsLiteral
		private static bool CallerMethod247(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.FieldInfo.get_IsNotSerialized
		private static bool CallerMethod248(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.FieldInfo.get_IsSpecialName
		private static bool CallerMethod249(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.FieldInfo.get_IsPinvokeImpl
		private static bool CallerMethod250(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.FieldInfo.GetFieldFromHandle
		private static bool CallerMethod251(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Reflection.MemberTypes get_MemberType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod237), "LIBRARY", "System.Reflection.FieldInfo.get_MemberType()", paramObjs, typeof(System.Reflection.MemberTypes), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MemberTypes)retValue;
		}

		public static void SetValue(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			paramObjs[2] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod238), "LIBRARY", "System.Reflection.FieldInfo.SetValue(Object, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_IsPublic(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod239), "LIBRARY", "System.Reflection.FieldInfo.get_IsPublic()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsPrivate(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod240), "LIBRARY", "System.Reflection.FieldInfo.get_IsPrivate()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsFamily(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod241), "LIBRARY", "System.Reflection.FieldInfo.get_IsFamily()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsAssembly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod242), "LIBRARY", "System.Reflection.FieldInfo.get_IsAssembly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsFamilyAndAssembly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod243), "LIBRARY", "System.Reflection.FieldInfo.get_IsFamilyAndAssembly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsFamilyOrAssembly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod244), "LIBRARY", "System.Reflection.FieldInfo.get_IsFamilyOrAssembly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsStatic(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod245), "LIBRARY", "System.Reflection.FieldInfo.get_IsStatic()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsInitOnly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod246), "LIBRARY", "System.Reflection.FieldInfo.get_IsInitOnly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsLiteral(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod247), "LIBRARY", "System.Reflection.FieldInfo.get_IsLiteral()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsNotSerialized(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod248), "LIBRARY", "System.Reflection.FieldInfo.get_IsNotSerialized()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsSpecialName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod249), "LIBRARY", "System.Reflection.FieldInfo.get_IsSpecialName()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsPinvokeImpl(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod250), "LIBRARY", "System.Reflection.FieldInfo.get_IsPinvokeImpl()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Reflection.FieldInfo GetFieldFromHandle(HeatDotNet.MethodInterceptInfo methodIntercept, System.RuntimeFieldHandle handle)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = handle;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod251), "LIBRARY", "System.Reflection.FieldInfo.GetFieldFromHandle(RuntimeFieldHandle)", paramObjs, typeof(System.Reflection.FieldInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.FieldInfo)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.ManifestResourceInfo")]
	public class HandlerClass29
	{
		// System.Reflection.ManifestResourceInfo.get_ResourceLocation
		private static bool CallerMethod252(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.ManifestResourceInfo.get_FileName
		private static bool CallerMethod253(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.ManifestResourceInfo.get_ReferencedAssembly
		private static bool CallerMethod254(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Reflection.ResourceLocation get_ResourceLocation(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod252), "LIBRARY", "System.Reflection.ManifestResourceInfo.get_ResourceLocation()", paramObjs, typeof(System.Reflection.ResourceLocation), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.ResourceLocation)retValue;
		}

		public static System.String get_FileName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod253), "LIBRARY", "System.Reflection.ManifestResourceInfo.get_FileName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Reflection.Assembly get_ReferencedAssembly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod254), "LIBRARY", "System.Reflection.ManifestResourceInfo.get_ReferencedAssembly()", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.MethodInfo")]
	public class HandlerClass30
	{
		// System.Reflection.MethodInfo.get_MemberType
		private static bool CallerMethod255(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Reflection.MemberTypes get_MemberType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod255), "LIBRARY", "System.Reflection.MethodInfo.get_MemberType()", paramObjs, typeof(System.Reflection.MemberTypes), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MemberTypes)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.Module")]
	public class HandlerClass31
	{
		// System.Reflection.Module.IsDefined
		private static bool CallerMethod256(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.GetCustomAttributes
		private static bool CallerMethod257(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.GetCustomAttributes
		private static bool CallerMethod258(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.GetObjectData
		private static bool CallerMethod259(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.GetTypes
		private static bool CallerMethod260(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.FindTypes
		private static bool CallerMethod261(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.get_FullyQualifiedName
		private static bool CallerMethod262(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.GetType
		private static bool CallerMethod263(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.GetType
		private static bool CallerMethod264(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.GetType
		private static bool CallerMethod265(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.ToString
		private static bool CallerMethod266(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.get_ScopeName
		private static bool CallerMethod267(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.get_Name
		private static bool CallerMethod268(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.GetSignerCertificate
		private static bool CallerMethod269(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.get_Assembly
		private static bool CallerMethod270(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.GetMethods
		private static bool CallerMethod271(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.GetMethod
		private static bool CallerMethod272(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 7) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.GetMethod
		private static bool CallerMethod273(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.GetMethod
		private static bool CallerMethod274(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.GetFields
		private static bool CallerMethod275(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.GetField
		private static bool CallerMethod276(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.GetField
		private static bool CallerMethod277(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Module.IsResource
		private static bool CallerMethod278(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefined(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type attributeType, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeType;
			paramObjs[2] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod256), "LIBRARY", "System.Reflection.Module.IsDefined(Type, Boolean)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Object[] GetCustomAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod257), "LIBRARY", "System.Reflection.Module.GetCustomAttributes(Boolean)", paramObjs, typeof(System.Object[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object[])retValue;
		}

		public static System.Object[] GetCustomAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type attributeType, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeType;
			paramObjs[2] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod258), "LIBRARY", "System.Reflection.Module.GetCustomAttributes(Type, Boolean)", paramObjs, typeof(System.Object[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object[])retValue;
		}

		public static void GetObjectData(HeatDotNet.MethodInterceptInfo methodIntercept, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = info;
			paramObjs[2] = context;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod259), "LIBRARY", "System.Reflection.Module.GetObjectData(SerializationInfo, StreamingContext)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Type[] GetTypes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod260), "LIBRARY", "System.Reflection.Module.GetTypes()", paramObjs, typeof(System.Type[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type[])retValue;
		}

		public static System.Type[] FindTypes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.TypeFilter filter, System.Object filterCriteria)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = filter;
			paramObjs[2] = filterCriteria;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod261), "LIBRARY", "System.Reflection.Module.FindTypes(TypeFilter, Object)", paramObjs, typeof(System.Type[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type[])retValue;
		}

		public static System.String get_FullyQualifiedName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod262), "LIBRARY", "System.Reflection.Module.get_FullyQualifiedName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Type GetType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String className, System.Boolean throwOnError, System.Boolean ignoreCase)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = className;
			paramObjs[2] = throwOnError;
			paramObjs[3] = ignoreCase;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod263), "LIBRARY", "System.Reflection.Module.GetType(String, Boolean, Boolean)", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Type GetType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String className)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = className;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod264), "LIBRARY", "System.Reflection.Module.GetType(String)", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Type GetType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String className, System.Boolean ignoreCase)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = className;
			paramObjs[2] = ignoreCase;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod265), "LIBRARY", "System.Reflection.Module.GetType(String, Boolean)", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod266), "LIBRARY", "System.Reflection.Module.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_ScopeName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod267), "LIBRARY", "System.Reflection.Module.get_ScopeName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod268), "LIBRARY", "System.Reflection.Module.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Security.Cryptography.X509Certificates.X509Certificate GetSignerCertificate(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod269), "LIBRARY", "System.Reflection.Module.GetSignerCertificate()", paramObjs, typeof(System.Security.Cryptography.X509Certificates.X509Certificate), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.X509Certificates.X509Certificate)retValue;
		}

		public static System.Reflection.Assembly get_Assembly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod270), "LIBRARY", "System.Reflection.Module.get_Assembly()", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

		public static System.Reflection.MethodInfo[] GetMethods(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod271), "LIBRARY", "System.Reflection.Module.GetMethods()", paramObjs, typeof(System.Reflection.MethodInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodInfo[])retValue;
		}

		public static System.Reflection.MethodInfo GetMethod(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[7];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = bindingAttr;
			paramObjs[3] = binder;
			paramObjs[4] = callConvention;
			paramObjs[5] = types;
			paramObjs[6] = modifiers;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod272), "LIBRARY", "System.Reflection.Module.GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])", paramObjs, typeof(System.Reflection.MethodInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodInfo)retValue;
		}

		public static System.Reflection.MethodInfo GetMethod(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Type[] types)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = types;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod273), "LIBRARY", "System.Reflection.Module.GetMethod(String, Type[])", paramObjs, typeof(System.Reflection.MethodInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodInfo)retValue;
		}

		public static System.Reflection.MethodInfo GetMethod(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod274), "LIBRARY", "System.Reflection.Module.GetMethod(String)", paramObjs, typeof(System.Reflection.MethodInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodInfo)retValue;
		}

		public static System.Reflection.FieldInfo[] GetFields(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod275), "LIBRARY", "System.Reflection.Module.GetFields()", paramObjs, typeof(System.Reflection.FieldInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.FieldInfo[])retValue;
		}

		public static System.Reflection.FieldInfo GetField(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod276), "LIBRARY", "System.Reflection.Module.GetField(String)", paramObjs, typeof(System.Reflection.FieldInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.FieldInfo)retValue;
		}

		public static System.Reflection.FieldInfo GetField(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod277), "LIBRARY", "System.Reflection.Module.GetField(String, BindingFlags)", paramObjs, typeof(System.Reflection.FieldInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.FieldInfo)retValue;
		}

		public static System.Boolean IsResource(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod278), "LIBRARY", "System.Reflection.Module.IsResource()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.ParameterInfo")]
	public class HandlerClass32
	{
		// System.Reflection.ParameterInfo.IsDefined
		private static bool CallerMethod279(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.ParameterInfo.GetCustomAttributes
		private static bool CallerMethod280(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.ParameterInfo.GetCustomAttributes
		private static bool CallerMethod281(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.ParameterInfo.get_Member
		private static bool CallerMethod282(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.ParameterInfo.get_DefaultValue
		private static bool CallerMethod283(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.ParameterInfo.get_Attributes
		private static bool CallerMethod284(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.ParameterInfo.get_Position
		private static bool CallerMethod285(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.ParameterInfo.get_Name
		private static bool CallerMethod286(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.ParameterInfo.get_ParameterType
		private static bool CallerMethod287(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.ParameterInfo.get_IsIn
		private static bool CallerMethod288(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.ParameterInfo.get_IsOut
		private static bool CallerMethod289(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.ParameterInfo.get_IsLcid
		private static bool CallerMethod290(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.ParameterInfo.get_IsRetval
		private static bool CallerMethod291(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.ParameterInfo.get_IsOptional
		private static bool CallerMethod292(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean IsDefined(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type attributeType, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeType;
			paramObjs[2] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod279), "LIBRARY", "System.Reflection.ParameterInfo.IsDefined(Type, Boolean)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Object[] GetCustomAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod280), "LIBRARY", "System.Reflection.ParameterInfo.GetCustomAttributes(Boolean)", paramObjs, typeof(System.Object[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object[])retValue;
		}

		public static System.Object[] GetCustomAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type attributeType, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeType;
			paramObjs[2] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod281), "LIBRARY", "System.Reflection.ParameterInfo.GetCustomAttributes(Type, Boolean)", paramObjs, typeof(System.Object[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object[])retValue;
		}

		public static System.Reflection.MemberInfo get_Member(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod282), "LIBRARY", "System.Reflection.ParameterInfo.get_Member()", paramObjs, typeof(System.Reflection.MemberInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MemberInfo)retValue;
		}

		public static System.Object get_DefaultValue(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod283), "LIBRARY", "System.Reflection.ParameterInfo.get_DefaultValue()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Reflection.ParameterAttributes get_Attributes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod284), "LIBRARY", "System.Reflection.ParameterInfo.get_Attributes()", paramObjs, typeof(System.Reflection.ParameterAttributes), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.ParameterAttributes)retValue;
		}

		public static System.Int32 get_Position(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod285), "LIBRARY", "System.Reflection.ParameterInfo.get_Position()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod286), "LIBRARY", "System.Reflection.ParameterInfo.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Type get_ParameterType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod287), "LIBRARY", "System.Reflection.ParameterInfo.get_ParameterType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Boolean get_IsIn(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod288), "LIBRARY", "System.Reflection.ParameterInfo.get_IsIn()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsOut(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod289), "LIBRARY", "System.Reflection.ParameterInfo.get_IsOut()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsLcid(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod290), "LIBRARY", "System.Reflection.ParameterInfo.get_IsLcid()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsRetval(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod291), "LIBRARY", "System.Reflection.ParameterInfo.get_IsRetval()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsOptional(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod292), "LIBRARY", "System.Reflection.ParameterInfo.get_IsOptional()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.PropertyInfo")]
	public class HandlerClass33
	{
		// System.Reflection.PropertyInfo.SetValue
		private static bool CallerMethod293(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.PropertyInfo.GetValue
		private static bool CallerMethod294(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.PropertyInfo.get_MemberType
		private static bool CallerMethod295(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.PropertyInfo.GetAccessors
		private static bool CallerMethod296(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.PropertyInfo.GetGetMethod
		private static bool CallerMethod297(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.PropertyInfo.GetSetMethod
		private static bool CallerMethod298(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.PropertyInfo.get_IsSpecialName
		private static bool CallerMethod299(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void SetValue(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj, System.Object value, System.Object[] index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			paramObjs[2] = value;
			paramObjs[3] = index;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod293), "LIBRARY", "System.Reflection.PropertyInfo.SetValue(Object, Object, Object[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Object GetValue(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj, System.Object[] index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			paramObjs[2] = index;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod294), "LIBRARY", "System.Reflection.PropertyInfo.GetValue(Object, Object[])", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Reflection.MemberTypes get_MemberType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod295), "LIBRARY", "System.Reflection.PropertyInfo.get_MemberType()", paramObjs, typeof(System.Reflection.MemberTypes), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MemberTypes)retValue;
		}

		public static System.Reflection.MethodInfo[] GetAccessors(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod296), "LIBRARY", "System.Reflection.PropertyInfo.GetAccessors()", paramObjs, typeof(System.Reflection.MethodInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodInfo[])retValue;
		}

		public static System.Reflection.MethodInfo GetGetMethod(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod297), "LIBRARY", "System.Reflection.PropertyInfo.GetGetMethod()", paramObjs, typeof(System.Reflection.MethodInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodInfo)retValue;
		}

		public static System.Reflection.MethodInfo GetSetMethod(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod298), "LIBRARY", "System.Reflection.PropertyInfo.GetSetMethod()", paramObjs, typeof(System.Reflection.MethodInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodInfo)retValue;
		}

		public static System.Boolean get_IsSpecialName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod299), "LIBRARY", "System.Reflection.PropertyInfo.get_IsSpecialName()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.StrongNameKeyPair")]
	public class HandlerClass34
	{
		// System.Reflection.StrongNameKeyPair.get_PublicKey
		private static bool CallerMethod300(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.StrongNameKeyPair..ctor
		private static bool CallerMethod301(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.StrongNameKeyPair..ctor
		private static bool CallerMethod302(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.StrongNameKeyPair..ctor
		private static bool CallerMethod303(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Byte[] get_PublicKey(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod300), "LIBRARY", "System.Reflection.StrongNameKeyPair.get_PublicKey()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.FileStream keyPairFile)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = keyPairFile;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod301), "LIBRARY", "System.Reflection.StrongNameKeyPair.ctor(FileStream)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Byte[] keyPairArray)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = keyPairArray;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod302), "LIBRARY", "System.Reflection.StrongNameKeyPair.ctor(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String keyPairContainer)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = keyPairContainer;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod303), "LIBRARY", "System.Reflection.StrongNameKeyPair.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.TypeDelegator")]
	public class HandlerClass35
	{
		// System.Reflection.TypeDelegator.get_UnderlyingSystemType
		private static bool CallerMethod304(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.InvokeMember
		private static bool CallerMethod305(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 9) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.GetMembers
		private static bool CallerMethod306(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.GetProperties
		private static bool CallerMethod307(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.GetFields
		private static bool CallerMethod308(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.GetField
		private static bool CallerMethod309(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.GetMethods
		private static bool CallerMethod310(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.GetInterfaceMap
		private static bool CallerMethod311(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.GetElementType
		private static bool CallerMethod312(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.GetMember
		private static bool CallerMethod313(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.GetNestedType
		private static bool CallerMethod314(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.GetNestedTypes
		private static bool CallerMethod315(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.GetEvents
		private static bool CallerMethod316(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.GetEvents
		private static bool CallerMethod317(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.GetEvent
		private static bool CallerMethod318(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.GetInterfaces
		private static bool CallerMethod319(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.GetInterface
		private static bool CallerMethod320(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.GetConstructors
		private static bool CallerMethod321(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.get_BaseType
		private static bool CallerMethod322(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.get_AssemblyQualifiedName
		private static bool CallerMethod323(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.get_Namespace
		private static bool CallerMethod324(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.get_FullName
		private static bool CallerMethod325(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.get_TypeHandle
		private static bool CallerMethod326(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.get_Assembly
		private static bool CallerMethod327(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.get_Module
		private static bool CallerMethod328(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.get_GUID
		private static bool CallerMethod329(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.IsDefined
		private static bool CallerMethod330(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.GetCustomAttributes
		private static bool CallerMethod331(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.GetCustomAttributes
		private static bool CallerMethod332(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator.get_Name
		private static bool CallerMethod333(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.TypeDelegator..ctor
		private static bool CallerMethod334(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Type get_UnderlyingSystemType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod304), "LIBRARY", "System.Reflection.TypeDelegator.get_UnderlyingSystemType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Object InvokeMember(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object target, System.Object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, System.String[] namedParameters)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[9];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = invokeAttr;
			paramObjs[3] = binder;
			paramObjs[4] = target;
			paramObjs[5] = args;
			paramObjs[6] = modifiers;
			paramObjs[7] = culture;
			paramObjs[8] = namedParameters;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod305), "LIBRARY", "System.Reflection.TypeDelegator.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Reflection.MemberInfo[] GetMembers(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod306), "LIBRARY", "System.Reflection.TypeDelegator.GetMembers(BindingFlags)", paramObjs, typeof(System.Reflection.MemberInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MemberInfo[])retValue;
		}

		public static System.Reflection.PropertyInfo[] GetProperties(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod307), "LIBRARY", "System.Reflection.TypeDelegator.GetProperties(BindingFlags)", paramObjs, typeof(System.Reflection.PropertyInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.PropertyInfo[])retValue;
		}

		public static System.Reflection.FieldInfo[] GetFields(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod308), "LIBRARY", "System.Reflection.TypeDelegator.GetFields(BindingFlags)", paramObjs, typeof(System.Reflection.FieldInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.FieldInfo[])retValue;
		}

		public static System.Reflection.FieldInfo GetField(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod309), "LIBRARY", "System.Reflection.TypeDelegator.GetField(String, BindingFlags)", paramObjs, typeof(System.Reflection.FieldInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.FieldInfo)retValue;
		}

		public static System.Reflection.MethodInfo[] GetMethods(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod310), "LIBRARY", "System.Reflection.TypeDelegator.GetMethods(BindingFlags)", paramObjs, typeof(System.Reflection.MethodInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodInfo[])retValue;
		}

		public static System.Reflection.InterfaceMapping GetInterfaceMap(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type interfaceType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = interfaceType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod311), "LIBRARY", "System.Reflection.TypeDelegator.GetInterfaceMap(Type)", paramObjs, typeof(System.Reflection.InterfaceMapping), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.InterfaceMapping)retValue;
		}

		public static System.Type GetElementType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod312), "LIBRARY", "System.Reflection.TypeDelegator.GetElementType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Reflection.MemberInfo[] GetMember(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = type;
			paramObjs[3] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod313), "LIBRARY", "System.Reflection.TypeDelegator.GetMember(String, MemberTypes, BindingFlags)", paramObjs, typeof(System.Reflection.MemberInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MemberInfo[])retValue;
		}

		public static System.Type GetNestedType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod314), "LIBRARY", "System.Reflection.TypeDelegator.GetNestedType(String, BindingFlags)", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Type[] GetNestedTypes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod315), "LIBRARY", "System.Reflection.TypeDelegator.GetNestedTypes(BindingFlags)", paramObjs, typeof(System.Type[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type[])retValue;
		}

		public static System.Reflection.EventInfo[] GetEvents(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod316), "LIBRARY", "System.Reflection.TypeDelegator.GetEvents(BindingFlags)", paramObjs, typeof(System.Reflection.EventInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.EventInfo[])retValue;
		}

		public static System.Reflection.EventInfo[] GetEvents(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod317), "LIBRARY", "System.Reflection.TypeDelegator.GetEvents()", paramObjs, typeof(System.Reflection.EventInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.EventInfo[])retValue;
		}

		public static System.Reflection.EventInfo GetEvent(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod318), "LIBRARY", "System.Reflection.TypeDelegator.GetEvent(String, BindingFlags)", paramObjs, typeof(System.Reflection.EventInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.EventInfo)retValue;
		}

		public static System.Type[] GetInterfaces(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod319), "LIBRARY", "System.Reflection.TypeDelegator.GetInterfaces()", paramObjs, typeof(System.Type[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type[])retValue;
		}

		public static System.Type GetInterface(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Boolean ignoreCase)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = ignoreCase;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod320), "LIBRARY", "System.Reflection.TypeDelegator.GetInterface(String, Boolean)", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Reflection.ConstructorInfo[] GetConstructors(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod321), "LIBRARY", "System.Reflection.TypeDelegator.GetConstructors(BindingFlags)", paramObjs, typeof(System.Reflection.ConstructorInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.ConstructorInfo[])retValue;
		}

		public static System.Type get_BaseType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod322), "LIBRARY", "System.Reflection.TypeDelegator.get_BaseType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.String get_AssemblyQualifiedName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod323), "LIBRARY", "System.Reflection.TypeDelegator.get_AssemblyQualifiedName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Namespace(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod324), "LIBRARY", "System.Reflection.TypeDelegator.get_Namespace()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_FullName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod325), "LIBRARY", "System.Reflection.TypeDelegator.get_FullName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.RuntimeTypeHandle get_TypeHandle(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod326), "LIBRARY", "System.Reflection.TypeDelegator.get_TypeHandle()", paramObjs, typeof(System.RuntimeTypeHandle), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.RuntimeTypeHandle)retValue;
		}

		public static System.Reflection.Assembly get_Assembly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod327), "LIBRARY", "System.Reflection.TypeDelegator.get_Assembly()", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

		public static System.Reflection.Module get_Module(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod328), "LIBRARY", "System.Reflection.TypeDelegator.get_Module()", paramObjs, typeof(System.Reflection.Module), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Module)retValue;
		}

		public static System.Guid get_GUID(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod329), "LIBRARY", "System.Reflection.TypeDelegator.get_GUID()", paramObjs, typeof(System.Guid), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Guid)retValue;
		}

		public static System.Boolean IsDefined(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type attributeType, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeType;
			paramObjs[2] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod330), "LIBRARY", "System.Reflection.TypeDelegator.IsDefined(Type, Boolean)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Object[] GetCustomAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod331), "LIBRARY", "System.Reflection.TypeDelegator.GetCustomAttributes(Boolean)", paramObjs, typeof(System.Object[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object[])retValue;
		}

		public static System.Object[] GetCustomAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type attributeType, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeType;
			paramObjs[2] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod332), "LIBRARY", "System.Reflection.TypeDelegator.GetCustomAttributes(Type, Boolean)", paramObjs, typeof(System.Object[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object[])retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod333), "LIBRARY", "System.Reflection.TypeDelegator.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Type delegatingType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = delegatingType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod334), "LIBRARY", "System.Reflection.TypeDelegator.ctor(Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.Emit.UnmanagedMarshal")]
	public class HandlerClass36
	{
		// System.Reflection.Emit.UnmanagedMarshal.get_GetUnmanagedType
		private static bool CallerMethod335(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.UnmanagedMarshal.get_IIDGuid
		private static bool CallerMethod336(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.UnmanagedMarshal.get_ElementCount
		private static bool CallerMethod337(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.UnmanagedMarshal.get_BaseType
		private static bool CallerMethod338(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal
		private static bool CallerMethod339(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr
		private static bool CallerMethod340(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray
		private static bool CallerMethod341(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.UnmanagedMarshal.DefineByValArray
		private static bool CallerMethod342(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.UnmanagedMarshal.DefineLPArray
		private static bool CallerMethod343(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Runtime.InteropServices.UnmanagedType get_GetUnmanagedType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod335), "LIBRARY", "System.Reflection.Emit.UnmanagedMarshal.get_GetUnmanagedType()", paramObjs, typeof(System.Runtime.InteropServices.UnmanagedType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Runtime.InteropServices.UnmanagedType)retValue;
		}

		public static System.Guid get_IIDGuid(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod336), "LIBRARY", "System.Reflection.Emit.UnmanagedMarshal.get_IIDGuid()", paramObjs, typeof(System.Guid), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Guid)retValue;
		}

		public static System.Int32 get_ElementCount(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod337), "LIBRARY", "System.Reflection.Emit.UnmanagedMarshal.get_ElementCount()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Runtime.InteropServices.UnmanagedType get_BaseType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod338), "LIBRARY", "System.Reflection.Emit.UnmanagedMarshal.get_BaseType()", paramObjs, typeof(System.Runtime.InteropServices.UnmanagedType), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Runtime.InteropServices.UnmanagedType)retValue;
		}

		public static System.Reflection.Emit.UnmanagedMarshal DefineUnmanagedMarshal(HeatDotNet.MethodInterceptInfo methodIntercept, System.Runtime.InteropServices.UnmanagedType unmanagedType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = unmanagedType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod339), "LIBRARY", "System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(UnmanagedType)", paramObjs, typeof(System.Reflection.Emit.UnmanagedMarshal), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.UnmanagedMarshal)retValue;
		}

		public static System.Reflection.Emit.UnmanagedMarshal DefineByValTStr(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 elemCount)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = elemCount;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod340), "LIBRARY", "System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(Int32)", paramObjs, typeof(System.Reflection.Emit.UnmanagedMarshal), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.UnmanagedMarshal)retValue;
		}

		public static System.Reflection.Emit.UnmanagedMarshal DefineSafeArray(HeatDotNet.MethodInterceptInfo methodIntercept, System.Runtime.InteropServices.UnmanagedType elemType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = elemType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod341), "LIBRARY", "System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(UnmanagedType)", paramObjs, typeof(System.Reflection.Emit.UnmanagedMarshal), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.UnmanagedMarshal)retValue;
		}

		public static System.Reflection.Emit.UnmanagedMarshal DefineByValArray(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 elemCount)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = elemCount;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod342), "LIBRARY", "System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(Int32)", paramObjs, typeof(System.Reflection.Emit.UnmanagedMarshal), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.UnmanagedMarshal)retValue;
		}

		public static System.Reflection.Emit.UnmanagedMarshal DefineLPArray(HeatDotNet.MethodInterceptInfo methodIntercept, System.Runtime.InteropServices.UnmanagedType elemType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = elemType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod343), "LIBRARY", "System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(UnmanagedType)", paramObjs, typeof(System.Reflection.Emit.UnmanagedMarshal), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.UnmanagedMarshal)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Globalization.Calendar")]
	public class HandlerClass37
	{
		// System.Globalization.Calendar.ToFourDigitYear
		private static bool CallerMethod344(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.Calendar.set_TwoDigitYearMax
		private static bool CallerMethod345(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.Calendar.get_TwoDigitYearMax
		private static bool CallerMethod346(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.Calendar.ToDateTime
		private static bool CallerMethod347(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 8) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.Calendar.IsLeapYear
		private static bool CallerMethod348(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.Calendar.IsLeapMonth
		private static bool CallerMethod349(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.Calendar.IsLeapDay
		private static bool CallerMethod350(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.Calendar.GetWeekOfYear
		private static bool CallerMethod351(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.Calendar.GetSecond
		private static bool CallerMethod352(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.Calendar.GetMonthsInYear
		private static bool CallerMethod353(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.Calendar.GetMinute
		private static bool CallerMethod354(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.Calendar.GetMilliseconds
		private static bool CallerMethod355(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.Calendar.GetHour
		private static bool CallerMethod356(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.Calendar.GetDaysInYear
		private static bool CallerMethod357(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.Calendar.GetDaysInMonth
		private static bool CallerMethod358(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.Calendar.AddWeeks
		private static bool CallerMethod359(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.Calendar.AddSeconds
		private static bool CallerMethod360(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.Calendar.AddMinutes
		private static bool CallerMethod361(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.Calendar.AddMilliseconds
		private static bool CallerMethod362(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.Calendar.AddHours
		private static bool CallerMethod363(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.Calendar.AddDays
		private static bool CallerMethod364(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 ToFourDigitYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod344), "MISCELLANEOUS", "System.Globalization.Calendar.ToFourDigitYear(Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_TwoDigitYearMax(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod345), "MISCELLANEOUS", "System.Globalization.Calendar.set_TwoDigitYearMax(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_TwoDigitYearMax(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod346), "MISCELLANEOUS", "System.Globalization.Calendar.get_TwoDigitYearMax()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DateTime ToDateTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 hour, System.Int32 minute, System.Int32 second, System.Int32 millisecond)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[8];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = day;
			paramObjs[4] = hour;
			paramObjs[5] = minute;
			paramObjs[6] = second;
			paramObjs[7] = millisecond;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod347), "MISCELLANEOUS", "System.Globalization.Calendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.Boolean IsLeapYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod348), "MISCELLANEOUS", "System.Globalization.Calendar.IsLeapYear(Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsLeapMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod349), "MISCELLANEOUS", "System.Globalization.Calendar.IsLeapMonth(Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsLeapDay(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 day)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = day;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod350), "MISCELLANEOUS", "System.Globalization.Calendar.IsLeapDay(Int32, Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetWeekOfYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Globalization.CalendarWeekRule rule, System.DayOfWeek firstDayOfWeek)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = rule;
			paramObjs[3] = firstDayOfWeek;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod351), "MISCELLANEOUS", "System.Globalization.Calendar.GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetSecond(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod352), "MISCELLANEOUS", "System.Globalization.Calendar.GetSecond(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetMonthsInYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod353), "MISCELLANEOUS", "System.Globalization.Calendar.GetMonthsInYear(Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetMinute(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod354), "MISCELLANEOUS", "System.Globalization.Calendar.GetMinute(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Double GetMilliseconds(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod355), "MISCELLANEOUS", "System.Globalization.Calendar.GetMilliseconds(DateTime)", paramObjs, typeof(System.Double), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Double)retValue;
		}

		public static System.Int32 GetHour(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod356), "MISCELLANEOUS", "System.Globalization.Calendar.GetHour(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDaysInYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod357), "MISCELLANEOUS", "System.Globalization.Calendar.GetDaysInYear(Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDaysInMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod358), "MISCELLANEOUS", "System.Globalization.Calendar.GetDaysInMonth(Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DateTime AddWeeks(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 weeks)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = weeks;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod359), "MISCELLANEOUS", "System.Globalization.Calendar.AddWeeks(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime AddSeconds(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 seconds)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = seconds;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod360), "MISCELLANEOUS", "System.Globalization.Calendar.AddSeconds(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime AddMinutes(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 minutes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = minutes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod361), "MISCELLANEOUS", "System.Globalization.Calendar.AddMinutes(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime AddMilliseconds(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Double milliseconds)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = milliseconds;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod362), "MISCELLANEOUS", "System.Globalization.Calendar.AddMilliseconds(DateTime, Double)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime AddHours(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 hours)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = hours;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod363), "MISCELLANEOUS", "System.Globalization.Calendar.AddHours(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime AddDays(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 days)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = days;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod364), "MISCELLANEOUS", "System.Globalization.Calendar.AddDays(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Globalization.CompareInfo")]
	public class HandlerClass38
	{
		// System.Globalization.CompareInfo.GetSortKey
		private static bool CallerMethod365(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.GetSortKey
		private static bool CallerMethod366(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.LastIndexOf
		private static bool CallerMethod367(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.LastIndexOf
		private static bool CallerMethod368(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.LastIndexOf
		private static bool CallerMethod369(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.LastIndexOf
		private static bool CallerMethod370(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.LastIndexOf
		private static bool CallerMethod371(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.LastIndexOf
		private static bool CallerMethod372(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.LastIndexOf
		private static bool CallerMethod373(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.LastIndexOf
		private static bool CallerMethod374(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.LastIndexOf
		private static bool CallerMethod375(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.LastIndexOf
		private static bool CallerMethod376(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.LastIndexOf
		private static bool CallerMethod377(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.LastIndexOf
		private static bool CallerMethod378(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.IndexOf
		private static bool CallerMethod379(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.IndexOf
		private static bool CallerMethod380(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.IndexOf
		private static bool CallerMethod381(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.IndexOf
		private static bool CallerMethod382(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.IndexOf
		private static bool CallerMethod383(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.IndexOf
		private static bool CallerMethod384(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.IndexOf
		private static bool CallerMethod385(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.IndexOf
		private static bool CallerMethod386(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.IndexOf
		private static bool CallerMethod387(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.IndexOf
		private static bool CallerMethod388(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.IndexOf
		private static bool CallerMethod389(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.IndexOf
		private static bool CallerMethod390(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.IsSuffix
		private static bool CallerMethod391(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.IsSuffix
		private static bool CallerMethod392(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.IsPrefix
		private static bool CallerMethod393(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.IsPrefix
		private static bool CallerMethod394(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.Compare
		private static bool CallerMethod395(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 8) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.Compare
		private static bool CallerMethod396(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.Compare
		private static bool CallerMethod397(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.Compare
		private static bool CallerMethod398(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 7) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.Compare
		private static bool CallerMethod399(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.Compare
		private static bool CallerMethod400(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.GetHashCode
		private static bool CallerMethod401(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.Equals
		private static bool CallerMethod402(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.ToString
		private static bool CallerMethod403(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.get_LCID
		private static bool CallerMethod404(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.GetCompareInfo
		private static bool CallerMethod405(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.GetCompareInfo
		private static bool CallerMethod406(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.GetCompareInfo
		private static bool CallerMethod407(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CompareInfo.GetCompareInfo
		private static bool CallerMethod408(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Globalization.SortKey GetSortKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod365), "MISCELLANEOUS", "System.Globalization.CompareInfo.GetSortKey(String)", paramObjs, typeof(System.Globalization.SortKey), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.SortKey)retValue;
		}

		public static System.Globalization.SortKey GetSortKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.Globalization.CompareOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = options;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod366), "MISCELLANEOUS", "System.Globalization.CompareInfo.GetSortKey(String, CompareOptions)", paramObjs, typeof(System.Globalization.SortKey), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.SortKey)retValue;
		}

		public static System.Int32 LastIndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String value, System.Int32 startIndex, System.Int32 count, System.Globalization.CompareOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			paramObjs[3] = startIndex;
			paramObjs[4] = count;
			paramObjs[5] = options;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod367), "MISCELLANEOUS", "System.Globalization.CompareInfo.LastIndexOf(String, String, Int32, Int32, CompareOptions)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 LastIndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.Char value, System.Int32 startIndex, System.Int32 count, System.Globalization.CompareOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			paramObjs[3] = startIndex;
			paramObjs[4] = count;
			paramObjs[5] = options;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod368), "MISCELLANEOUS", "System.Globalization.CompareInfo.LastIndexOf(String, Char, Int32, Int32, CompareOptions)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 LastIndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String value, System.Int32 startIndex, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			paramObjs[3] = startIndex;
			paramObjs[4] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod369), "MISCELLANEOUS", "System.Globalization.CompareInfo.LastIndexOf(String, String, Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 LastIndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String value, System.Int32 startIndex, System.Globalization.CompareOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			paramObjs[3] = startIndex;
			paramObjs[4] = options;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod370), "MISCELLANEOUS", "System.Globalization.CompareInfo.LastIndexOf(String, String, Int32, CompareOptions)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 LastIndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String value, System.Int32 startIndex)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			paramObjs[3] = startIndex;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod371), "MISCELLANEOUS", "System.Globalization.CompareInfo.LastIndexOf(String, String, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 LastIndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.Char value, System.Int32 startIndex, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			paramObjs[3] = startIndex;
			paramObjs[4] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod372), "MISCELLANEOUS", "System.Globalization.CompareInfo.LastIndexOf(String, Char, Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 LastIndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.Char value, System.Int32 startIndex, System.Globalization.CompareOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			paramObjs[3] = startIndex;
			paramObjs[4] = options;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod373), "MISCELLANEOUS", "System.Globalization.CompareInfo.LastIndexOf(String, Char, Int32, CompareOptions)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 LastIndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.Char value, System.Int32 startIndex)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			paramObjs[3] = startIndex;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod374), "MISCELLANEOUS", "System.Globalization.CompareInfo.LastIndexOf(String, Char, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 LastIndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String value, System.Globalization.CompareOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			paramObjs[3] = options;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod375), "MISCELLANEOUS", "System.Globalization.CompareInfo.LastIndexOf(String, String, CompareOptions)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 LastIndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.Char value, System.Globalization.CompareOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			paramObjs[3] = options;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod376), "MISCELLANEOUS", "System.Globalization.CompareInfo.LastIndexOf(String, Char, CompareOptions)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 LastIndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod377), "MISCELLANEOUS", "System.Globalization.CompareInfo.LastIndexOf(String, String)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 LastIndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.Char value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod378), "MISCELLANEOUS", "System.Globalization.CompareInfo.LastIndexOf(String, Char)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String value, System.Int32 startIndex, System.Int32 count, System.Globalization.CompareOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			paramObjs[3] = startIndex;
			paramObjs[4] = count;
			paramObjs[5] = options;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod379), "MISCELLANEOUS", "System.Globalization.CompareInfo.IndexOf(String, String, Int32, Int32, CompareOptions)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.Char value, System.Int32 startIndex, System.Int32 count, System.Globalization.CompareOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			paramObjs[3] = startIndex;
			paramObjs[4] = count;
			paramObjs[5] = options;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod380), "MISCELLANEOUS", "System.Globalization.CompareInfo.IndexOf(String, Char, Int32, Int32, CompareOptions)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String value, System.Int32 startIndex, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			paramObjs[3] = startIndex;
			paramObjs[4] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod381), "MISCELLANEOUS", "System.Globalization.CompareInfo.IndexOf(String, String, Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String value, System.Int32 startIndex, System.Globalization.CompareOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			paramObjs[3] = startIndex;
			paramObjs[4] = options;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod382), "MISCELLANEOUS", "System.Globalization.CompareInfo.IndexOf(String, String, Int32, CompareOptions)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String value, System.Int32 startIndex)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			paramObjs[3] = startIndex;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod383), "MISCELLANEOUS", "System.Globalization.CompareInfo.IndexOf(String, String, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.Char value, System.Int32 startIndex, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			paramObjs[3] = startIndex;
			paramObjs[4] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod384), "MISCELLANEOUS", "System.Globalization.CompareInfo.IndexOf(String, Char, Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.Char value, System.Int32 startIndex, System.Globalization.CompareOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			paramObjs[3] = startIndex;
			paramObjs[4] = options;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod385), "MISCELLANEOUS", "System.Globalization.CompareInfo.IndexOf(String, Char, Int32, CompareOptions)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.Char value, System.Int32 startIndex)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			paramObjs[3] = startIndex;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod386), "MISCELLANEOUS", "System.Globalization.CompareInfo.IndexOf(String, Char, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String value, System.Globalization.CompareOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			paramObjs[3] = options;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod387), "MISCELLANEOUS", "System.Globalization.CompareInfo.IndexOf(String, String, CompareOptions)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.Char value, System.Globalization.CompareOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			paramObjs[3] = options;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod388), "MISCELLANEOUS", "System.Globalization.CompareInfo.IndexOf(String, Char, CompareOptions)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod389), "MISCELLANEOUS", "System.Globalization.CompareInfo.IndexOf(String, String)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 IndexOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.Char value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod390), "MISCELLANEOUS", "System.Globalization.CompareInfo.IndexOf(String, Char)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean IsSuffix(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String suffix)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = suffix;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod391), "MISCELLANEOUS", "System.Globalization.CompareInfo.IsSuffix(String, String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsSuffix(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String suffix, System.Globalization.CompareOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = suffix;
			paramObjs[3] = options;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod392), "MISCELLANEOUS", "System.Globalization.CompareInfo.IsSuffix(String, String, CompareOptions)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsPrefix(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String prefix)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = prefix;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod393), "MISCELLANEOUS", "System.Globalization.CompareInfo.IsPrefix(String, String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsPrefix(HeatDotNet.MethodInterceptInfo methodIntercept, System.String source, System.String prefix, System.Globalization.CompareOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = source;
			paramObjs[2] = prefix;
			paramObjs[3] = options;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod394), "MISCELLANEOUS", "System.Globalization.CompareInfo.IsPrefix(String, String, CompareOptions)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 Compare(HeatDotNet.MethodInterceptInfo methodIntercept, System.String string1, System.Int32 offset1, System.Int32 length1, System.String string2, System.Int32 offset2, System.Int32 length2, System.Globalization.CompareOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[8];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = string1;
			paramObjs[2] = offset1;
			paramObjs[3] = length1;
			paramObjs[4] = string2;
			paramObjs[5] = offset2;
			paramObjs[6] = length2;
			paramObjs[7] = options;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod395), "MISCELLANEOUS", "System.Globalization.CompareInfo.Compare(String, Int32, Int32, String, Int32, Int32, CompareOptions)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Compare(HeatDotNet.MethodInterceptInfo methodIntercept, System.String string1, System.Int32 offset1, System.String string2, System.Int32 offset2)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = string1;
			paramObjs[2] = offset1;
			paramObjs[3] = string2;
			paramObjs[4] = offset2;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod396), "MISCELLANEOUS", "System.Globalization.CompareInfo.Compare(String, Int32, String, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Compare(HeatDotNet.MethodInterceptInfo methodIntercept, System.String string1, System.Int32 offset1, System.String string2, System.Int32 offset2, System.Globalization.CompareOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = string1;
			paramObjs[2] = offset1;
			paramObjs[3] = string2;
			paramObjs[4] = offset2;
			paramObjs[5] = options;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod397), "MISCELLANEOUS", "System.Globalization.CompareInfo.Compare(String, Int32, String, Int32, CompareOptions)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Compare(HeatDotNet.MethodInterceptInfo methodIntercept, System.String string1, System.Int32 offset1, System.Int32 length1, System.String string2, System.Int32 offset2, System.Int32 length2)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[7];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = string1;
			paramObjs[2] = offset1;
			paramObjs[3] = length1;
			paramObjs[4] = string2;
			paramObjs[5] = offset2;
			paramObjs[6] = length2;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod398), "MISCELLANEOUS", "System.Globalization.CompareInfo.Compare(String, Int32, Int32, String, Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Compare(HeatDotNet.MethodInterceptInfo methodIntercept, System.String string1, System.String string2, System.Globalization.CompareOptions options)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = string1;
			paramObjs[2] = string2;
			paramObjs[3] = options;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod399), "MISCELLANEOUS", "System.Globalization.CompareInfo.Compare(String, String, CompareOptions)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Compare(HeatDotNet.MethodInterceptInfo methodIntercept, System.String string1, System.String string2)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = string1;
			paramObjs[2] = string2;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod400), "MISCELLANEOUS", "System.Globalization.CompareInfo.Compare(String, String)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod401), "MISCELLANEOUS", "System.Globalization.CompareInfo.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod402), "MISCELLANEOUS", "System.Globalization.CompareInfo.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod403), "MISCELLANEOUS", "System.Globalization.CompareInfo.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_LCID(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod404), "MISCELLANEOUS", "System.Globalization.CompareInfo.get_LCID()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Globalization.CompareInfo GetCompareInfo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 culture, System.Reflection.Assembly assembly)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = culture;
			paramObjs[2] = assembly;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod405), "MISCELLANEOUS", "System.Globalization.CompareInfo.GetCompareInfo(Int32, Assembly)", paramObjs, typeof(System.Globalization.CompareInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.CompareInfo)retValue;
		}

		public static System.Globalization.CompareInfo GetCompareInfo(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.Assembly assembly)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = assembly;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod406), "MISCELLANEOUS", "System.Globalization.CompareInfo.GetCompareInfo(String, Assembly)", paramObjs, typeof(System.Globalization.CompareInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.CompareInfo)retValue;
		}

		public static System.Globalization.CompareInfo GetCompareInfo(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 culture)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = culture;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod407), "MISCELLANEOUS", "System.Globalization.CompareInfo.GetCompareInfo(Int32)", paramObjs, typeof(System.Globalization.CompareInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.CompareInfo)retValue;
		}

		public static System.Globalization.CompareInfo GetCompareInfo(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod408), "MISCELLANEOUS", "System.Globalization.CompareInfo.GetCompareInfo(String)", paramObjs, typeof(System.Globalization.CompareInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.CompareInfo)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Globalization.CultureInfo")]
	public class HandlerClass39
	{
		// System.Globalization.CultureInfo.GetFormat
		private static bool CallerMethod409(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.Clone
		private static bool CallerMethod410(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_OptionalCalendars
		private static bool CallerMethod411(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_Calendar
		private static bool CallerMethod412(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.set_DateTimeFormat
		private static bool CallerMethod413(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_DateTimeFormat
		private static bool CallerMethod414(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.set_NumberFormat
		private static bool CallerMethod415(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_NumberFormat
		private static bool CallerMethod416(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_IsNeutralCulture
		private static bool CallerMethod417(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_TextInfo
		private static bool CallerMethod418(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_CompareInfo
		private static bool CallerMethod419(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_ThreeLetterWindowsLanguageName
		private static bool CallerMethod420(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_ThreeLetterISOLanguageName
		private static bool CallerMethod421(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_TwoLetterISOLanguageName
		private static bool CallerMethod422(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_EnglishName
		private static bool CallerMethod423(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_NativeName
		private static bool CallerMethod424(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_DisplayName
		private static bool CallerMethod425(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_Name
		private static bool CallerMethod426(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_LCID
		private static bool CallerMethod427(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_Parent
		private static bool CallerMethod428(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.GetHashCode
		private static bool CallerMethod429(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.Equals
		private static bool CallerMethod430(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.ToString
		private static bool CallerMethod431(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.ClearCachedData
		private static bool CallerMethod432(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_UseUserOverride
		private static bool CallerMethod433(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_IsReadOnly
		private static bool CallerMethod434(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.CreateSpecificCulture
		private static bool CallerMethod435(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_CurrentCulture
		private static bool CallerMethod436(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_CurrentUICulture
		private static bool CallerMethod437(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_InstalledUICulture
		private static bool CallerMethod438(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.get_InvariantCulture
		private static bool CallerMethod439(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.GetCultures
		private static bool CallerMethod440(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo.ReadOnly
		private static bool CallerMethod441(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo..ctor
		private static bool CallerMethod442(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo..ctor
		private static bool CallerMethod443(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo..ctor
		private static bool CallerMethod444(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.CultureInfo..ctor
		private static bool CallerMethod445(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object GetFormat(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type formatType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = formatType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod409), "MISCELLANEOUS", "System.Globalization.CultureInfo.GetFormat(Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object Clone(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod410), "MISCELLANEOUS", "System.Globalization.CultureInfo.Clone()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Globalization.Calendar[] get_OptionalCalendars(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod411), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_OptionalCalendars()", paramObjs, typeof(System.Globalization.Calendar[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.Calendar[])retValue;
		}

		public static System.Globalization.Calendar get_Calendar(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod412), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_Calendar()", paramObjs, typeof(System.Globalization.Calendar), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.Calendar)retValue;
		}

		public static void set_DateTimeFormat(HeatDotNet.MethodInterceptInfo methodIntercept, System.Globalization.DateTimeFormatInfo value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod413), "MISCELLANEOUS", "System.Globalization.CultureInfo.set_DateTimeFormat(DateTimeFormatInfo)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Globalization.DateTimeFormatInfo get_DateTimeFormat(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod414), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_DateTimeFormat()", paramObjs, typeof(System.Globalization.DateTimeFormatInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.DateTimeFormatInfo)retValue;
		}

		public static void set_NumberFormat(HeatDotNet.MethodInterceptInfo methodIntercept, System.Globalization.NumberFormatInfo value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod415), "MISCELLANEOUS", "System.Globalization.CultureInfo.set_NumberFormat(NumberFormatInfo)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Globalization.NumberFormatInfo get_NumberFormat(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod416), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_NumberFormat()", paramObjs, typeof(System.Globalization.NumberFormatInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.NumberFormatInfo)retValue;
		}

		public static System.Boolean get_IsNeutralCulture(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod417), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_IsNeutralCulture()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Globalization.TextInfo get_TextInfo(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod418), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_TextInfo()", paramObjs, typeof(System.Globalization.TextInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.TextInfo)retValue;
		}

		public static System.Globalization.CompareInfo get_CompareInfo(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod419), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_CompareInfo()", paramObjs, typeof(System.Globalization.CompareInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.CompareInfo)retValue;
		}

		public static System.String get_ThreeLetterWindowsLanguageName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod420), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_ThreeLetterWindowsLanguageName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_ThreeLetterISOLanguageName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod421), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_ThreeLetterISOLanguageName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_TwoLetterISOLanguageName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod422), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_TwoLetterISOLanguageName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_EnglishName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod423), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_EnglishName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_NativeName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod424), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_NativeName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_DisplayName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod425), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_DisplayName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod426), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_LCID(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod427), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_LCID()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Globalization.CultureInfo get_Parent(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod428), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_Parent()", paramObjs, typeof(System.Globalization.CultureInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.CultureInfo)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod429), "MISCELLANEOUS", "System.Globalization.CultureInfo.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod430), "MISCELLANEOUS", "System.Globalization.CultureInfo.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod431), "MISCELLANEOUS", "System.Globalization.CultureInfo.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ClearCachedData(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod432), "MISCELLANEOUS", "System.Globalization.CultureInfo.ClearCachedData()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_UseUserOverride(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod433), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_UseUserOverride()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsReadOnly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod434), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_IsReadOnly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Globalization.CultureInfo CreateSpecificCulture(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod435), "MISCELLANEOUS", "System.Globalization.CultureInfo.CreateSpecificCulture(String)", paramObjs, typeof(System.Globalization.CultureInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.CultureInfo)retValue;
		}

		public static System.Globalization.CultureInfo get_CurrentCulture(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod436), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_CurrentCulture()", paramObjs, typeof(System.Globalization.CultureInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.CultureInfo)retValue;
		}

		public static System.Globalization.CultureInfo get_CurrentUICulture(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod437), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_CurrentUICulture()", paramObjs, typeof(System.Globalization.CultureInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.CultureInfo)retValue;
		}

		public static System.Globalization.CultureInfo get_InstalledUICulture(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod438), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_InstalledUICulture()", paramObjs, typeof(System.Globalization.CultureInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.CultureInfo)retValue;
		}

		public static System.Globalization.CultureInfo get_InvariantCulture(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod439), "MISCELLANEOUS", "System.Globalization.CultureInfo.get_InvariantCulture()", paramObjs, typeof(System.Globalization.CultureInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.CultureInfo)retValue;
		}

		public static System.Globalization.CultureInfo[] GetCultures(HeatDotNet.MethodInterceptInfo methodIntercept, System.Globalization.CultureTypes types)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = types;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod440), "MISCELLANEOUS", "System.Globalization.CultureInfo.GetCultures(CultureTypes)", paramObjs, typeof(System.Globalization.CultureInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.CultureInfo[])retValue;
		}

		public static System.Globalization.CultureInfo ReadOnly(HeatDotNet.MethodInterceptInfo methodIntercept, System.Globalization.CultureInfo ci)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = ci;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod441), "MISCELLANEOUS", "System.Globalization.CultureInfo.ReadOnly(CultureInfo)", paramObjs, typeof(System.Globalization.CultureInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.CultureInfo)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod442), "MISCELLANEOUS", "System.Globalization.CultureInfo.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String name, System.Boolean useUserOverride)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = name;
			paramObjs[2] = useUserOverride;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod443), "MISCELLANEOUS", "System.Globalization.CultureInfo.ctor(String, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int32 culture)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = culture;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod444), "MISCELLANEOUS", "System.Globalization.CultureInfo.ctor(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int32 culture, System.Boolean useUserOverride)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = culture;
			paramObjs[2] = useUserOverride;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod445), "MISCELLANEOUS", "System.Globalization.CultureInfo.ctor(Int32, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Globalization.DateTimeFormatInfo")]
	public class HandlerClass40
	{
		// System.Globalization.DateTimeFormatInfo.GetFormat
		private static bool CallerMethod446(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.Clone
		private static bool CallerMethod447(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_AMDesignator
		private static bool CallerMethod448(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.set_AMDesignator
		private static bool CallerMethod449(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_Calendar
		private static bool CallerMethod450(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.set_Calendar
		private static bool CallerMethod451(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.GetEra
		private static bool CallerMethod452(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.GetEraName
		private static bool CallerMethod453(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName
		private static bool CallerMethod454(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_DateSeparator
		private static bool CallerMethod455(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.set_DateSeparator
		private static bool CallerMethod456(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_FirstDayOfWeek
		private static bool CallerMethod457(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.set_FirstDayOfWeek
		private static bool CallerMethod458(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_CalendarWeekRule
		private static bool CallerMethod459(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.set_CalendarWeekRule
		private static bool CallerMethod460(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_FullDateTimePattern
		private static bool CallerMethod461(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.set_FullDateTimePattern
		private static bool CallerMethod462(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_LongDatePattern
		private static bool CallerMethod463(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.set_LongDatePattern
		private static bool CallerMethod464(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_LongTimePattern
		private static bool CallerMethod465(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.set_LongTimePattern
		private static bool CallerMethod466(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_MonthDayPattern
		private static bool CallerMethod467(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.set_MonthDayPattern
		private static bool CallerMethod468(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_PMDesignator
		private static bool CallerMethod469(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.set_PMDesignator
		private static bool CallerMethod470(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_RFC1123Pattern
		private static bool CallerMethod471(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_ShortDatePattern
		private static bool CallerMethod472(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.set_ShortDatePattern
		private static bool CallerMethod473(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_ShortTimePattern
		private static bool CallerMethod474(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.set_ShortTimePattern
		private static bool CallerMethod475(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_SortableDateTimePattern
		private static bool CallerMethod476(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_TimeSeparator
		private static bool CallerMethod477(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.set_TimeSeparator
		private static bool CallerMethod478(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_UniversalSortableDateTimePattern
		private static bool CallerMethod479(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_YearMonthPattern
		private static bool CallerMethod480(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.set_YearMonthPattern
		private static bool CallerMethod481(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_AbbreviatedDayNames
		private static bool CallerMethod482(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.set_AbbreviatedDayNames
		private static bool CallerMethod483(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_DayNames
		private static bool CallerMethod484(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.set_DayNames
		private static bool CallerMethod485(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_AbbreviatedMonthNames
		private static bool CallerMethod486(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.set_AbbreviatedMonthNames
		private static bool CallerMethod487(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_MonthNames
		private static bool CallerMethod488(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.set_MonthNames
		private static bool CallerMethod489(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName
		private static bool CallerMethod490(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns
		private static bool CallerMethod491(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns
		private static bool CallerMethod492(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.GetDayName
		private static bool CallerMethod493(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName
		private static bool CallerMethod494(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.GetMonthName
		private static bool CallerMethod495(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_IsReadOnly
		private static bool CallerMethod496(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_InvariantInfo
		private static bool CallerMethod497(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.get_CurrentInfo
		private static bool CallerMethod498(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.GetInstance
		private static bool CallerMethod499(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo.ReadOnly
		private static bool CallerMethod500(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DateTimeFormatInfo..ctor
		private static bool CallerMethod501(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object GetFormat(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type formatType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = formatType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod446), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.GetFormat(Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object Clone(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod447), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.Clone()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.String get_AMDesignator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod448), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_AMDesignator()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_AMDesignator(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod449), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.set_AMDesignator(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Globalization.Calendar get_Calendar(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod450), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_Calendar()", paramObjs, typeof(System.Globalization.Calendar), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.Calendar)retValue;
		}

		public static void set_Calendar(HeatDotNet.MethodInterceptInfo methodIntercept, System.Globalization.Calendar value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod451), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.set_Calendar(Calendar)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 GetEra(HeatDotNet.MethodInterceptInfo methodIntercept, System.String eraName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = eraName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod452), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.GetEra(String)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String GetEraName(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod453), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.GetEraName(Int32)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetAbbreviatedEraName(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod454), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(Int32)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_DateSeparator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod455), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_DateSeparator()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_DateSeparator(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod456), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.set_DateSeparator(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.DayOfWeek get_FirstDayOfWeek(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod457), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_FirstDayOfWeek()", paramObjs, typeof(System.DayOfWeek), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DayOfWeek)retValue;
		}

		public static void set_FirstDayOfWeek(HeatDotNet.MethodInterceptInfo methodIntercept, System.DayOfWeek value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod458), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.set_FirstDayOfWeek(DayOfWeek)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Globalization.CalendarWeekRule get_CalendarWeekRule(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod459), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_CalendarWeekRule()", paramObjs, typeof(System.Globalization.CalendarWeekRule), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.CalendarWeekRule)retValue;
		}

		public static void set_CalendarWeekRule(HeatDotNet.MethodInterceptInfo methodIntercept, System.Globalization.CalendarWeekRule value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod460), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.set_CalendarWeekRule(CalendarWeekRule)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_FullDateTimePattern(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod461), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_FullDateTimePattern()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_FullDateTimePattern(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod462), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.set_FullDateTimePattern(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_LongDatePattern(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod463), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_LongDatePattern()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_LongDatePattern(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod464), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.set_LongDatePattern(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_LongTimePattern(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod465), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_LongTimePattern()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_LongTimePattern(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod466), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.set_LongTimePattern(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_MonthDayPattern(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod467), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_MonthDayPattern()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_MonthDayPattern(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod468), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.set_MonthDayPattern(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_PMDesignator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod469), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_PMDesignator()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_PMDesignator(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod470), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.set_PMDesignator(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_RFC1123Pattern(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod471), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_RFC1123Pattern()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_ShortDatePattern(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod472), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_ShortDatePattern()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_ShortDatePattern(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod473), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.set_ShortDatePattern(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_ShortTimePattern(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod474), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_ShortTimePattern()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_ShortTimePattern(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod475), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.set_ShortTimePattern(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_SortableDateTimePattern(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod476), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_SortableDateTimePattern()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_TimeSeparator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod477), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_TimeSeparator()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_TimeSeparator(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod478), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.set_TimeSeparator(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_UniversalSortableDateTimePattern(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod479), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_UniversalSortableDateTimePattern()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_YearMonthPattern(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod480), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_YearMonthPattern()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_YearMonthPattern(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod481), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.set_YearMonthPattern(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String[] get_AbbreviatedDayNames(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod482), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_AbbreviatedDayNames()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static void set_AbbreviatedDayNames(HeatDotNet.MethodInterceptInfo methodIntercept, System.String[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod483), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.set_AbbreviatedDayNames(String[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String[] get_DayNames(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod484), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_DayNames()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static void set_DayNames(HeatDotNet.MethodInterceptInfo methodIntercept, System.String[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod485), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.set_DayNames(String[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String[] get_AbbreviatedMonthNames(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod486), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_AbbreviatedMonthNames()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static void set_AbbreviatedMonthNames(HeatDotNet.MethodInterceptInfo methodIntercept, System.String[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod487), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.set_AbbreviatedMonthNames(String[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String[] get_MonthNames(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod488), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_MonthNames()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static void set_MonthNames(HeatDotNet.MethodInterceptInfo methodIntercept, System.String[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod489), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.set_MonthNames(String[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String GetAbbreviatedDayName(HeatDotNet.MethodInterceptInfo methodIntercept, System.DayOfWeek dayofweek)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = dayofweek;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod490), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(DayOfWeek)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String[] GetAllDateTimePatterns(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod491), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.String[] GetAllDateTimePatterns(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char format)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = format;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod492), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(Char)", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.String GetDayName(HeatDotNet.MethodInterceptInfo methodIntercept, System.DayOfWeek dayofweek)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = dayofweek;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod493), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.GetDayName(DayOfWeek)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetAbbreviatedMonthName(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 month)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = month;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod494), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(Int32)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetMonthName(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 month)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = month;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod495), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.GetMonthName(Int32)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean get_IsReadOnly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod496), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_IsReadOnly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Globalization.DateTimeFormatInfo get_InvariantInfo(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod497), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_InvariantInfo()", paramObjs, typeof(System.Globalization.DateTimeFormatInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.DateTimeFormatInfo)retValue;
		}

		public static System.Globalization.DateTimeFormatInfo get_CurrentInfo(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod498), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.get_CurrentInfo()", paramObjs, typeof(System.Globalization.DateTimeFormatInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.DateTimeFormatInfo)retValue;
		}

		public static System.Globalization.DateTimeFormatInfo GetInstance(HeatDotNet.MethodInterceptInfo methodIntercept, System.IFormatProvider provider)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = provider;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod499), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.GetInstance(IFormatProvider)", paramObjs, typeof(System.Globalization.DateTimeFormatInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.DateTimeFormatInfo)retValue;
		}

		public static System.Globalization.DateTimeFormatInfo ReadOnly(HeatDotNet.MethodInterceptInfo methodIntercept, System.Globalization.DateTimeFormatInfo dtfi)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = dtfi;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod500), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.ReadOnly(DateTimeFormatInfo)", paramObjs, typeof(System.Globalization.DateTimeFormatInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.DateTimeFormatInfo)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod501), "MISCELLANEOUS", "System.Globalization.DateTimeFormatInfo.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Globalization.DaylightTime")]
	public class HandlerClass41
	{
		// System.Globalization.DaylightTime.get_Start
		private static bool CallerMethod502(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DaylightTime.get_End
		private static bool CallerMethod503(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DaylightTime.get_Delta
		private static bool CallerMethod504(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.DaylightTime..ctor
		private static bool CallerMethod505(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.DateTime get_Start(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod502), "MISCELLANEOUS", "System.Globalization.DaylightTime.get_Start()", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime get_End(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod503), "MISCELLANEOUS", "System.Globalization.DaylightTime.get_End()", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.TimeSpan get_Delta(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod504), "MISCELLANEOUS", "System.Globalization.DaylightTime.get_Delta()", paramObjs, typeof(System.TimeSpan), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.TimeSpan)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.DateTime start, System.DateTime end, System.TimeSpan delta)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = start;
			paramObjs[2] = end;
			paramObjs[3] = delta;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod505), "MISCELLANEOUS", "System.Globalization.DaylightTime.ctor(DateTime, DateTime, TimeSpan)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Globalization.GregorianCalendar")]
	public class HandlerClass42
	{
		// System.Globalization.GregorianCalendar.set_CalendarType
		private static bool CallerMethod506(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar.get_CalendarType
		private static bool CallerMethod507(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar.ToFourDigitYear
		private static bool CallerMethod508(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar.set_TwoDigitYearMax
		private static bool CallerMethod509(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar.get_TwoDigitYearMax
		private static bool CallerMethod510(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar.ToDateTime
		private static bool CallerMethod511(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 9) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar.IsLeapYear
		private static bool CallerMethod512(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar.IsLeapMonth
		private static bool CallerMethod513(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar.IsLeapDay
		private static bool CallerMethod514(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar.GetYear
		private static bool CallerMethod515(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar.GetMonthsInYear
		private static bool CallerMethod516(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar.GetMonth
		private static bool CallerMethod517(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar.get_Eras
		private static bool CallerMethod518(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar.GetEra
		private static bool CallerMethod519(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar.GetDaysInYear
		private static bool CallerMethod520(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar.GetDaysInMonth
		private static bool CallerMethod521(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar.GetDayOfYear
		private static bool CallerMethod522(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar.GetDayOfWeek
		private static bool CallerMethod523(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar.GetDayOfMonth
		private static bool CallerMethod524(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar.AddYears
		private static bool CallerMethod525(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar.AddWeeks
		private static bool CallerMethod526(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar.AddMonths
		private static bool CallerMethod527(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar..ctor
		private static bool CallerMethod528(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.GregorianCalendar..ctor
		private static bool CallerMethod529(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void set_CalendarType(HeatDotNet.MethodInterceptInfo methodIntercept, System.Globalization.GregorianCalendarTypes value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod506), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.set_CalendarType(GregorianCalendarTypes)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Globalization.GregorianCalendarTypes get_CalendarType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod507), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.get_CalendarType()", paramObjs, typeof(System.Globalization.GregorianCalendarTypes), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.GregorianCalendarTypes)retValue;
		}

		public static System.Int32 ToFourDigitYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod508), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.ToFourDigitYear(Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_TwoDigitYearMax(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod509), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.set_TwoDigitYearMax(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_TwoDigitYearMax(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod510), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.get_TwoDigitYearMax()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DateTime ToDateTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 hour, System.Int32 minute, System.Int32 second, System.Int32 millisecond, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[9];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = day;
			paramObjs[4] = hour;
			paramObjs[5] = minute;
			paramObjs[6] = second;
			paramObjs[7] = millisecond;
			paramObjs[8] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod511), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.Boolean IsLeapYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod512), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.IsLeapYear(Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsLeapMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod513), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.IsLeapMonth(Int32, Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsLeapDay(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = day;
			paramObjs[4] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod514), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.IsLeapDay(Int32, Int32, Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod515), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.GetYear(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetMonthsInYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod516), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.GetMonthsInYear(Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod517), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.GetMonth(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32[] get_Eras(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod518), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.get_Eras()", paramObjs, typeof(System.Int32[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32[])retValue;
		}

		public static System.Int32 GetEra(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod519), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.GetEra(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDaysInYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod520), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.GetDaysInYear(Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDaysInMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod521), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.GetDaysInMonth(Int32, Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDayOfYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod522), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.GetDayOfYear(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DayOfWeek GetDayOfWeek(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod523), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.GetDayOfWeek(DateTime)", paramObjs, typeof(System.DayOfWeek), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DayOfWeek)retValue;
		}

		public static System.Int32 GetDayOfMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod524), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.GetDayOfMonth(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DateTime AddYears(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 years)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = years;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod525), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.AddYears(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime AddWeeks(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 weeks)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = weeks;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod526), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.AddWeeks(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime AddMonths(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 months)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = months;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod527), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.AddMonths(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod528), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Globalization.GregorianCalendarTypes type)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = type;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod529), "MISCELLANEOUS", "System.Globalization.GregorianCalendar.ctor(GregorianCalendarTypes)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Globalization.HebrewCalendar")]
	public class HandlerClass43
	{
		// System.Globalization.HebrewCalendar.ToFourDigitYear
		private static bool CallerMethod530(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HebrewCalendar.set_TwoDigitYearMax
		private static bool CallerMethod531(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HebrewCalendar.get_TwoDigitYearMax
		private static bool CallerMethod532(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HebrewCalendar.ToDateTime
		private static bool CallerMethod533(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 9) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HebrewCalendar.IsLeapYear
		private static bool CallerMethod534(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HebrewCalendar.IsLeapMonth
		private static bool CallerMethod535(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HebrewCalendar.IsLeapDay
		private static bool CallerMethod536(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HebrewCalendar.GetYear
		private static bool CallerMethod537(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HebrewCalendar.GetMonthsInYear
		private static bool CallerMethod538(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HebrewCalendar.GetMonth
		private static bool CallerMethod539(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HebrewCalendar.get_Eras
		private static bool CallerMethod540(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HebrewCalendar.GetEra
		private static bool CallerMethod541(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HebrewCalendar.GetDaysInYear
		private static bool CallerMethod542(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HebrewCalendar.GetDaysInMonth
		private static bool CallerMethod543(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HebrewCalendar.GetDayOfYear
		private static bool CallerMethod544(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HebrewCalendar.GetDayOfWeek
		private static bool CallerMethod545(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HebrewCalendar.GetDayOfMonth
		private static bool CallerMethod546(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HebrewCalendar.AddYears
		private static bool CallerMethod547(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HebrewCalendar.AddMonths
		private static bool CallerMethod548(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HebrewCalendar..ctor
		private static bool CallerMethod549(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 ToFourDigitYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod530), "MISCELLANEOUS", "System.Globalization.HebrewCalendar.ToFourDigitYear(Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_TwoDigitYearMax(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod531), "MISCELLANEOUS", "System.Globalization.HebrewCalendar.set_TwoDigitYearMax(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_TwoDigitYearMax(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod532), "MISCELLANEOUS", "System.Globalization.HebrewCalendar.get_TwoDigitYearMax()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DateTime ToDateTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 hour, System.Int32 minute, System.Int32 second, System.Int32 millisecond, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[9];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = day;
			paramObjs[4] = hour;
			paramObjs[5] = minute;
			paramObjs[6] = second;
			paramObjs[7] = millisecond;
			paramObjs[8] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod533), "MISCELLANEOUS", "System.Globalization.HebrewCalendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.Boolean IsLeapYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod534), "MISCELLANEOUS", "System.Globalization.HebrewCalendar.IsLeapYear(Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsLeapMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod535), "MISCELLANEOUS", "System.Globalization.HebrewCalendar.IsLeapMonth(Int32, Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsLeapDay(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = day;
			paramObjs[4] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod536), "MISCELLANEOUS", "System.Globalization.HebrewCalendar.IsLeapDay(Int32, Int32, Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod537), "MISCELLANEOUS", "System.Globalization.HebrewCalendar.GetYear(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetMonthsInYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod538), "MISCELLANEOUS", "System.Globalization.HebrewCalendar.GetMonthsInYear(Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod539), "MISCELLANEOUS", "System.Globalization.HebrewCalendar.GetMonth(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32[] get_Eras(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod540), "MISCELLANEOUS", "System.Globalization.HebrewCalendar.get_Eras()", paramObjs, typeof(System.Int32[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32[])retValue;
		}

		public static System.Int32 GetEra(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod541), "MISCELLANEOUS", "System.Globalization.HebrewCalendar.GetEra(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDaysInYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod542), "MISCELLANEOUS", "System.Globalization.HebrewCalendar.GetDaysInYear(Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDaysInMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod543), "MISCELLANEOUS", "System.Globalization.HebrewCalendar.GetDaysInMonth(Int32, Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDayOfYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod544), "MISCELLANEOUS", "System.Globalization.HebrewCalendar.GetDayOfYear(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DayOfWeek GetDayOfWeek(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod545), "MISCELLANEOUS", "System.Globalization.HebrewCalendar.GetDayOfWeek(DateTime)", paramObjs, typeof(System.DayOfWeek), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DayOfWeek)retValue;
		}

		public static System.Int32 GetDayOfMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod546), "MISCELLANEOUS", "System.Globalization.HebrewCalendar.GetDayOfMonth(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DateTime AddYears(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 years)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = years;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod547), "MISCELLANEOUS", "System.Globalization.HebrewCalendar.AddYears(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime AddMonths(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 months)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = months;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod548), "MISCELLANEOUS", "System.Globalization.HebrewCalendar.AddMonths(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod549), "MISCELLANEOUS", "System.Globalization.HebrewCalendar.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Globalization.HijriCalendar")]
	public class HandlerClass44
	{
		// System.Globalization.HijriCalendar.ToFourDigitYear
		private static bool CallerMethod550(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HijriCalendar.set_TwoDigitYearMax
		private static bool CallerMethod551(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HijriCalendar.get_TwoDigitYearMax
		private static bool CallerMethod552(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HijriCalendar.ToDateTime
		private static bool CallerMethod553(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 9) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HijriCalendar.IsLeapYear
		private static bool CallerMethod554(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HijriCalendar.IsLeapMonth
		private static bool CallerMethod555(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HijriCalendar.IsLeapDay
		private static bool CallerMethod556(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HijriCalendar.GetYear
		private static bool CallerMethod557(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HijriCalendar.GetMonthsInYear
		private static bool CallerMethod558(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HijriCalendar.GetMonth
		private static bool CallerMethod559(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HijriCalendar.get_Eras
		private static bool CallerMethod560(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HijriCalendar.GetEra
		private static bool CallerMethod561(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HijriCalendar.GetDaysInYear
		private static bool CallerMethod562(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HijriCalendar.GetDaysInMonth
		private static bool CallerMethod563(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HijriCalendar.GetDayOfYear
		private static bool CallerMethod564(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HijriCalendar.GetDayOfWeek
		private static bool CallerMethod565(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HijriCalendar.GetDayOfMonth
		private static bool CallerMethod566(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HijriCalendar.AddYears
		private static bool CallerMethod567(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HijriCalendar.AddMonths
		private static bool CallerMethod568(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HijriCalendar.get_HijriAdjustment
		private static bool CallerMethod569(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HijriCalendar.set_HijriAdjustment
		private static bool CallerMethod570(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.HijriCalendar..ctor
		private static bool CallerMethod571(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 ToFourDigitYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod550), "MISCELLANEOUS", "System.Globalization.HijriCalendar.ToFourDigitYear(Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_TwoDigitYearMax(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod551), "MISCELLANEOUS", "System.Globalization.HijriCalendar.set_TwoDigitYearMax(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_TwoDigitYearMax(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod552), "MISCELLANEOUS", "System.Globalization.HijriCalendar.get_TwoDigitYearMax()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DateTime ToDateTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 hour, System.Int32 minute, System.Int32 second, System.Int32 millisecond, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[9];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = day;
			paramObjs[4] = hour;
			paramObjs[5] = minute;
			paramObjs[6] = second;
			paramObjs[7] = millisecond;
			paramObjs[8] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod553), "MISCELLANEOUS", "System.Globalization.HijriCalendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.Boolean IsLeapYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod554), "MISCELLANEOUS", "System.Globalization.HijriCalendar.IsLeapYear(Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsLeapMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod555), "MISCELLANEOUS", "System.Globalization.HijriCalendar.IsLeapMonth(Int32, Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsLeapDay(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = day;
			paramObjs[4] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod556), "MISCELLANEOUS", "System.Globalization.HijriCalendar.IsLeapDay(Int32, Int32, Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod557), "MISCELLANEOUS", "System.Globalization.HijriCalendar.GetYear(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetMonthsInYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod558), "MISCELLANEOUS", "System.Globalization.HijriCalendar.GetMonthsInYear(Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod559), "MISCELLANEOUS", "System.Globalization.HijriCalendar.GetMonth(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32[] get_Eras(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod560), "MISCELLANEOUS", "System.Globalization.HijriCalendar.get_Eras()", paramObjs, typeof(System.Int32[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32[])retValue;
		}

		public static System.Int32 GetEra(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod561), "MISCELLANEOUS", "System.Globalization.HijriCalendar.GetEra(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDaysInYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod562), "MISCELLANEOUS", "System.Globalization.HijriCalendar.GetDaysInYear(Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDaysInMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod563), "MISCELLANEOUS", "System.Globalization.HijriCalendar.GetDaysInMonth(Int32, Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDayOfYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod564), "MISCELLANEOUS", "System.Globalization.HijriCalendar.GetDayOfYear(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DayOfWeek GetDayOfWeek(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod565), "MISCELLANEOUS", "System.Globalization.HijriCalendar.GetDayOfWeek(DateTime)", paramObjs, typeof(System.DayOfWeek), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DayOfWeek)retValue;
		}

		public static System.Int32 GetDayOfMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod566), "MISCELLANEOUS", "System.Globalization.HijriCalendar.GetDayOfMonth(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DateTime AddYears(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 years)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = years;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod567), "MISCELLANEOUS", "System.Globalization.HijriCalendar.AddYears(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime AddMonths(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 months)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = months;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod568), "MISCELLANEOUS", "System.Globalization.HijriCalendar.AddMonths(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.Int32 get_HijriAdjustment(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod569), "MISCELLANEOUS", "System.Globalization.HijriCalendar.get_HijriAdjustment()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_HijriAdjustment(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod570), "MISCELLANEOUS", "System.Globalization.HijriCalendar.set_HijriAdjustment(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod571), "MISCELLANEOUS", "System.Globalization.HijriCalendar.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Globalization.JapaneseCalendar")]
	public class HandlerClass45
	{
		// System.Globalization.JapaneseCalendar.ToFourDigitYear
		private static bool CallerMethod572(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JapaneseCalendar.set_TwoDigitYearMax
		private static bool CallerMethod573(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JapaneseCalendar.get_TwoDigitYearMax
		private static bool CallerMethod574(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JapaneseCalendar.ToDateTime
		private static bool CallerMethod575(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 9) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JapaneseCalendar.IsLeapYear
		private static bool CallerMethod576(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JapaneseCalendar.IsLeapMonth
		private static bool CallerMethod577(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JapaneseCalendar.IsLeapDay
		private static bool CallerMethod578(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JapaneseCalendar.GetYear
		private static bool CallerMethod579(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JapaneseCalendar.GetMonthsInYear
		private static bool CallerMethod580(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JapaneseCalendar.GetMonth
		private static bool CallerMethod581(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JapaneseCalendar.get_Eras
		private static bool CallerMethod582(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JapaneseCalendar.GetEra
		private static bool CallerMethod583(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JapaneseCalendar.GetDaysInYear
		private static bool CallerMethod584(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JapaneseCalendar.GetDaysInMonth
		private static bool CallerMethod585(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JapaneseCalendar.GetDayOfYear
		private static bool CallerMethod586(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JapaneseCalendar.GetDayOfWeek
		private static bool CallerMethod587(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JapaneseCalendar.GetDayOfMonth
		private static bool CallerMethod588(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JapaneseCalendar.AddYears
		private static bool CallerMethod589(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JapaneseCalendar.AddMonths
		private static bool CallerMethod590(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JapaneseCalendar..ctor
		private static bool CallerMethod591(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 ToFourDigitYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod572), "MISCELLANEOUS", "System.Globalization.JapaneseCalendar.ToFourDigitYear(Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_TwoDigitYearMax(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod573), "MISCELLANEOUS", "System.Globalization.JapaneseCalendar.set_TwoDigitYearMax(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_TwoDigitYearMax(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod574), "MISCELLANEOUS", "System.Globalization.JapaneseCalendar.get_TwoDigitYearMax()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DateTime ToDateTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 hour, System.Int32 minute, System.Int32 second, System.Int32 millisecond, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[9];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = day;
			paramObjs[4] = hour;
			paramObjs[5] = minute;
			paramObjs[6] = second;
			paramObjs[7] = millisecond;
			paramObjs[8] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod575), "MISCELLANEOUS", "System.Globalization.JapaneseCalendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.Boolean IsLeapYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod576), "MISCELLANEOUS", "System.Globalization.JapaneseCalendar.IsLeapYear(Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsLeapMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod577), "MISCELLANEOUS", "System.Globalization.JapaneseCalendar.IsLeapMonth(Int32, Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsLeapDay(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = day;
			paramObjs[4] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod578), "MISCELLANEOUS", "System.Globalization.JapaneseCalendar.IsLeapDay(Int32, Int32, Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod579), "MISCELLANEOUS", "System.Globalization.JapaneseCalendar.GetYear(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetMonthsInYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod580), "MISCELLANEOUS", "System.Globalization.JapaneseCalendar.GetMonthsInYear(Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod581), "MISCELLANEOUS", "System.Globalization.JapaneseCalendar.GetMonth(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32[] get_Eras(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod582), "MISCELLANEOUS", "System.Globalization.JapaneseCalendar.get_Eras()", paramObjs, typeof(System.Int32[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32[])retValue;
		}

		public static System.Int32 GetEra(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod583), "MISCELLANEOUS", "System.Globalization.JapaneseCalendar.GetEra(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDaysInYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod584), "MISCELLANEOUS", "System.Globalization.JapaneseCalendar.GetDaysInYear(Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDaysInMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod585), "MISCELLANEOUS", "System.Globalization.JapaneseCalendar.GetDaysInMonth(Int32, Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDayOfYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod586), "MISCELLANEOUS", "System.Globalization.JapaneseCalendar.GetDayOfYear(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DayOfWeek GetDayOfWeek(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod587), "MISCELLANEOUS", "System.Globalization.JapaneseCalendar.GetDayOfWeek(DateTime)", paramObjs, typeof(System.DayOfWeek), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DayOfWeek)retValue;
		}

		public static System.Int32 GetDayOfMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod588), "MISCELLANEOUS", "System.Globalization.JapaneseCalendar.GetDayOfMonth(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DateTime AddYears(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 years)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = years;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod589), "MISCELLANEOUS", "System.Globalization.JapaneseCalendar.AddYears(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime AddMonths(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 months)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = months;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod590), "MISCELLANEOUS", "System.Globalization.JapaneseCalendar.AddMonths(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod591), "MISCELLANEOUS", "System.Globalization.JapaneseCalendar.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Globalization.JulianCalendar")]
	public class HandlerClass46
	{
		// System.Globalization.JulianCalendar.ToFourDigitYear
		private static bool CallerMethod592(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JulianCalendar.set_TwoDigitYearMax
		private static bool CallerMethod593(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JulianCalendar.get_TwoDigitYearMax
		private static bool CallerMethod594(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JulianCalendar.ToDateTime
		private static bool CallerMethod595(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 9) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JulianCalendar.IsLeapYear
		private static bool CallerMethod596(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JulianCalendar.IsLeapMonth
		private static bool CallerMethod597(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JulianCalendar.IsLeapDay
		private static bool CallerMethod598(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JulianCalendar.GetYear
		private static bool CallerMethod599(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JulianCalendar.GetMonthsInYear
		private static bool CallerMethod600(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JulianCalendar.GetMonth
		private static bool CallerMethod601(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JulianCalendar.get_Eras
		private static bool CallerMethod602(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JulianCalendar.GetEra
		private static bool CallerMethod603(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JulianCalendar.GetDaysInYear
		private static bool CallerMethod604(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JulianCalendar.GetDaysInMonth
		private static bool CallerMethod605(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JulianCalendar.GetDayOfYear
		private static bool CallerMethod606(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JulianCalendar.GetDayOfWeek
		private static bool CallerMethod607(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JulianCalendar.GetDayOfMonth
		private static bool CallerMethod608(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JulianCalendar.AddYears
		private static bool CallerMethod609(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JulianCalendar.AddMonths
		private static bool CallerMethod610(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.JulianCalendar..ctor
		private static bool CallerMethod611(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 ToFourDigitYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod592), "MISCELLANEOUS", "System.Globalization.JulianCalendar.ToFourDigitYear(Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_TwoDigitYearMax(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod593), "MISCELLANEOUS", "System.Globalization.JulianCalendar.set_TwoDigitYearMax(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_TwoDigitYearMax(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod594), "MISCELLANEOUS", "System.Globalization.JulianCalendar.get_TwoDigitYearMax()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DateTime ToDateTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 hour, System.Int32 minute, System.Int32 second, System.Int32 millisecond, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[9];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = day;
			paramObjs[4] = hour;
			paramObjs[5] = minute;
			paramObjs[6] = second;
			paramObjs[7] = millisecond;
			paramObjs[8] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod595), "MISCELLANEOUS", "System.Globalization.JulianCalendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.Boolean IsLeapYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod596), "MISCELLANEOUS", "System.Globalization.JulianCalendar.IsLeapYear(Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsLeapMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod597), "MISCELLANEOUS", "System.Globalization.JulianCalendar.IsLeapMonth(Int32, Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsLeapDay(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = day;
			paramObjs[4] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod598), "MISCELLANEOUS", "System.Globalization.JulianCalendar.IsLeapDay(Int32, Int32, Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod599), "MISCELLANEOUS", "System.Globalization.JulianCalendar.GetYear(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetMonthsInYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod600), "MISCELLANEOUS", "System.Globalization.JulianCalendar.GetMonthsInYear(Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod601), "MISCELLANEOUS", "System.Globalization.JulianCalendar.GetMonth(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32[] get_Eras(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod602), "MISCELLANEOUS", "System.Globalization.JulianCalendar.get_Eras()", paramObjs, typeof(System.Int32[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32[])retValue;
		}

		public static System.Int32 GetEra(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod603), "MISCELLANEOUS", "System.Globalization.JulianCalendar.GetEra(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDaysInYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod604), "MISCELLANEOUS", "System.Globalization.JulianCalendar.GetDaysInYear(Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDaysInMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod605), "MISCELLANEOUS", "System.Globalization.JulianCalendar.GetDaysInMonth(Int32, Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDayOfYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod606), "MISCELLANEOUS", "System.Globalization.JulianCalendar.GetDayOfYear(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DayOfWeek GetDayOfWeek(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod607), "MISCELLANEOUS", "System.Globalization.JulianCalendar.GetDayOfWeek(DateTime)", paramObjs, typeof(System.DayOfWeek), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DayOfWeek)retValue;
		}

		public static System.Int32 GetDayOfMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod608), "MISCELLANEOUS", "System.Globalization.JulianCalendar.GetDayOfMonth(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DateTime AddYears(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 years)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = years;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod609), "MISCELLANEOUS", "System.Globalization.JulianCalendar.AddYears(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime AddMonths(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 months)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = months;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod610), "MISCELLANEOUS", "System.Globalization.JulianCalendar.AddMonths(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod611), "MISCELLANEOUS", "System.Globalization.JulianCalendar.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Globalization.KoreanCalendar")]
	public class HandlerClass47
	{
		// System.Globalization.KoreanCalendar.ToFourDigitYear
		private static bool CallerMethod612(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.KoreanCalendar.set_TwoDigitYearMax
		private static bool CallerMethod613(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.KoreanCalendar.get_TwoDigitYearMax
		private static bool CallerMethod614(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.KoreanCalendar.ToDateTime
		private static bool CallerMethod615(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 9) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.KoreanCalendar.IsLeapYear
		private static bool CallerMethod616(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.KoreanCalendar.IsLeapMonth
		private static bool CallerMethod617(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.KoreanCalendar.IsLeapDay
		private static bool CallerMethod618(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.KoreanCalendar.GetYear
		private static bool CallerMethod619(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.KoreanCalendar.GetMonthsInYear
		private static bool CallerMethod620(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.KoreanCalendar.GetMonth
		private static bool CallerMethod621(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.KoreanCalendar.get_Eras
		private static bool CallerMethod622(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.KoreanCalendar.GetEra
		private static bool CallerMethod623(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.KoreanCalendar.GetDaysInYear
		private static bool CallerMethod624(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.KoreanCalendar.GetDaysInMonth
		private static bool CallerMethod625(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.KoreanCalendar.GetDayOfYear
		private static bool CallerMethod626(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.KoreanCalendar.GetDayOfWeek
		private static bool CallerMethod627(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.KoreanCalendar.GetDayOfMonth
		private static bool CallerMethod628(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.KoreanCalendar.AddYears
		private static bool CallerMethod629(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.KoreanCalendar.AddMonths
		private static bool CallerMethod630(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.KoreanCalendar..ctor
		private static bool CallerMethod631(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 ToFourDigitYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod612), "MISCELLANEOUS", "System.Globalization.KoreanCalendar.ToFourDigitYear(Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_TwoDigitYearMax(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod613), "MISCELLANEOUS", "System.Globalization.KoreanCalendar.set_TwoDigitYearMax(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_TwoDigitYearMax(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod614), "MISCELLANEOUS", "System.Globalization.KoreanCalendar.get_TwoDigitYearMax()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DateTime ToDateTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 hour, System.Int32 minute, System.Int32 second, System.Int32 millisecond, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[9];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = day;
			paramObjs[4] = hour;
			paramObjs[5] = minute;
			paramObjs[6] = second;
			paramObjs[7] = millisecond;
			paramObjs[8] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod615), "MISCELLANEOUS", "System.Globalization.KoreanCalendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.Boolean IsLeapYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod616), "MISCELLANEOUS", "System.Globalization.KoreanCalendar.IsLeapYear(Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsLeapMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod617), "MISCELLANEOUS", "System.Globalization.KoreanCalendar.IsLeapMonth(Int32, Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsLeapDay(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = day;
			paramObjs[4] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod618), "MISCELLANEOUS", "System.Globalization.KoreanCalendar.IsLeapDay(Int32, Int32, Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod619), "MISCELLANEOUS", "System.Globalization.KoreanCalendar.GetYear(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetMonthsInYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod620), "MISCELLANEOUS", "System.Globalization.KoreanCalendar.GetMonthsInYear(Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod621), "MISCELLANEOUS", "System.Globalization.KoreanCalendar.GetMonth(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32[] get_Eras(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod622), "MISCELLANEOUS", "System.Globalization.KoreanCalendar.get_Eras()", paramObjs, typeof(System.Int32[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32[])retValue;
		}

		public static System.Int32 GetEra(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod623), "MISCELLANEOUS", "System.Globalization.KoreanCalendar.GetEra(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDaysInYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod624), "MISCELLANEOUS", "System.Globalization.KoreanCalendar.GetDaysInYear(Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDaysInMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod625), "MISCELLANEOUS", "System.Globalization.KoreanCalendar.GetDaysInMonth(Int32, Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDayOfYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod626), "MISCELLANEOUS", "System.Globalization.KoreanCalendar.GetDayOfYear(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DayOfWeek GetDayOfWeek(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod627), "MISCELLANEOUS", "System.Globalization.KoreanCalendar.GetDayOfWeek(DateTime)", paramObjs, typeof(System.DayOfWeek), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DayOfWeek)retValue;
		}

		public static System.Int32 GetDayOfMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod628), "MISCELLANEOUS", "System.Globalization.KoreanCalendar.GetDayOfMonth(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DateTime AddYears(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 years)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = years;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod629), "MISCELLANEOUS", "System.Globalization.KoreanCalendar.AddYears(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime AddMonths(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 months)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = months;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod630), "MISCELLANEOUS", "System.Globalization.KoreanCalendar.AddMonths(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod631), "MISCELLANEOUS", "System.Globalization.KoreanCalendar.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Globalization.RegionInfo")]
	public class HandlerClass48
	{
		// System.Globalization.RegionInfo.get_ISOCurrencySymbol
		private static bool CallerMethod632(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.RegionInfo.get_CurrencySymbol
		private static bool CallerMethod633(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.RegionInfo.get_ThreeLetterWindowsRegionName
		private static bool CallerMethod634(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.RegionInfo.get_IsMetric
		private static bool CallerMethod635(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.RegionInfo.get_ThreeLetterISORegionName
		private static bool CallerMethod636(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.RegionInfo.get_TwoLetterISORegionName
		private static bool CallerMethod637(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.RegionInfo.get_DisplayName
		private static bool CallerMethod638(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.RegionInfo.get_EnglishName
		private static bool CallerMethod639(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.RegionInfo.get_Name
		private static bool CallerMethod640(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.RegionInfo.GetHashCode
		private static bool CallerMethod641(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.RegionInfo.Equals
		private static bool CallerMethod642(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.RegionInfo.ToString
		private static bool CallerMethod643(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.RegionInfo.get_CurrentRegion
		private static bool CallerMethod644(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.RegionInfo..ctor
		private static bool CallerMethod645(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.RegionInfo..ctor
		private static bool CallerMethod646(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_ISOCurrencySymbol(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod632), "MISCELLANEOUS", "System.Globalization.RegionInfo.get_ISOCurrencySymbol()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_CurrencySymbol(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod633), "MISCELLANEOUS", "System.Globalization.RegionInfo.get_CurrencySymbol()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_ThreeLetterWindowsRegionName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod634), "MISCELLANEOUS", "System.Globalization.RegionInfo.get_ThreeLetterWindowsRegionName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean get_IsMetric(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod635), "MISCELLANEOUS", "System.Globalization.RegionInfo.get_IsMetric()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_ThreeLetterISORegionName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod636), "MISCELLANEOUS", "System.Globalization.RegionInfo.get_ThreeLetterISORegionName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_TwoLetterISORegionName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod637), "MISCELLANEOUS", "System.Globalization.RegionInfo.get_TwoLetterISORegionName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_DisplayName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod638), "MISCELLANEOUS", "System.Globalization.RegionInfo.get_DisplayName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_EnglishName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod639), "MISCELLANEOUS", "System.Globalization.RegionInfo.get_EnglishName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod640), "MISCELLANEOUS", "System.Globalization.RegionInfo.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod641), "MISCELLANEOUS", "System.Globalization.RegionInfo.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod642), "MISCELLANEOUS", "System.Globalization.RegionInfo.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod643), "MISCELLANEOUS", "System.Globalization.RegionInfo.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Globalization.RegionInfo get_CurrentRegion(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod644), "MISCELLANEOUS", "System.Globalization.RegionInfo.get_CurrentRegion()", paramObjs, typeof(System.Globalization.RegionInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.RegionInfo)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod645), "MISCELLANEOUS", "System.Globalization.RegionInfo.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int32 culture)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = culture;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod646), "MISCELLANEOUS", "System.Globalization.RegionInfo.ctor(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Globalization.SortKey")]
	public class HandlerClass49
	{
		// System.Globalization.SortKey.get_KeyData
		private static bool CallerMethod647(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.SortKey.get_OriginalString
		private static bool CallerMethod648(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.SortKey.GetHashCode
		private static bool CallerMethod649(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.SortKey.Equals
		private static bool CallerMethod650(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.SortKey.ToString
		private static bool CallerMethod651(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.SortKey.Compare
		private static bool CallerMethod652(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Byte[] get_KeyData(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod647), "MISCELLANEOUS", "System.Globalization.SortKey.get_KeyData()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.String get_OriginalString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod648), "MISCELLANEOUS", "System.Globalization.SortKey.get_OriginalString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod649), "MISCELLANEOUS", "System.Globalization.SortKey.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod650), "MISCELLANEOUS", "System.Globalization.SortKey.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod651), "MISCELLANEOUS", "System.Globalization.SortKey.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 Compare(HeatDotNet.MethodInterceptInfo methodIntercept, System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = sortkey1;
			paramObjs[2] = sortkey2;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod652), "MISCELLANEOUS", "System.Globalization.SortKey.Compare(SortKey, SortKey)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Globalization.StringInfo")]
	public class HandlerClass50
	{
		// System.Globalization.StringInfo.GetNextTextElement
		private static bool CallerMethod653(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.StringInfo.GetNextTextElement
		private static bool CallerMethod654(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.StringInfo.GetTextElementEnumerator
		private static bool CallerMethod655(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.StringInfo.GetTextElementEnumerator
		private static bool CallerMethod656(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.StringInfo.ParseCombiningCharacters
		private static bool CallerMethod657(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.StringInfo..ctor
		private static bool CallerMethod658(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String GetNextTextElement(HeatDotNet.MethodInterceptInfo methodIntercept, System.String str)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = str;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod653), "MISCELLANEOUS", "System.Globalization.StringInfo.GetNextTextElement(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetNextTextElement(HeatDotNet.MethodInterceptInfo methodIntercept, System.String str, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = str;
			paramObjs[2] = index;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod654), "MISCELLANEOUS", "System.Globalization.StringInfo.GetNextTextElement(String, Int32)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Globalization.TextElementEnumerator GetTextElementEnumerator(HeatDotNet.MethodInterceptInfo methodIntercept, System.String str)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = str;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod655), "MISCELLANEOUS", "System.Globalization.StringInfo.GetTextElementEnumerator(String)", paramObjs, typeof(System.Globalization.TextElementEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.TextElementEnumerator)retValue;
		}

		public static System.Globalization.TextElementEnumerator GetTextElementEnumerator(HeatDotNet.MethodInterceptInfo methodIntercept, System.String str, System.Int32 index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = str;
			paramObjs[2] = index;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod656), "MISCELLANEOUS", "System.Globalization.StringInfo.GetTextElementEnumerator(String, Int32)", paramObjs, typeof(System.Globalization.TextElementEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.TextElementEnumerator)retValue;
		}

		public static System.Int32[] ParseCombiningCharacters(HeatDotNet.MethodInterceptInfo methodIntercept, System.String str)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = str;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod657), "MISCELLANEOUS", "System.Globalization.StringInfo.ParseCombiningCharacters(String)", paramObjs, typeof(System.Int32[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32[])retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod658), "MISCELLANEOUS", "System.Globalization.StringInfo.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Globalization.TaiwanCalendar")]
	public class HandlerClass51
	{
		// System.Globalization.TaiwanCalendar.ToFourDigitYear
		private static bool CallerMethod659(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TaiwanCalendar.set_TwoDigitYearMax
		private static bool CallerMethod660(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TaiwanCalendar.get_TwoDigitYearMax
		private static bool CallerMethod661(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TaiwanCalendar.ToDateTime
		private static bool CallerMethod662(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 9) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TaiwanCalendar.IsLeapYear
		private static bool CallerMethod663(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TaiwanCalendar.IsLeapMonth
		private static bool CallerMethod664(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TaiwanCalendar.IsLeapDay
		private static bool CallerMethod665(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TaiwanCalendar.GetYear
		private static bool CallerMethod666(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TaiwanCalendar.GetMonthsInYear
		private static bool CallerMethod667(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TaiwanCalendar.GetMonth
		private static bool CallerMethod668(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TaiwanCalendar.get_Eras
		private static bool CallerMethod669(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TaiwanCalendar.GetEra
		private static bool CallerMethod670(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TaiwanCalendar.GetDaysInYear
		private static bool CallerMethod671(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TaiwanCalendar.GetDaysInMonth
		private static bool CallerMethod672(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TaiwanCalendar.GetDayOfYear
		private static bool CallerMethod673(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TaiwanCalendar.GetDayOfWeek
		private static bool CallerMethod674(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TaiwanCalendar.GetDayOfMonth
		private static bool CallerMethod675(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TaiwanCalendar.AddYears
		private static bool CallerMethod676(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TaiwanCalendar.AddMonths
		private static bool CallerMethod677(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TaiwanCalendar..ctor
		private static bool CallerMethod678(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 ToFourDigitYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod659), "MISCELLANEOUS", "System.Globalization.TaiwanCalendar.ToFourDigitYear(Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_TwoDigitYearMax(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod660), "MISCELLANEOUS", "System.Globalization.TaiwanCalendar.set_TwoDigitYearMax(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_TwoDigitYearMax(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod661), "MISCELLANEOUS", "System.Globalization.TaiwanCalendar.get_TwoDigitYearMax()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DateTime ToDateTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 hour, System.Int32 minute, System.Int32 second, System.Int32 millisecond, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[9];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = day;
			paramObjs[4] = hour;
			paramObjs[5] = minute;
			paramObjs[6] = second;
			paramObjs[7] = millisecond;
			paramObjs[8] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod662), "MISCELLANEOUS", "System.Globalization.TaiwanCalendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.Boolean IsLeapYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod663), "MISCELLANEOUS", "System.Globalization.TaiwanCalendar.IsLeapYear(Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsLeapMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod664), "MISCELLANEOUS", "System.Globalization.TaiwanCalendar.IsLeapMonth(Int32, Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsLeapDay(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = day;
			paramObjs[4] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod665), "MISCELLANEOUS", "System.Globalization.TaiwanCalendar.IsLeapDay(Int32, Int32, Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod666), "MISCELLANEOUS", "System.Globalization.TaiwanCalendar.GetYear(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetMonthsInYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod667), "MISCELLANEOUS", "System.Globalization.TaiwanCalendar.GetMonthsInYear(Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod668), "MISCELLANEOUS", "System.Globalization.TaiwanCalendar.GetMonth(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32[] get_Eras(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod669), "MISCELLANEOUS", "System.Globalization.TaiwanCalendar.get_Eras()", paramObjs, typeof(System.Int32[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32[])retValue;
		}

		public static System.Int32 GetEra(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod670), "MISCELLANEOUS", "System.Globalization.TaiwanCalendar.GetEra(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDaysInYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod671), "MISCELLANEOUS", "System.Globalization.TaiwanCalendar.GetDaysInYear(Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDaysInMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod672), "MISCELLANEOUS", "System.Globalization.TaiwanCalendar.GetDaysInMonth(Int32, Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDayOfYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod673), "MISCELLANEOUS", "System.Globalization.TaiwanCalendar.GetDayOfYear(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DayOfWeek GetDayOfWeek(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod674), "MISCELLANEOUS", "System.Globalization.TaiwanCalendar.GetDayOfWeek(DateTime)", paramObjs, typeof(System.DayOfWeek), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DayOfWeek)retValue;
		}

		public static System.Int32 GetDayOfMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod675), "MISCELLANEOUS", "System.Globalization.TaiwanCalendar.GetDayOfMonth(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DateTime AddYears(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 years)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = years;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod676), "MISCELLANEOUS", "System.Globalization.TaiwanCalendar.AddYears(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime AddMonths(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 months)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = months;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod677), "MISCELLANEOUS", "System.Globalization.TaiwanCalendar.AddMonths(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod678), "MISCELLANEOUS", "System.Globalization.TaiwanCalendar.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Globalization.TextElementEnumerator")]
	public class HandlerClass52
	{
		// System.Globalization.TextElementEnumerator.Reset
		private static bool CallerMethod679(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TextElementEnumerator.get_Current
		private static bool CallerMethod680(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TextElementEnumerator.MoveNext
		private static bool CallerMethod681(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TextElementEnumerator.GetTextElement
		private static bool CallerMethod682(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TextElementEnumerator.get_ElementIndex
		private static bool CallerMethod683(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Reset(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod679), "MISCELLANEOUS", "System.Globalization.TextElementEnumerator.Reset()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Object get_Current(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod680), "MISCELLANEOUS", "System.Globalization.TextElementEnumerator.get_Current()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Boolean MoveNext(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod681), "MISCELLANEOUS", "System.Globalization.TextElementEnumerator.MoveNext()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String GetTextElement(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod682), "MISCELLANEOUS", "System.Globalization.TextElementEnumerator.GetTextElement()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_ElementIndex(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod683), "MISCELLANEOUS", "System.Globalization.TextElementEnumerator.get_ElementIndex()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Globalization.TextInfo")]
	public class HandlerClass53
	{
		// System.Globalization.TextInfo.ToUpper
		private static bool CallerMethod684(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TextInfo.ToUpper
		private static bool CallerMethod685(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TextInfo.ToLower
		private static bool CallerMethod686(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TextInfo.ToLower
		private static bool CallerMethod687(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TextInfo.get_ListSeparator
		private static bool CallerMethod688(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TextInfo.get_EBCDICCodePage
		private static bool CallerMethod689(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TextInfo.get_MacCodePage
		private static bool CallerMethod690(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TextInfo.get_OEMCodePage
		private static bool CallerMethod691(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TextInfo.get_ANSICodePage
		private static bool CallerMethod692(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TextInfo.GetHashCode
		private static bool CallerMethod693(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TextInfo.Equals
		private static bool CallerMethod694(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TextInfo.ToString
		private static bool CallerMethod695(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.TextInfo.ToTitleCase
		private static bool CallerMethod696(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String ToUpper(HeatDotNet.MethodInterceptInfo methodIntercept, System.String str)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = str;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod684), "MISCELLANEOUS", "System.Globalization.TextInfo.ToUpper(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Char ToUpper(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char c)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = c;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod685), "MISCELLANEOUS", "System.Globalization.TextInfo.ToUpper(Char)", paramObjs, typeof(System.Char), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Char)retValue;
		}

		public static System.String ToLower(HeatDotNet.MethodInterceptInfo methodIntercept, System.String str)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = str;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod686), "MISCELLANEOUS", "System.Globalization.TextInfo.ToLower(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Char ToLower(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char c)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = c;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod687), "MISCELLANEOUS", "System.Globalization.TextInfo.ToLower(Char)", paramObjs, typeof(System.Char), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Char)retValue;
		}

		public static System.String get_ListSeparator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod688), "MISCELLANEOUS", "System.Globalization.TextInfo.get_ListSeparator()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_EBCDICCodePage(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod689), "MISCELLANEOUS", "System.Globalization.TextInfo.get_EBCDICCodePage()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_MacCodePage(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod690), "MISCELLANEOUS", "System.Globalization.TextInfo.get_MacCodePage()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_OEMCodePage(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod691), "MISCELLANEOUS", "System.Globalization.TextInfo.get_OEMCodePage()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_ANSICodePage(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod692), "MISCELLANEOUS", "System.Globalization.TextInfo.get_ANSICodePage()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod693), "MISCELLANEOUS", "System.Globalization.TextInfo.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod694), "MISCELLANEOUS", "System.Globalization.TextInfo.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod695), "MISCELLANEOUS", "System.Globalization.TextInfo.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToTitleCase(HeatDotNet.MethodInterceptInfo methodIntercept, System.String str)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = str;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod696), "MISCELLANEOUS", "System.Globalization.TextInfo.ToTitleCase(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Globalization.ThaiBuddhistCalendar")]
	public class HandlerClass54
	{
		// System.Globalization.ThaiBuddhistCalendar.ToFourDigitYear
		private static bool CallerMethod697(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.ThaiBuddhistCalendar.set_TwoDigitYearMax
		private static bool CallerMethod698(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.ThaiBuddhistCalendar.get_TwoDigitYearMax
		private static bool CallerMethod699(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.ThaiBuddhistCalendar.ToDateTime
		private static bool CallerMethod700(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 9) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.ThaiBuddhistCalendar.IsLeapYear
		private static bool CallerMethod701(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.ThaiBuddhistCalendar.IsLeapMonth
		private static bool CallerMethod702(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.ThaiBuddhistCalendar.IsLeapDay
		private static bool CallerMethod703(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.ThaiBuddhistCalendar.GetYear
		private static bool CallerMethod704(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.ThaiBuddhistCalendar.GetMonthsInYear
		private static bool CallerMethod705(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.ThaiBuddhistCalendar.GetMonth
		private static bool CallerMethod706(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.ThaiBuddhistCalendar.get_Eras
		private static bool CallerMethod707(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.ThaiBuddhistCalendar.GetEra
		private static bool CallerMethod708(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.ThaiBuddhistCalendar.GetDaysInYear
		private static bool CallerMethod709(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.ThaiBuddhistCalendar.GetDaysInMonth
		private static bool CallerMethod710(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.ThaiBuddhistCalendar.GetDayOfYear
		private static bool CallerMethod711(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.ThaiBuddhistCalendar.GetDayOfWeek
		private static bool CallerMethod712(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.ThaiBuddhistCalendar.GetDayOfMonth
		private static bool CallerMethod713(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.ThaiBuddhistCalendar.AddYears
		private static bool CallerMethod714(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.ThaiBuddhistCalendar.AddMonths
		private static bool CallerMethod715(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.ThaiBuddhistCalendar..ctor
		private static bool CallerMethod716(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 ToFourDigitYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod697), "MISCELLANEOUS", "System.Globalization.ThaiBuddhistCalendar.ToFourDigitYear(Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_TwoDigitYearMax(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod698), "MISCELLANEOUS", "System.Globalization.ThaiBuddhistCalendar.set_TwoDigitYearMax(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_TwoDigitYearMax(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod699), "MISCELLANEOUS", "System.Globalization.ThaiBuddhistCalendar.get_TwoDigitYearMax()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DateTime ToDateTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 hour, System.Int32 minute, System.Int32 second, System.Int32 millisecond, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[9];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = day;
			paramObjs[4] = hour;
			paramObjs[5] = minute;
			paramObjs[6] = second;
			paramObjs[7] = millisecond;
			paramObjs[8] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod700), "MISCELLANEOUS", "System.Globalization.ThaiBuddhistCalendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.Boolean IsLeapYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod701), "MISCELLANEOUS", "System.Globalization.ThaiBuddhistCalendar.IsLeapYear(Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsLeapMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod702), "MISCELLANEOUS", "System.Globalization.ThaiBuddhistCalendar.IsLeapMonth(Int32, Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsLeapDay(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = day;
			paramObjs[4] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod703), "MISCELLANEOUS", "System.Globalization.ThaiBuddhistCalendar.IsLeapDay(Int32, Int32, Int32, Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 GetYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod704), "MISCELLANEOUS", "System.Globalization.ThaiBuddhistCalendar.GetYear(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetMonthsInYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod705), "MISCELLANEOUS", "System.Globalization.ThaiBuddhistCalendar.GetMonthsInYear(Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod706), "MISCELLANEOUS", "System.Globalization.ThaiBuddhistCalendar.GetMonth(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32[] get_Eras(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod707), "MISCELLANEOUS", "System.Globalization.ThaiBuddhistCalendar.get_Eras()", paramObjs, typeof(System.Int32[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32[])retValue;
		}

		public static System.Int32 GetEra(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod708), "MISCELLANEOUS", "System.Globalization.ThaiBuddhistCalendar.GetEra(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDaysInYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod709), "MISCELLANEOUS", "System.Globalization.ThaiBuddhistCalendar.GetDaysInYear(Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDaysInMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 year, System.Int32 month, System.Int32 era)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = year;
			paramObjs[2] = month;
			paramObjs[3] = era;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod710), "MISCELLANEOUS", "System.Globalization.ThaiBuddhistCalendar.GetDaysInMonth(Int32, Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 GetDayOfYear(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod711), "MISCELLANEOUS", "System.Globalization.ThaiBuddhistCalendar.GetDayOfYear(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DayOfWeek GetDayOfWeek(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod712), "MISCELLANEOUS", "System.Globalization.ThaiBuddhistCalendar.GetDayOfWeek(DateTime)", paramObjs, typeof(System.DayOfWeek), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DayOfWeek)retValue;
		}

		public static System.Int32 GetDayOfMonth(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod713), "MISCELLANEOUS", "System.Globalization.ThaiBuddhistCalendar.GetDayOfMonth(DateTime)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.DateTime AddYears(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 years)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = years;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod714), "MISCELLANEOUS", "System.Globalization.ThaiBuddhistCalendar.AddYears(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime AddMonths(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime time, System.Int32 months)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = time;
			paramObjs[2] = months;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod715), "MISCELLANEOUS", "System.Globalization.ThaiBuddhistCalendar.AddMonths(DateTime, Int32)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod716), "MISCELLANEOUS", "System.Globalization.ThaiBuddhistCalendar.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Globalization.NumberFormatInfo")]
	public class HandlerClass55
	{
		// System.Globalization.NumberFormatInfo.GetFormat
		private static bool CallerMethod717(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.Clone
		private static bool CallerMethod718(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_CurrencyDecimalDigits
		private static bool CallerMethod719(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_CurrencyDecimalDigits
		private static bool CallerMethod720(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_CurrencyDecimalSeparator
		private static bool CallerMethod721(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_CurrencyDecimalSeparator
		private static bool CallerMethod722(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_IsReadOnly
		private static bool CallerMethod723(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_CurrencyGroupSizes
		private static bool CallerMethod724(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_CurrencyGroupSizes
		private static bool CallerMethod725(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_NumberGroupSizes
		private static bool CallerMethod726(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_NumberGroupSizes
		private static bool CallerMethod727(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_PercentGroupSizes
		private static bool CallerMethod728(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_PercentGroupSizes
		private static bool CallerMethod729(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_CurrencyGroupSeparator
		private static bool CallerMethod730(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_CurrencyGroupSeparator
		private static bool CallerMethod731(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_CurrencySymbol
		private static bool CallerMethod732(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_CurrencySymbol
		private static bool CallerMethod733(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_NaNSymbol
		private static bool CallerMethod734(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_NaNSymbol
		private static bool CallerMethod735(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_CurrencyNegativePattern
		private static bool CallerMethod736(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_CurrencyNegativePattern
		private static bool CallerMethod737(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_NumberNegativePattern
		private static bool CallerMethod738(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_NumberNegativePattern
		private static bool CallerMethod739(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_PercentPositivePattern
		private static bool CallerMethod740(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_PercentPositivePattern
		private static bool CallerMethod741(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_PercentNegativePattern
		private static bool CallerMethod742(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_PercentNegativePattern
		private static bool CallerMethod743(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_NegativeInfinitySymbol
		private static bool CallerMethod744(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_NegativeInfinitySymbol
		private static bool CallerMethod745(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_NegativeSign
		private static bool CallerMethod746(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_NegativeSign
		private static bool CallerMethod747(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_NumberDecimalDigits
		private static bool CallerMethod748(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_NumberDecimalDigits
		private static bool CallerMethod749(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_NumberDecimalSeparator
		private static bool CallerMethod750(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_NumberDecimalSeparator
		private static bool CallerMethod751(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_NumberGroupSeparator
		private static bool CallerMethod752(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_NumberGroupSeparator
		private static bool CallerMethod753(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_CurrencyPositivePattern
		private static bool CallerMethod754(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_CurrencyPositivePattern
		private static bool CallerMethod755(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_PositiveInfinitySymbol
		private static bool CallerMethod756(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_PositiveInfinitySymbol
		private static bool CallerMethod757(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_PositiveSign
		private static bool CallerMethod758(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_PositiveSign
		private static bool CallerMethod759(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_PercentDecimalDigits
		private static bool CallerMethod760(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_PercentDecimalDigits
		private static bool CallerMethod761(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_PercentDecimalSeparator
		private static bool CallerMethod762(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_PercentDecimalSeparator
		private static bool CallerMethod763(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_PercentGroupSeparator
		private static bool CallerMethod764(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_PercentGroupSeparator
		private static bool CallerMethod765(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_PercentSymbol
		private static bool CallerMethod766(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_PercentSymbol
		private static bool CallerMethod767(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_PerMilleSymbol
		private static bool CallerMethod768(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.set_PerMilleSymbol
		private static bool CallerMethod769(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_InvariantInfo
		private static bool CallerMethod770(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.GetInstance
		private static bool CallerMethod771(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.get_CurrentInfo
		private static bool CallerMethod772(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo.ReadOnly
		private static bool CallerMethod773(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Globalization.NumberFormatInfo..ctor
		private static bool CallerMethod774(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object GetFormat(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type formatType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = formatType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod717), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.GetFormat(Type)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object Clone(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod718), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.Clone()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Int32 get_CurrencyDecimalDigits(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod719), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_CurrencyDecimalDigits()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_CurrencyDecimalDigits(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod720), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_CurrencyDecimalDigits(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_CurrencyDecimalSeparator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod721), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_CurrencyDecimalSeparator()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_CurrencyDecimalSeparator(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod722), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_CurrencyDecimalSeparator(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_IsReadOnly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod723), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_IsReadOnly()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32[] get_CurrencyGroupSizes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod724), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_CurrencyGroupSizes()", paramObjs, typeof(System.Int32[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32[])retValue;
		}

		public static void set_CurrencyGroupSizes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod725), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_CurrencyGroupSizes(Int32[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32[] get_NumberGroupSizes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod726), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_NumberGroupSizes()", paramObjs, typeof(System.Int32[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32[])retValue;
		}

		public static void set_NumberGroupSizes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod727), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_NumberGroupSizes(Int32[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32[] get_PercentGroupSizes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod728), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_PercentGroupSizes()", paramObjs, typeof(System.Int32[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32[])retValue;
		}

		public static void set_PercentGroupSizes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod729), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_PercentGroupSizes(Int32[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_CurrencyGroupSeparator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod730), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_CurrencyGroupSeparator()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_CurrencyGroupSeparator(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod731), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_CurrencyGroupSeparator(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_CurrencySymbol(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod732), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_CurrencySymbol()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_CurrencySymbol(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod733), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_CurrencySymbol(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_NaNSymbol(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod734), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_NaNSymbol()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_NaNSymbol(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod735), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_NaNSymbol(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_CurrencyNegativePattern(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod736), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_CurrencyNegativePattern()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_CurrencyNegativePattern(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod737), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_CurrencyNegativePattern(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_NumberNegativePattern(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod738), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_NumberNegativePattern()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_NumberNegativePattern(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod739), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_NumberNegativePattern(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_PercentPositivePattern(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod740), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_PercentPositivePattern()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_PercentPositivePattern(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod741), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_PercentPositivePattern(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_PercentNegativePattern(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod742), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_PercentNegativePattern()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_PercentNegativePattern(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod743), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_PercentNegativePattern(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_NegativeInfinitySymbol(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod744), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_NegativeInfinitySymbol()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_NegativeInfinitySymbol(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod745), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_NegativeInfinitySymbol(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_NegativeSign(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod746), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_NegativeSign()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_NegativeSign(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod747), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_NegativeSign(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_NumberDecimalDigits(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod748), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_NumberDecimalDigits()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_NumberDecimalDigits(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod749), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_NumberDecimalDigits(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_NumberDecimalSeparator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod750), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_NumberDecimalSeparator()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_NumberDecimalSeparator(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod751), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_NumberDecimalSeparator(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_NumberGroupSeparator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod752), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_NumberGroupSeparator()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_NumberGroupSeparator(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod753), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_NumberGroupSeparator(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_CurrencyPositivePattern(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod754), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_CurrencyPositivePattern()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_CurrencyPositivePattern(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod755), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_CurrencyPositivePattern(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_PositiveInfinitySymbol(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod756), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_PositiveInfinitySymbol()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_PositiveInfinitySymbol(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod757), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_PositiveInfinitySymbol(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_PositiveSign(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod758), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_PositiveSign()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_PositiveSign(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod759), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_PositiveSign(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_PercentDecimalDigits(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod760), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_PercentDecimalDigits()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_PercentDecimalDigits(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod761), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_PercentDecimalDigits(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_PercentDecimalSeparator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod762), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_PercentDecimalSeparator()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_PercentDecimalSeparator(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod763), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_PercentDecimalSeparator(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_PercentGroupSeparator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod764), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_PercentGroupSeparator()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_PercentGroupSeparator(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod765), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_PercentGroupSeparator(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_PercentSymbol(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod766), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_PercentSymbol()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_PercentSymbol(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod767), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_PercentSymbol(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_PerMilleSymbol(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod768), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_PerMilleSymbol()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_PerMilleSymbol(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod769), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.set_PerMilleSymbol(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Globalization.NumberFormatInfo get_InvariantInfo(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod770), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_InvariantInfo()", paramObjs, typeof(System.Globalization.NumberFormatInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.NumberFormatInfo)retValue;
		}

		public static System.Globalization.NumberFormatInfo GetInstance(HeatDotNet.MethodInterceptInfo methodIntercept, System.IFormatProvider formatProvider)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = formatProvider;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod771), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.GetInstance(IFormatProvider)", paramObjs, typeof(System.Globalization.NumberFormatInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.NumberFormatInfo)retValue;
		}

		public static System.Globalization.NumberFormatInfo get_CurrentInfo(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod772), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.get_CurrentInfo()", paramObjs, typeof(System.Globalization.NumberFormatInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.NumberFormatInfo)retValue;
		}

		public static System.Globalization.NumberFormatInfo ReadOnly(HeatDotNet.MethodInterceptInfo methodIntercept, System.Globalization.NumberFormatInfo nfi)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = nfi;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod773), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.ReadOnly(NumberFormatInfo)", paramObjs, typeof(System.Globalization.NumberFormatInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Globalization.NumberFormatInfo)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod774), "MISCELLANEOUS", "System.Globalization.NumberFormatInfo.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Resources.NeutralResourcesLanguageAttribute")]
	public class HandlerClass56
	{
		// System.Resources.NeutralResourcesLanguageAttribute.get_CultureName
		private static bool CallerMethod775(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.NeutralResourcesLanguageAttribute..ctor
		private static bool CallerMethod776(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_CultureName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod775), "LIBRARY", "System.Resources.NeutralResourcesLanguageAttribute.get_CultureName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String cultureName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = cultureName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod776), "LIBRARY", "System.Resources.NeutralResourcesLanguageAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Resources.ResourceManager")]
	public class HandlerClass57
	{
		// System.Resources.ResourceManager.GetObject
		private static bool CallerMethod777(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceManager.GetObject
		private static bool CallerMethod778(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceManager.GetString
		private static bool CallerMethod779(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceManager.GetString
		private static bool CallerMethod780(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceManager.GetResourceSet
		private static bool CallerMethod781(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceManager.ReleaseAllResources
		private static bool CallerMethod782(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceManager.get_ResourceSetType
		private static bool CallerMethod783(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceManager.set_IgnoreCase
		private static bool CallerMethod784(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceManager.get_IgnoreCase
		private static bool CallerMethod785(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceManager.get_BaseName
		private static bool CallerMethod786(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceManager.CreateFileBasedResourceManager
		private static bool CallerMethod787(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceManager..ctor
		private static bool CallerMethod788(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceManager..ctor
		private static bool CallerMethod789(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceManager..ctor
		private static bool CallerMethod790(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object GetObject(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Globalization.CultureInfo culture)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = culture;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod777), "LIBRARY", "System.Resources.ResourceManager.GetObject(String, CultureInfo)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object GetObject(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod778), "LIBRARY", "System.Resources.ResourceManager.GetObject(String)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.String GetString(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Globalization.CultureInfo culture)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = culture;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod779), "LIBRARY", "System.Resources.ResourceManager.GetString(String, CultureInfo)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetString(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod780), "LIBRARY", "System.Resources.ResourceManager.GetString(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Resources.ResourceSet GetResourceSet(HeatDotNet.MethodInterceptInfo methodIntercept, System.Globalization.CultureInfo culture, System.Boolean createIfNotExists, System.Boolean tryParents)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = culture;
			paramObjs[2] = createIfNotExists;
			paramObjs[3] = tryParents;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod781), "LIBRARY", "System.Resources.ResourceManager.GetResourceSet(CultureInfo, Boolean, Boolean)", paramObjs, typeof(System.Resources.ResourceSet), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Resources.ResourceSet)retValue;
		}

		public static void ReleaseAllResources(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod782), "LIBRARY", "System.Resources.ResourceManager.ReleaseAllResources()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Type get_ResourceSetType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod783), "LIBRARY", "System.Resources.ResourceManager.get_ResourceSetType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static void set_IgnoreCase(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod784), "LIBRARY", "System.Resources.ResourceManager.set_IgnoreCase(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_IgnoreCase(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod785), "LIBRARY", "System.Resources.ResourceManager.get_IgnoreCase()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_BaseName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod786), "LIBRARY", "System.Resources.ResourceManager.get_BaseName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Resources.ResourceManager CreateFileBasedResourceManager(HeatDotNet.MethodInterceptInfo methodIntercept, System.String baseName, System.String resourceDir, System.Type usingResourceSet)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = baseName;
			paramObjs[2] = resourceDir;
			paramObjs[3] = usingResourceSet;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod787), "LIBRARY", "System.Resources.ResourceManager.CreateFileBasedResourceManager(String, String, Type)", paramObjs, typeof(System.Resources.ResourceManager), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Resources.ResourceManager)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String baseName, System.Reflection.Assembly assembly)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = baseName;
			paramObjs[2] = assembly;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod788), "LIBRARY", "System.Resources.ResourceManager.ctor(String, Assembly)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String baseName, System.Reflection.Assembly assembly, System.Type usingResourceSet)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = baseName;
			paramObjs[2] = assembly;
			paramObjs[3] = usingResourceSet;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod789), "LIBRARY", "System.Resources.ResourceManager.ctor(String, Assembly, Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Type resourceSource)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = resourceSource;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod790), "LIBRARY", "System.Resources.ResourceManager.ctor(Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Resources.ResourceReader")]
	public class HandlerClass58
	{
		// System.Resources.ResourceReader.GetEnumerator
		private static bool CallerMethod791(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceReader.Close
		private static bool CallerMethod792(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceReader..ctor
		private static bool CallerMethod793(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceReader..ctor
		private static bool CallerMethod794(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Collections.IDictionaryEnumerator GetEnumerator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod791), "LIBRARY", "System.Resources.ResourceReader.GetEnumerator()", paramObjs, typeof(System.Collections.IDictionaryEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IDictionaryEnumerator)retValue;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod792), "LIBRARY", "System.Resources.ResourceReader.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String fileName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = fileName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod793), "LIBRARY", "System.Resources.ResourceReader.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream stream)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = stream;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod794), "LIBRARY", "System.Resources.ResourceReader.ctor(Stream)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Resources.ResourceSet")]
	public class HandlerClass59
	{
		// System.Resources.ResourceSet.Dispose
		private static bool CallerMethod795(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceSet.GetObject
		private static bool CallerMethod796(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceSet.GetObject
		private static bool CallerMethod797(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceSet.GetString
		private static bool CallerMethod798(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceSet.GetString
		private static bool CallerMethod799(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceSet.GetEnumerator
		private static bool CallerMethod800(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceSet.GetDefaultWriter
		private static bool CallerMethod801(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceSet.GetDefaultReader
		private static bool CallerMethod802(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceSet.Close
		private static bool CallerMethod803(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceSet..ctor
		private static bool CallerMethod804(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceSet..ctor
		private static bool CallerMethod805(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceSet..ctor
		private static bool CallerMethod806(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Dispose(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod795), "LIBRARY", "System.Resources.ResourceSet.Dispose()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Object GetObject(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Boolean ignoreCase)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = ignoreCase;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod796), "LIBRARY", "System.Resources.ResourceSet.GetObject(String, Boolean)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object GetObject(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod797), "LIBRARY", "System.Resources.ResourceSet.GetObject(String)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.String GetString(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Boolean ignoreCase)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = ignoreCase;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod798), "LIBRARY", "System.Resources.ResourceSet.GetString(String, Boolean)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetString(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod799), "LIBRARY", "System.Resources.ResourceSet.GetString(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Collections.IDictionaryEnumerator GetEnumerator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod800), "LIBRARY", "System.Resources.ResourceSet.GetEnumerator()", paramObjs, typeof(System.Collections.IDictionaryEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IDictionaryEnumerator)retValue;
		}

		public static System.Type GetDefaultWriter(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod801), "LIBRARY", "System.Resources.ResourceSet.GetDefaultWriter()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Type GetDefaultReader(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod802), "LIBRARY", "System.Resources.ResourceSet.GetDefaultReader()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod803), "LIBRARY", "System.Resources.ResourceSet.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String fileName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = fileName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod804), "LIBRARY", "System.Resources.ResourceSet.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream stream)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = stream;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod805), "LIBRARY", "System.Resources.ResourceSet.ctor(Stream)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Resources.IResourceReader reader)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = reader;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod806), "LIBRARY", "System.Resources.ResourceSet.ctor(IResourceReader)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Resources.ResourceWriter")]
	public class HandlerClass60
	{
		// System.Resources.ResourceWriter.Dispose
		private static bool CallerMethod807(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceWriter.Generate
		private static bool CallerMethod808(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceWriter.Close
		private static bool CallerMethod809(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceWriter.AddResource
		private static bool CallerMethod810(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceWriter.AddResource
		private static bool CallerMethod811(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceWriter.AddResource
		private static bool CallerMethod812(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceWriter..ctor
		private static bool CallerMethod813(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.ResourceWriter..ctor
		private static bool CallerMethod814(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Dispose(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod807), "LIBRARY", "System.Resources.ResourceWriter.Dispose()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Generate(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod808), "LIBRARY", "System.Resources.ResourceWriter.Generate()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod809), "LIBRARY", "System.Resources.ResourceWriter.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddResource(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Byte[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod810), "LIBRARY", "System.Resources.ResourceWriter.AddResource(String, Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddResource(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod811), "LIBRARY", "System.Resources.ResourceWriter.AddResource(String, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddResource(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod812), "LIBRARY", "System.Resources.ResourceWriter.AddResource(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String fileName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = fileName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod813), "LIBRARY", "System.Resources.ResourceWriter.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream stream)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = stream;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod814), "LIBRARY", "System.Resources.ResourceWriter.ctor(Stream)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Resources.SatelliteContractVersionAttribute")]
	public class HandlerClass61
	{
		// System.Resources.SatelliteContractVersionAttribute.get_Version
		private static bool CallerMethod815(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Resources.SatelliteContractVersionAttribute..ctor
		private static bool CallerMethod816(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_Version(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod815), "LIBRARY", "System.Resources.SatelliteContractVersionAttribute.get_Version()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String version)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = version;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod816), "LIBRARY", "System.Resources.SatelliteContractVersionAttribute.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("Microsoft.Win32.RegistryKey")]
	public class HandlerClass62
	{
		// Microsoft.Win32.RegistryKey.ToString
		private static bool CallerMethod817(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// Microsoft.Win32.RegistryKey.Close
		private static bool CallerMethod818(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// Microsoft.Win32.RegistryKey.Flush
		private static bool CallerMethod819(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// Microsoft.Win32.RegistryKey.CreateSubKey
		private static bool CallerMethod820(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// Microsoft.Win32.RegistryKey.DeleteSubKey
		private static bool CallerMethod821(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// Microsoft.Win32.RegistryKey.DeleteSubKey
		private static bool CallerMethod822(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// Microsoft.Win32.RegistryKey.DeleteSubKeyTree
		private static bool CallerMethod823(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// Microsoft.Win32.RegistryKey.DeleteValue
		private static bool CallerMethod824(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// Microsoft.Win32.RegistryKey.DeleteValue
		private static bool CallerMethod825(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// Microsoft.Win32.RegistryKey.OpenSubKey
		private static bool CallerMethod826(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// Microsoft.Win32.RegistryKey.OpenSubKey
		private static bool CallerMethod827(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// Microsoft.Win32.RegistryKey.get_SubKeyCount
		private static bool CallerMethod828(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// Microsoft.Win32.RegistryKey.GetSubKeyNames
		private static bool CallerMethod829(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// Microsoft.Win32.RegistryKey.get_ValueCount
		private static bool CallerMethod830(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// Microsoft.Win32.RegistryKey.GetValueNames
		private static bool CallerMethod831(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// Microsoft.Win32.RegistryKey.GetValue
		private static bool CallerMethod832(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// Microsoft.Win32.RegistryKey.GetValue
		private static bool CallerMethod833(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// Microsoft.Win32.RegistryKey.get_Name
		private static bool CallerMethod834(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// Microsoft.Win32.RegistryKey.SetValue
		private static bool CallerMethod835(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// Microsoft.Win32.RegistryKey.OpenRemoteBaseKey
		private static bool CallerMethod836(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod817), "REGISTRY", "Microsoft.Win32.RegistryKey.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod818), "REGISTRY", "Microsoft.Win32.RegistryKey.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Flush(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod819), "REGISTRY", "Microsoft.Win32.RegistryKey.Flush()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static Microsoft.Win32.RegistryKey CreateSubKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.String subkey)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = subkey;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod820), "REGISTRY", "Microsoft.Win32.RegistryKey.CreateSubKey(String)", paramObjs, typeof(Microsoft.Win32.RegistryKey), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (Microsoft.Win32.RegistryKey)retValue;
		}

		public static void DeleteSubKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.String subkey)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = subkey;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod821), "REGISTRY", "Microsoft.Win32.RegistryKey.DeleteSubKey(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void DeleteSubKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.String subkey, System.Boolean throwOnMissingSubKey)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = subkey;
			paramObjs[2] = throwOnMissingSubKey;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod822), "REGISTRY", "Microsoft.Win32.RegistryKey.DeleteSubKey(String, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void DeleteSubKeyTree(HeatDotNet.MethodInterceptInfo methodIntercept, System.String subkey)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = subkey;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod823), "REGISTRY", "Microsoft.Win32.RegistryKey.DeleteSubKeyTree(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void DeleteValue(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod824), "REGISTRY", "Microsoft.Win32.RegistryKey.DeleteValue(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void DeleteValue(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Boolean throwOnMissingValue)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = throwOnMissingValue;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod825), "REGISTRY", "Microsoft.Win32.RegistryKey.DeleteValue(String, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static Microsoft.Win32.RegistryKey OpenSubKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Boolean writable)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = writable;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod826), "REGISTRY", "Microsoft.Win32.RegistryKey.OpenSubKey(String, Boolean)", paramObjs, typeof(Microsoft.Win32.RegistryKey), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (Microsoft.Win32.RegistryKey)retValue;
		}

		public static Microsoft.Win32.RegistryKey OpenSubKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod827), "REGISTRY", "Microsoft.Win32.RegistryKey.OpenSubKey(String)", paramObjs, typeof(Microsoft.Win32.RegistryKey), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (Microsoft.Win32.RegistryKey)retValue;
		}

		public static System.Int32 get_SubKeyCount(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod828), "REGISTRY", "Microsoft.Win32.RegistryKey.get_SubKeyCount()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String[] GetSubKeyNames(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod829), "REGISTRY", "Microsoft.Win32.RegistryKey.GetSubKeyNames()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.Int32 get_ValueCount(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod830), "REGISTRY", "Microsoft.Win32.RegistryKey.get_ValueCount()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String[] GetValueNames(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod831), "REGISTRY", "Microsoft.Win32.RegistryKey.GetValueNames()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.Object GetValue(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Object defaultValue)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = defaultValue;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod832), "REGISTRY", "Microsoft.Win32.RegistryKey.GetValue(String, Object)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object GetValue(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod833), "REGISTRY", "Microsoft.Win32.RegistryKey.GetValue(String)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod834), "REGISTRY", "Microsoft.Win32.RegistryKey.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void SetValue(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod835), "REGISTRY", "Microsoft.Win32.RegistryKey.SetValue(String, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static Microsoft.Win32.RegistryKey OpenRemoteBaseKey(HeatDotNet.MethodInterceptInfo methodIntercept, Microsoft.Win32.RegistryHive hKey, System.String machineName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = hKey;
			paramObjs[2] = machineName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod836), "REGISTRY", "Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(RegistryHive, String)", paramObjs, typeof(Microsoft.Win32.RegistryKey), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (Microsoft.Win32.RegistryKey)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.X509Certificates.X509Certificate")]
	public class HandlerClass63
	{
		// System.Security.Cryptography.X509Certificates.X509Certificate.ToString
		private static bool CallerMethod837(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate.Equals
		private static bool CallerMethod838(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate.GetExpirationDateString
		private static bool CallerMethod839(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate.GetEffectiveDateString
		private static bool CallerMethod840(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHashString
		private static bool CallerMethod841(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash
		private static bool CallerMethod842(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertDataString
		private static bool CallerMethod843(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertData
		private static bool CallerMethod844(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKeyString
		private static bool CallerMethod845(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey
		private static bool CallerMethod846(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString
		private static bool CallerMethod847(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters
		private static bool CallerMethod848(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm
		private static bool CallerMethod849(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumberString
		private static bool CallerMethod850(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber
		private static bool CallerMethod851(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate.GetIssuerName
		private static bool CallerMethod852(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat
		private static bool CallerMethod853(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate.GetName
		private static bool CallerMethod854(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode
		private static bool CallerMethod855(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate.ToString
		private static bool CallerMethod856(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromCertFile
		private static bool CallerMethod857(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromSignedFile
		private static bool CallerMethod858(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate..ctor
		private static bool CallerMethod859(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate..ctor
		private static bool CallerMethod860(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.X509Certificates.X509Certificate..ctor
		private static bool CallerMethod861(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean fVerbose)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = fVerbose;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod837), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.ToString(Boolean)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.X509Certificates.X509Certificate other)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = other;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod838), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.Equals(X509Certificate)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String GetExpirationDateString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod839), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.GetExpirationDateString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetEffectiveDateString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod840), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.GetEffectiveDateString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetCertHashString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod841), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHashString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Byte[] GetCertHash(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod842), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.String GetRawCertDataString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod843), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertDataString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Byte[] GetRawCertData(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod844), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertData()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.String GetPublicKeyString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod845), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKeyString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Byte[] GetPublicKey(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod846), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.String GetKeyAlgorithmParametersString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod847), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Byte[] GetKeyAlgorithmParameters(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod848), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.String GetKeyAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod849), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetSerialNumberString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod850), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumberString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Byte[] GetSerialNumber(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod851), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.String GetIssuerName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod852), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.GetIssuerName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetFormat(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod853), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod854), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.GetName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod855), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod856), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Security.Cryptography.X509Certificates.X509Certificate CreateFromCertFile(HeatDotNet.MethodInterceptInfo methodIntercept, System.String filename)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = filename;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod857), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromCertFile(String)", paramObjs, typeof(System.Security.Cryptography.X509Certificates.X509Certificate), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.X509Certificates.X509Certificate)retValue;
		}

		public static System.Security.Cryptography.X509Certificates.X509Certificate CreateFromSignedFile(HeatDotNet.MethodInterceptInfo methodIntercept, System.String filename)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = filename;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod858), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromSignedFile(String)", paramObjs, typeof(System.Security.Cryptography.X509Certificates.X509Certificate), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.X509Certificates.X509Certificate)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Byte[] data)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = data;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod859), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.ctor(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IntPtr handle)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = handle;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod860), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.ctor(IntPtr)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Cryptography.X509Certificates.X509Certificate cert)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = cert;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod861), "SECURITY", "System.Security.Cryptography.X509Certificates.X509Certificate.ctor(X509Certificate)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.AsymmetricAlgorithm")]
	public class HandlerClass64
	{
		// System.Security.Cryptography.AsymmetricAlgorithm.get_LegalKeySizes
		private static bool CallerMethod862(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.AsymmetricAlgorithm.set_KeySize
		private static bool CallerMethod863(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.AsymmetricAlgorithm.get_KeySize
		private static bool CallerMethod864(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.AsymmetricAlgorithm.Clear
		private static bool CallerMethod865(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.AsymmetricAlgorithm.Create
		private static bool CallerMethod866(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.AsymmetricAlgorithm.Create
		private static bool CallerMethod867(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Security.Cryptography.KeySizes[] get_LegalKeySizes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod862), "SECURITY", "System.Security.Cryptography.AsymmetricAlgorithm.get_LegalKeySizes()", paramObjs, typeof(System.Security.Cryptography.KeySizes[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.KeySizes[])retValue;
		}

		public static void set_KeySize(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod863), "SECURITY", "System.Security.Cryptography.AsymmetricAlgorithm.set_KeySize(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_KeySize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod864), "SECURITY", "System.Security.Cryptography.AsymmetricAlgorithm.get_KeySize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Clear(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod865), "SECURITY", "System.Security.Cryptography.AsymmetricAlgorithm.Clear()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Security.Cryptography.AsymmetricAlgorithm Create(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod866), "SECURITY", "System.Security.Cryptography.AsymmetricAlgorithm.Create()", paramObjs, typeof(System.Security.Cryptography.AsymmetricAlgorithm), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.AsymmetricAlgorithm)retValue;
		}

		public static System.Security.Cryptography.AsymmetricAlgorithm Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.String algName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = algName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod867), "SECURITY", "System.Security.Cryptography.AsymmetricAlgorithm.Create(String)", paramObjs, typeof(System.Security.Cryptography.AsymmetricAlgorithm), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.AsymmetricAlgorithm)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.AsymmetricKeyExchangeDeformatter")]
	public class HandlerClass65
	{
		// System.Security.Cryptography.AsymmetricKeyExchangeDeformatter..ctor
		private static bool CallerMethod868(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod868), "SECURITY", "System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.AsymmetricKeyExchangeFormatter")]
	public class HandlerClass66
	{
		// System.Security.Cryptography.AsymmetricKeyExchangeFormatter..ctor
		private static bool CallerMethod869(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod869), "SECURITY", "System.Security.Cryptography.AsymmetricKeyExchangeFormatter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.AsymmetricSignatureDeformatter")]
	public class HandlerClass67
	{
		// System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature
		private static bool CallerMethod870(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.AsymmetricSignatureDeformatter..ctor
		private static bool CallerMethod871(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean VerifySignature(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.HashAlgorithm hash, System.Byte[] rgbSignature)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = hash;
			paramObjs[2] = rgbSignature;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod870), "SECURITY", "System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(HashAlgorithm, Byte[])", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod871), "SECURITY", "System.Security.Cryptography.AsymmetricSignatureDeformatter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.AsymmetricSignatureFormatter")]
	public class HandlerClass68
	{
		// System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature
		private static bool CallerMethod872(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.AsymmetricSignatureFormatter..ctor
		private static bool CallerMethod873(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Byte[] CreateSignature(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.HashAlgorithm hash)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = hash;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod872), "SECURITY", "System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(HashAlgorithm)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod873), "SECURITY", "System.Security.Cryptography.AsymmetricSignatureFormatter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.ToBase64Transform")]
	public class HandlerClass69
	{
		// System.Security.Cryptography.ToBase64Transform.TransformFinalBlock
		private static bool CallerMethod874(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.ToBase64Transform.TransformBlock
		private static bool CallerMethod875(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.ToBase64Transform.get_CanReuseTransform
		private static bool CallerMethod876(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.ToBase64Transform.get_CanTransformMultipleBlocks
		private static bool CallerMethod877(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.ToBase64Transform.get_OutputBlockSize
		private static bool CallerMethod878(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.ToBase64Transform.get_InputBlockSize
		private static bool CallerMethod879(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.ToBase64Transform.Clear
		private static bool CallerMethod880(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.ToBase64Transform..ctor
		private static bool CallerMethod881(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Byte[] TransformFinalBlock(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inputBuffer;
			paramObjs[2] = inputOffset;
			paramObjs[3] = inputCount;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod874), "SECURITY", "System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(Byte[], Int32, Int32)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Int32 TransformBlock(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount, System.Byte[] outputBuffer, System.Int32 outputOffset)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inputBuffer;
			paramObjs[2] = inputOffset;
			paramObjs[3] = inputCount;
			paramObjs[4] = outputBuffer;
			paramObjs[5] = outputOffset;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod875), "SECURITY", "System.Security.Cryptography.ToBase64Transform.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean get_CanReuseTransform(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod876), "SECURITY", "System.Security.Cryptography.ToBase64Transform.get_CanReuseTransform()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_CanTransformMultipleBlocks(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod877), "SECURITY", "System.Security.Cryptography.ToBase64Transform.get_CanTransformMultipleBlocks()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 get_OutputBlockSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod878), "SECURITY", "System.Security.Cryptography.ToBase64Transform.get_OutputBlockSize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_InputBlockSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod879), "SECURITY", "System.Security.Cryptography.ToBase64Transform.get_InputBlockSize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Clear(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod880), "SECURITY", "System.Security.Cryptography.ToBase64Transform.Clear()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod881), "SECURITY", "System.Security.Cryptography.ToBase64Transform.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.FromBase64Transform")]
	public class HandlerClass70
	{
		// System.Security.Cryptography.FromBase64Transform.TransformFinalBlock
		private static bool CallerMethod882(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.FromBase64Transform.TransformBlock
		private static bool CallerMethod883(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.FromBase64Transform.get_CanReuseTransform
		private static bool CallerMethod884(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.FromBase64Transform.get_CanTransformMultipleBlocks
		private static bool CallerMethod885(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.FromBase64Transform.get_OutputBlockSize
		private static bool CallerMethod886(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.FromBase64Transform.get_InputBlockSize
		private static bool CallerMethod887(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.FromBase64Transform.Clear
		private static bool CallerMethod888(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.FromBase64Transform..ctor
		private static bool CallerMethod889(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.FromBase64Transform..ctor
		private static bool CallerMethod890(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Byte[] TransformFinalBlock(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inputBuffer;
			paramObjs[2] = inputOffset;
			paramObjs[3] = inputCount;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod882), "SECURITY", "System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(Byte[], Int32, Int32)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Int32 TransformBlock(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount, System.Byte[] outputBuffer, System.Int32 outputOffset)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inputBuffer;
			paramObjs[2] = inputOffset;
			paramObjs[3] = inputCount;
			paramObjs[4] = outputBuffer;
			paramObjs[5] = outputOffset;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod883), "SECURITY", "System.Security.Cryptography.FromBase64Transform.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean get_CanReuseTransform(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod884), "SECURITY", "System.Security.Cryptography.FromBase64Transform.get_CanReuseTransform()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_CanTransformMultipleBlocks(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod885), "SECURITY", "System.Security.Cryptography.FromBase64Transform.get_CanTransformMultipleBlocks()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 get_OutputBlockSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod886), "SECURITY", "System.Security.Cryptography.FromBase64Transform.get_OutputBlockSize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_InputBlockSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod887), "SECURITY", "System.Security.Cryptography.FromBase64Transform.get_InputBlockSize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Clear(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod888), "SECURITY", "System.Security.Cryptography.FromBase64Transform.Clear()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod889), "SECURITY", "System.Security.Cryptography.FromBase64Transform.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Cryptography.FromBase64TransformMode whitespaces)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = whitespaces;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod890), "SECURITY", "System.Security.Cryptography.FromBase64Transform.ctor(FromBase64TransformMode)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.KeySizes")]
	public class HandlerClass71
	{
		// System.Security.Cryptography.KeySizes.get_MinSize
		private static bool CallerMethod891(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.KeySizes.get_MaxSize
		private static bool CallerMethod892(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.KeySizes.get_SkipSize
		private static bool CallerMethod893(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.KeySizes..ctor
		private static bool CallerMethod894(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 get_MinSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod891), "SECURITY", "System.Security.Cryptography.KeySizes.get_MinSize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_MaxSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod892), "SECURITY", "System.Security.Cryptography.KeySizes.get_MaxSize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_SkipSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod893), "SECURITY", "System.Security.Cryptography.KeySizes.get_SkipSize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int32 minSize, System.Int32 maxSize, System.Int32 skipSize)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = minSize;
			paramObjs[2] = maxSize;
			paramObjs[3] = skipSize;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod894), "SECURITY", "System.Security.Cryptography.KeySizes.ctor(Int32, Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.CryptoAPITransform")]
	public class HandlerClass72
	{
		// System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock
		private static bool CallerMethod895(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoAPITransform.TransformBlock
		private static bool CallerMethod896(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoAPITransform.get_CanReuseTransform
		private static bool CallerMethod897(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoAPITransform.get_CanTransformMultipleBlocks
		private static bool CallerMethod898(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoAPITransform.get_OutputBlockSize
		private static bool CallerMethod899(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoAPITransform.get_InputBlockSize
		private static bool CallerMethod900(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoAPITransform.Clear
		private static bool CallerMethod901(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoAPITransform.get_KeyHandle
		private static bool CallerMethod902(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Byte[] TransformFinalBlock(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inputBuffer;
			paramObjs[2] = inputOffset;
			paramObjs[3] = inputCount;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod895), "SECURITY", "System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(Byte[], Int32, Int32)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Int32 TransformBlock(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount, System.Byte[] outputBuffer, System.Int32 outputOffset)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inputBuffer;
			paramObjs[2] = inputOffset;
			paramObjs[3] = inputCount;
			paramObjs[4] = outputBuffer;
			paramObjs[5] = outputOffset;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod896), "SECURITY", "System.Security.Cryptography.CryptoAPITransform.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean get_CanReuseTransform(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod897), "SECURITY", "System.Security.Cryptography.CryptoAPITransform.get_CanReuseTransform()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_CanTransformMultipleBlocks(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod898), "SECURITY", "System.Security.Cryptography.CryptoAPITransform.get_CanTransformMultipleBlocks()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 get_OutputBlockSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod899), "SECURITY", "System.Security.Cryptography.CryptoAPITransform.get_OutputBlockSize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_InputBlockSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod900), "SECURITY", "System.Security.Cryptography.CryptoAPITransform.get_InputBlockSize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Clear(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod901), "SECURITY", "System.Security.Cryptography.CryptoAPITransform.Clear()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IntPtr get_KeyHandle(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod902), "SECURITY", "System.Security.Cryptography.CryptoAPITransform.get_KeyHandle()", paramObjs, typeof(System.IntPtr), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IntPtr)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.CspParameters")]
	public class HandlerClass73
	{
		// System.Security.Cryptography.CspParameters.get_Flags
		private static bool CallerMethod903(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CspParameters.set_Flags
		private static bool CallerMethod904(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CspParameters..ctor
		private static bool CallerMethod905(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CspParameters..ctor
		private static bool CallerMethod906(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CspParameters..ctor
		private static bool CallerMethod907(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CspParameters..ctor
		private static bool CallerMethod908(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Security.Cryptography.CspProviderFlags get_Flags(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod903), "SECURITY", "System.Security.Cryptography.CspParameters.get_Flags()", paramObjs, typeof(System.Security.Cryptography.CspProviderFlags), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.CspProviderFlags)retValue;
		}

		public static void set_Flags(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.CspProviderFlags value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod904), "SECURITY", "System.Security.Cryptography.CspParameters.set_Flags(CspProviderFlags)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod905), "SECURITY", "System.Security.Cryptography.CspParameters.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int32 dwTypeIn)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = dwTypeIn;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod906), "SECURITY", "System.Security.Cryptography.CspParameters.ctor(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int32 dwTypeIn, System.String strProviderNameIn)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = dwTypeIn;
			paramObjs[2] = strProviderNameIn;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod907), "SECURITY", "System.Security.Cryptography.CspParameters.ctor(Int32, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int32 dwTypeIn, System.String strProviderNameIn, System.String strContainerNameIn)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = dwTypeIn;
			paramObjs[2] = strProviderNameIn;
			paramObjs[3] = strContainerNameIn;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod908), "SECURITY", "System.Security.Cryptography.CspParameters.ctor(Int32, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.CryptoConfig")]
	public class HandlerClass74
	{
		// System.Security.Cryptography.CryptoConfig.CreateFromName
		private static bool CallerMethod909(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoConfig.CreateFromName
		private static bool CallerMethod910(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoConfig.MapNameToOID
		private static bool CallerMethod911(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoConfig.EncodeOID
		private static bool CallerMethod912(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoConfig..ctor
		private static bool CallerMethod913(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object CreateFromName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Object[] args)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = args;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod909), "SECURITY", "System.Security.Cryptography.CryptoConfig.CreateFromName(String, Object[])", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object CreateFromName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod910), "SECURITY", "System.Security.Cryptography.CryptoConfig.CreateFromName(String)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.String MapNameToOID(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod911), "SECURITY", "System.Security.Cryptography.CryptoConfig.MapNameToOID(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Byte[] EncodeOID(HeatDotNet.MethodInterceptInfo methodIntercept, System.String str)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = str;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod912), "SECURITY", "System.Security.Cryptography.CryptoConfig.EncodeOID(String)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod913), "SECURITY", "System.Security.Cryptography.CryptoConfig.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.Stream")]
	public class HandlerClass75
	{
		// System.IO.Stream.WriteByte
		private static bool CallerMethod914(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Stream.ReadByte
		private static bool CallerMethod915(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Stream.EndWrite
		private static bool CallerMethod916(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Stream.BeginWrite
		private static bool CallerMethod917(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Stream.EndRead
		private static bool CallerMethod918(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Stream.BeginRead
		private static bool CallerMethod919(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Stream.Close
		private static bool CallerMethod920(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void WriteByte(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod914), "FILE", "System.IO.Stream.WriteByte(Byte)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 ReadByte(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod915), "FILE", "System.IO.Stream.ReadByte()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void EndWrite(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod916), "FILE", "System.IO.Stream.EndWrite(IAsyncResult)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IAsyncResult BeginWrite(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = count;
			paramObjs[4] = callback;
			paramObjs[5] = state;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod917), "FILE", "System.IO.Stream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static System.Int32 EndRead(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod918), "FILE", "System.IO.Stream.EndRead(IAsyncResult)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.IAsyncResult BeginRead(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = count;
			paramObjs[4] = callback;
			paramObjs[5] = state;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod919), "FILE", "System.IO.Stream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod920), "FILE", "System.IO.Stream.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.CryptoStream")]
	public class HandlerClass76
	{
		// System.Security.Cryptography.CryptoStream.Write
		private static bool CallerMethod921(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoStream.Read
		private static bool CallerMethod922(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoStream.SetLength
		private static bool CallerMethod923(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoStream.Seek
		private static bool CallerMethod924(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoStream.Flush
		private static bool CallerMethod925(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoStream.Close
		private static bool CallerMethod926(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoStream.set_Position
		private static bool CallerMethod927(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoStream.get_Position
		private static bool CallerMethod928(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoStream.get_Length
		private static bool CallerMethod929(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoStream.get_CanWrite
		private static bool CallerMethod930(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoStream.get_CanSeek
		private static bool CallerMethod931(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoStream.get_CanRead
		private static bool CallerMethod932(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoStream.FlushFinalBlock
		private static bool CallerMethod933(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoStream.Clear
		private static bool CallerMethod934(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.CryptoStream..ctor
		private static bool CallerMethod935(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod921), "SECURITY", "System.Security.Cryptography.CryptoStream.Write(Byte[], Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 Read(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod922), "SECURITY", "System.Security.Cryptography.CryptoStream.Read(Byte[], Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void SetLength(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod923), "SECURITY", "System.Security.Cryptography.CryptoStream.SetLength(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int64 Seek(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 offset, System.IO.SeekOrigin origin)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = offset;
			paramObjs[2] = origin;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod924), "SECURITY", "System.Security.Cryptography.CryptoStream.Seek(Int64, SeekOrigin)", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static void Flush(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod925), "SECURITY", "System.Security.Cryptography.CryptoStream.Flush()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod926), "SECURITY", "System.Security.Cryptography.CryptoStream.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_Position(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod927), "SECURITY", "System.Security.Cryptography.CryptoStream.set_Position(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int64 get_Position(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod928), "SECURITY", "System.Security.Cryptography.CryptoStream.get_Position()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.Int64 get_Length(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod929), "SECURITY", "System.Security.Cryptography.CryptoStream.get_Length()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.Boolean get_CanWrite(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod930), "SECURITY", "System.Security.Cryptography.CryptoStream.get_CanWrite()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_CanSeek(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod931), "SECURITY", "System.Security.Cryptography.CryptoStream.get_CanSeek()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_CanRead(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod932), "SECURITY", "System.Security.Cryptography.CryptoStream.get_CanRead()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void FlushFinalBlock(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod933), "SECURITY", "System.Security.Cryptography.CryptoStream.FlushFinalBlock()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Clear(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod934), "SECURITY", "System.Security.Cryptography.CryptoStream.Clear()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = stream;
			paramObjs[2] = transform;
			paramObjs[3] = mode;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod935), "SECURITY", "System.Security.Cryptography.CryptoStream.ctor(Stream, ICryptoTransform, CryptoStreamMode)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.SymmetricAlgorithm")]
	public class HandlerClass77
	{
		// System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
		private static bool CallerMethod936(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
		private static bool CallerMethod937(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm.set_Padding
		private static bool CallerMethod938(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm.get_Padding
		private static bool CallerMethod939(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm.set_Mode
		private static bool CallerMethod940(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm.get_Mode
		private static bool CallerMethod941(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm.set_KeySize
		private static bool CallerMethod942(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm.get_KeySize
		private static bool CallerMethod943(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm.get_LegalKeySizes
		private static bool CallerMethod944(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm.get_LegalBlockSizes
		private static bool CallerMethod945(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm.set_Key
		private static bool CallerMethod946(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm.get_Key
		private static bool CallerMethod947(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm.set_IV
		private static bool CallerMethod948(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm.get_IV
		private static bool CallerMethod949(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm.set_FeedbackSize
		private static bool CallerMethod950(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm.get_FeedbackSize
		private static bool CallerMethod951(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm.set_BlockSize
		private static bool CallerMethod952(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm.get_BlockSize
		private static bool CallerMethod953(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm.Clear
		private static bool CallerMethod954(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize
		private static bool CallerMethod955(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm.Create
		private static bool CallerMethod956(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm.Create
		private static bool CallerMethod957(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SymmetricAlgorithm..ctor
		private static bool CallerMethod958(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Security.Cryptography.ICryptoTransform CreateDecryptor(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod936), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor()", paramObjs, typeof(System.Security.Cryptography.ICryptoTransform), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.ICryptoTransform)retValue;
		}

		public static System.Security.Cryptography.ICryptoTransform CreateEncryptor(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod937), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor()", paramObjs, typeof(System.Security.Cryptography.ICryptoTransform), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.ICryptoTransform)retValue;
		}

		public static void set_Padding(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.PaddingMode value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod938), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.set_Padding(PaddingMode)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Security.Cryptography.PaddingMode get_Padding(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod939), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.get_Padding()", paramObjs, typeof(System.Security.Cryptography.PaddingMode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.PaddingMode)retValue;
		}

		public static void set_Mode(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.CipherMode value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod940), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.set_Mode(CipherMode)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Security.Cryptography.CipherMode get_Mode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod941), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.get_Mode()", paramObjs, typeof(System.Security.Cryptography.CipherMode), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.CipherMode)retValue;
		}

		public static void set_KeySize(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod942), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.set_KeySize(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_KeySize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod943), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.get_KeySize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Security.Cryptography.KeySizes[] get_LegalKeySizes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod944), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.get_LegalKeySizes()", paramObjs, typeof(System.Security.Cryptography.KeySizes[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.KeySizes[])retValue;
		}

		public static System.Security.Cryptography.KeySizes[] get_LegalBlockSizes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod945), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.get_LegalBlockSizes()", paramObjs, typeof(System.Security.Cryptography.KeySizes[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.KeySizes[])retValue;
		}

		public static void set_Key(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod946), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.set_Key(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Byte[] get_Key(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod947), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.get_Key()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void set_IV(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod948), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.set_IV(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Byte[] get_IV(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod949), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.get_IV()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void set_FeedbackSize(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod950), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.set_FeedbackSize(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_FeedbackSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod951), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.get_FeedbackSize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_BlockSize(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod952), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.set_BlockSize(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_BlockSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod953), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.get_BlockSize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Clear(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod954), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.Clear()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean ValidKeySize(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 bitLength)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bitLength;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod955), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(Int32)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Security.Cryptography.SymmetricAlgorithm Create(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod956), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.Create()", paramObjs, typeof(System.Security.Cryptography.SymmetricAlgorithm), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.SymmetricAlgorithm)retValue;
		}

		public static System.Security.Cryptography.SymmetricAlgorithm Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.String algName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = algName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod957), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.Create(String)", paramObjs, typeof(System.Security.Cryptography.SymmetricAlgorithm), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.SymmetricAlgorithm)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod958), "SECURITY", "System.Security.Cryptography.SymmetricAlgorithm.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.DES")]
	public class HandlerClass78
	{
		// System.Security.Cryptography.DES.set_Key
		private static bool CallerMethod959(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DES.get_Key
		private static bool CallerMethod960(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DES.Create
		private static bool CallerMethod961(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DES.Create
		private static bool CallerMethod962(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DES.IsWeakKey
		private static bool CallerMethod963(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DES.IsSemiWeakKey
		private static bool CallerMethod964(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DES..ctor
		private static bool CallerMethod965(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void set_Key(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod959), "SECURITY", "System.Security.Cryptography.DES.set_Key(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Byte[] get_Key(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod960), "SECURITY", "System.Security.Cryptography.DES.get_Key()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Security.Cryptography.DES Create(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod961), "SECURITY", "System.Security.Cryptography.DES.Create()", paramObjs, typeof(System.Security.Cryptography.DES), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.DES)retValue;
		}

		public static System.Security.Cryptography.DES Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.String algName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = algName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod962), "SECURITY", "System.Security.Cryptography.DES.Create(String)", paramObjs, typeof(System.Security.Cryptography.DES), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.DES)retValue;
		}

		public static System.Boolean IsWeakKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbKey)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbKey;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod963), "SECURITY", "System.Security.Cryptography.DES.IsWeakKey(Byte[])", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsSemiWeakKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbKey)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbKey;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod964), "SECURITY", "System.Security.Cryptography.DES.IsSemiWeakKey(Byte[])", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod965), "SECURITY", "System.Security.Cryptography.DES.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.DESCryptoServiceProvider")]
	public class HandlerClass79
	{
		// System.Security.Cryptography.DESCryptoServiceProvider.GenerateIV
		private static bool CallerMethod966(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey
		private static bool CallerMethod967(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DESCryptoServiceProvider.CreateDecryptor
		private static bool CallerMethod968(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DESCryptoServiceProvider.CreateEncryptor
		private static bool CallerMethod969(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DESCryptoServiceProvider..ctor
		private static bool CallerMethod970(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void GenerateIV(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod966), "SECURITY", "System.Security.Cryptography.DESCryptoServiceProvider.GenerateIV()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void GenerateKey(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod967), "SECURITY", "System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Security.Cryptography.ICryptoTransform CreateDecryptor(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbKey, System.Byte[] rgbIV)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbKey;
			paramObjs[2] = rgbIV;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod968), "SECURITY", "System.Security.Cryptography.DESCryptoServiceProvider.CreateDecryptor(Byte[], Byte[])", paramObjs, typeof(System.Security.Cryptography.ICryptoTransform), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.ICryptoTransform)retValue;
		}

		public static System.Security.Cryptography.ICryptoTransform CreateEncryptor(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbKey, System.Byte[] rgbIV)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbKey;
			paramObjs[2] = rgbIV;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod969), "SECURITY", "System.Security.Cryptography.DESCryptoServiceProvider.CreateEncryptor(Byte[], Byte[])", paramObjs, typeof(System.Security.Cryptography.ICryptoTransform), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.ICryptoTransform)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod970), "SECURITY", "System.Security.Cryptography.DESCryptoServiceProvider.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.DSA")]
	public class HandlerClass80
	{
		// System.Security.Cryptography.DSA.ToXmlString
		private static bool CallerMethod971(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSA.FromXmlString
		private static bool CallerMethod972(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSA.Create
		private static bool CallerMethod973(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSA.Create
		private static bool CallerMethod974(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String ToXmlString(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean includePrivateParameters)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = includePrivateParameters;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod971), "SECURITY", "System.Security.Cryptography.DSA.ToXmlString(Boolean)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void FromXmlString(HeatDotNet.MethodInterceptInfo methodIntercept, System.String xmlString)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = xmlString;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod972), "SECURITY", "System.Security.Cryptography.DSA.FromXmlString(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Security.Cryptography.DSA Create(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod973), "SECURITY", "System.Security.Cryptography.DSA.Create()", paramObjs, typeof(System.Security.Cryptography.DSA), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.DSA)retValue;
		}

		public static System.Security.Cryptography.DSA Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.String algName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = algName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod974), "SECURITY", "System.Security.Cryptography.DSA.Create(String)", paramObjs, typeof(System.Security.Cryptography.DSA), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.DSA)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.DSACryptoServiceProvider")]
	public class HandlerClass81
	{
		// System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters
		private static bool CallerMethod975(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters
		private static bool CallerMethod976(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature
		private static bool CallerMethod977(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature
		private static bool CallerMethod978(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSACryptoServiceProvider.get_KeyExchangeAlgorithm
		private static bool CallerMethod979(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSACryptoServiceProvider.get_SignatureAlgorithm
		private static bool CallerMethod980(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSACryptoServiceProvider.get_LegalKeySizes
		private static bool CallerMethod981(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSACryptoServiceProvider.get_KeySize
		private static bool CallerMethod982(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSACryptoServiceProvider.get_PersistKeyInCsp
		private static bool CallerMethod983(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSACryptoServiceProvider.set_PersistKeyInCsp
		private static bool CallerMethod984(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSACryptoServiceProvider.SignData
		private static bool CallerMethod985(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSACryptoServiceProvider.SignData
		private static bool CallerMethod986(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSACryptoServiceProvider.SignData
		private static bool CallerMethod987(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSACryptoServiceProvider.VerifyData
		private static bool CallerMethod988(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSACryptoServiceProvider.SignHash
		private static bool CallerMethod989(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash
		private static bool CallerMethod990(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSACryptoServiceProvider.get_UseMachineKeyStore
		private static bool CallerMethod991(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSACryptoServiceProvider.set_UseMachineKeyStore
		private static bool CallerMethod992(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSACryptoServiceProvider..ctor
		private static bool CallerMethod993(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSACryptoServiceProvider..ctor
		private static bool CallerMethod994(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSACryptoServiceProvider..ctor
		private static bool CallerMethod995(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSACryptoServiceProvider..ctor
		private static bool CallerMethod996(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void ImportParameters(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.DSAParameters parameters)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = parameters;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod975), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(DSAParameters)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Security.Cryptography.DSAParameters ExportParameters(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean includePrivateParameters)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = includePrivateParameters;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod976), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(Boolean)", paramObjs, typeof(System.Security.Cryptography.DSAParameters), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.DSAParameters)retValue;
		}

		public static System.Boolean VerifySignature(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbHash, System.Byte[] rgbSignature)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbHash;
			paramObjs[2] = rgbSignature;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod977), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(Byte[], Byte[])", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Byte[] CreateSignature(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbHash)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbHash;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod978), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(Byte[])", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.String get_KeyExchangeAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod979), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.get_KeyExchangeAlgorithm()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_SignatureAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod980), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.get_SignatureAlgorithm()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Security.Cryptography.KeySizes[] get_LegalKeySizes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod981), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.get_LegalKeySizes()", paramObjs, typeof(System.Security.Cryptography.KeySizes[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.KeySizes[])retValue;
		}

		public static System.Int32 get_KeySize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod982), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.get_KeySize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean get_PersistKeyInCsp(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod983), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.get_PersistKeyInCsp()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_PersistKeyInCsp(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod984), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.set_PersistKeyInCsp(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Byte[] SignData(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.Stream inputStream)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inputStream;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod985), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.SignData(Stream)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Byte[] SignData(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod986), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[])", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Byte[] SignData(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod987), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[], Int32, Int32)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Boolean VerifyData(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbData, System.Byte[] rgbSignature)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbData;
			paramObjs[2] = rgbSignature;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod988), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(Byte[], Byte[])", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Byte[] SignHash(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbHash, System.String str)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbHash;
			paramObjs[2] = str;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod989), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.SignHash(Byte[], String)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Boolean VerifyHash(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbHash, System.String str, System.Byte[] rgbSignature)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbHash;
			paramObjs[2] = str;
			paramObjs[3] = rgbSignature;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod990), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(Byte[], String, Byte[])", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_UseMachineKeyStore(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod991), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.get_UseMachineKeyStore()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_UseMachineKeyStore(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod992), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.set_UseMachineKeyStore(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod993), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int32 dwKeySize)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = dwKeySize;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod994), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.ctor(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Cryptography.CspParameters parameters)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = parameters;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod995), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.ctor(CspParameters)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int32 dwKeySize, System.Security.Cryptography.CspParameters parameters)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = dwKeySize;
			paramObjs[2] = parameters;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod996), "SECURITY", "System.Security.Cryptography.DSACryptoServiceProvider.ctor(Int32, CspParameters)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.DSASignatureDeformatter")]
	public class HandlerClass82
	{
		// System.Security.Cryptography.DSASignatureDeformatter.VerifySignature
		private static bool CallerMethod997(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSASignatureDeformatter.SetHashAlgorithm
		private static bool CallerMethod998(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSASignatureDeformatter.SetKey
		private static bool CallerMethod999(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSASignatureDeformatter..ctor
		private static bool CallerMethod1000(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSASignatureDeformatter..ctor
		private static bool CallerMethod1001(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean VerifySignature(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbHash, System.Byte[] rgbSignature)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbHash;
			paramObjs[2] = rgbSignature;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod997), "SECURITY", "System.Security.Cryptography.DSASignatureDeformatter.VerifySignature(Byte[], Byte[])", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void SetHashAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept, System.String strName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = strName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod998), "SECURITY", "System.Security.Cryptography.DSASignatureDeformatter.SetHashAlgorithm(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.AsymmetricAlgorithm key)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = key;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod999), "SECURITY", "System.Security.Cryptography.DSASignatureDeformatter.SetKey(AsymmetricAlgorithm)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1000), "SECURITY", "System.Security.Cryptography.DSASignatureDeformatter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Cryptography.AsymmetricAlgorithm key)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = key;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1001), "SECURITY", "System.Security.Cryptography.DSASignatureDeformatter.ctor(AsymmetricAlgorithm)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.DSASignatureFormatter")]
	public class HandlerClass83
	{
		// System.Security.Cryptography.DSASignatureFormatter.CreateSignature
		private static bool CallerMethod1002(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSASignatureFormatter.SetHashAlgorithm
		private static bool CallerMethod1003(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSASignatureFormatter.SetKey
		private static bool CallerMethod1004(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSASignatureFormatter..ctor
		private static bool CallerMethod1005(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.DSASignatureFormatter..ctor
		private static bool CallerMethod1006(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Byte[] CreateSignature(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbHash)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbHash;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1002), "SECURITY", "System.Security.Cryptography.DSASignatureFormatter.CreateSignature(Byte[])", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void SetHashAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept, System.String strName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = strName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1003), "SECURITY", "System.Security.Cryptography.DSASignatureFormatter.SetHashAlgorithm(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.AsymmetricAlgorithm key)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = key;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1004), "SECURITY", "System.Security.Cryptography.DSASignatureFormatter.SetKey(AsymmetricAlgorithm)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1005), "SECURITY", "System.Security.Cryptography.DSASignatureFormatter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Cryptography.AsymmetricAlgorithm key)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = key;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1006), "SECURITY", "System.Security.Cryptography.DSASignatureFormatter.ctor(AsymmetricAlgorithm)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.HashAlgorithm")]
	public class HandlerClass84
	{
		// System.Security.Cryptography.HashAlgorithm.TransformFinalBlock
		private static bool CallerMethod1007(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.HashAlgorithm.TransformBlock
		private static bool CallerMethod1008(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.HashAlgorithm.get_CanReuseTransform
		private static bool CallerMethod1009(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.HashAlgorithm.get_CanTransformMultipleBlocks
		private static bool CallerMethod1010(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.HashAlgorithm.get_OutputBlockSize
		private static bool CallerMethod1011(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.HashAlgorithm.get_InputBlockSize
		private static bool CallerMethod1012(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.HashAlgorithm.get_Hash
		private static bool CallerMethod1013(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.HashAlgorithm.get_HashSize
		private static bool CallerMethod1014(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.HashAlgorithm.ComputeHash
		private static bool CallerMethod1015(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.HashAlgorithm.ComputeHash
		private static bool CallerMethod1016(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.HashAlgorithm.ComputeHash
		private static bool CallerMethod1017(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.HashAlgorithm.Clear
		private static bool CallerMethod1018(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.HashAlgorithm.Create
		private static bool CallerMethod1019(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.HashAlgorithm.Create
		private static bool CallerMethod1020(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Byte[] TransformFinalBlock(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inputBuffer;
			paramObjs[2] = inputOffset;
			paramObjs[3] = inputCount;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1007), "SECURITY", "System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Int32 TransformBlock(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount, System.Byte[] outputBuffer, System.Int32 outputOffset)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inputBuffer;
			paramObjs[2] = inputOffset;
			paramObjs[3] = inputCount;
			paramObjs[4] = outputBuffer;
			paramObjs[5] = outputOffset;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1008), "SECURITY", "System.Security.Cryptography.HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean get_CanReuseTransform(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1009), "SECURITY", "System.Security.Cryptography.HashAlgorithm.get_CanReuseTransform()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_CanTransformMultipleBlocks(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1010), "SECURITY", "System.Security.Cryptography.HashAlgorithm.get_CanTransformMultipleBlocks()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 get_OutputBlockSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1011), "SECURITY", "System.Security.Cryptography.HashAlgorithm.get_OutputBlockSize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_InputBlockSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1012), "SECURITY", "System.Security.Cryptography.HashAlgorithm.get_InputBlockSize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Byte[] get_Hash(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1013), "SECURITY", "System.Security.Cryptography.HashAlgorithm.get_Hash()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Int32 get_HashSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1014), "SECURITY", "System.Security.Cryptography.HashAlgorithm.get_HashSize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Byte[] ComputeHash(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.Stream inputStream)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inputStream;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1015), "SECURITY", "System.Security.Cryptography.HashAlgorithm.ComputeHash(Stream)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Byte[] ComputeHash(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1016), "SECURITY", "System.Security.Cryptography.HashAlgorithm.ComputeHash(Byte[])", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Byte[] ComputeHash(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1017), "SECURITY", "System.Security.Cryptography.HashAlgorithm.ComputeHash(Byte[], Int32, Int32)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void Clear(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1018), "SECURITY", "System.Security.Cryptography.HashAlgorithm.Clear()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Security.Cryptography.HashAlgorithm Create(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1019), "SECURITY", "System.Security.Cryptography.HashAlgorithm.Create()", paramObjs, typeof(System.Security.Cryptography.HashAlgorithm), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.HashAlgorithm)retValue;
		}

		public static System.Security.Cryptography.HashAlgorithm Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.String hashName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = hashName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1020), "SECURITY", "System.Security.Cryptography.HashAlgorithm.Create(String)", paramObjs, typeof(System.Security.Cryptography.HashAlgorithm), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.HashAlgorithm)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.KeyedHashAlgorithm")]
	public class HandlerClass85
	{
		// System.Security.Cryptography.KeyedHashAlgorithm.set_Key
		private static bool CallerMethod1021(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.KeyedHashAlgorithm.get_Key
		private static bool CallerMethod1022(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.KeyedHashAlgorithm.Create
		private static bool CallerMethod1023(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.KeyedHashAlgorithm.Create
		private static bool CallerMethod1024(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void set_Key(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1021), "SECURITY", "System.Security.Cryptography.KeyedHashAlgorithm.set_Key(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Byte[] get_Key(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1022), "SECURITY", "System.Security.Cryptography.KeyedHashAlgorithm.get_Key()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Security.Cryptography.KeyedHashAlgorithm Create(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1023), "SECURITY", "System.Security.Cryptography.KeyedHashAlgorithm.Create()", paramObjs, typeof(System.Security.Cryptography.KeyedHashAlgorithm), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.KeyedHashAlgorithm)retValue;
		}

		public static System.Security.Cryptography.KeyedHashAlgorithm Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.String algName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = algName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1024), "SECURITY", "System.Security.Cryptography.KeyedHashAlgorithm.Create(String)", paramObjs, typeof(System.Security.Cryptography.KeyedHashAlgorithm), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.KeyedHashAlgorithm)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.HMACSHA1")]
	public class HandlerClass86
	{
		// System.Security.Cryptography.HMACSHA1.set_Key
		private static bool CallerMethod1025(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.HMACSHA1.get_Key
		private static bool CallerMethod1026(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.HMACSHA1.Initialize
		private static bool CallerMethod1027(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.HMACSHA1.get_HashName
		private static bool CallerMethod1028(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.HMACSHA1.set_HashName
		private static bool CallerMethod1029(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.HMACSHA1..ctor
		private static bool CallerMethod1030(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.HMACSHA1..ctor
		private static bool CallerMethod1031(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void set_Key(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1025), "SECURITY", "System.Security.Cryptography.HMACSHA1.set_Key(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Byte[] get_Key(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1026), "SECURITY", "System.Security.Cryptography.HMACSHA1.get_Key()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void Initialize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1027), "SECURITY", "System.Security.Cryptography.HMACSHA1.Initialize()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_HashName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1028), "SECURITY", "System.Security.Cryptography.HMACSHA1.get_HashName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_HashName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1029), "SECURITY", "System.Security.Cryptography.HMACSHA1.set_HashName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1030), "SECURITY", "System.Security.Cryptography.HMACSHA1.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Byte[] rgbKey)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = rgbKey;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1031), "SECURITY", "System.Security.Cryptography.HMACSHA1.ctor(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.MACTripleDES")]
	public class HandlerClass87
	{
		// System.Security.Cryptography.MACTripleDES.Initialize
		private static bool CallerMethod1032(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.MACTripleDES..ctor
		private static bool CallerMethod1033(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.MACTripleDES..ctor
		private static bool CallerMethod1034(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.MACTripleDES..ctor
		private static bool CallerMethod1035(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Initialize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1032), "SECURITY", "System.Security.Cryptography.MACTripleDES.Initialize()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1033), "SECURITY", "System.Security.Cryptography.MACTripleDES.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Byte[] rgbKey)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = rgbKey;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1034), "SECURITY", "System.Security.Cryptography.MACTripleDES.ctor(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String strTripleDES, System.Byte[] rgbKey)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = strTripleDES;
			paramObjs[2] = rgbKey;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1035), "SECURITY", "System.Security.Cryptography.MACTripleDES.ctor(String, Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.MD5")]
	public class HandlerClass88
	{
		// System.Security.Cryptography.MD5.Create
		private static bool CallerMethod1036(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.MD5.Create
		private static bool CallerMethod1037(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Security.Cryptography.MD5 Create(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1036), "SECURITY", "System.Security.Cryptography.MD5.Create()", paramObjs, typeof(System.Security.Cryptography.MD5), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.MD5)retValue;
		}

		public static System.Security.Cryptography.MD5 Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.String algName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = algName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1037), "SECURITY", "System.Security.Cryptography.MD5.Create(String)", paramObjs, typeof(System.Security.Cryptography.MD5), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.MD5)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.MD5CryptoServiceProvider")]
	public class HandlerClass89
	{
		// System.Security.Cryptography.MD5CryptoServiceProvider.Initialize
		private static bool CallerMethod1038(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.MD5CryptoServiceProvider..ctor
		private static bool CallerMethod1039(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Initialize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1038), "SECURITY", "System.Security.Cryptography.MD5CryptoServiceProvider.Initialize()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1039), "SECURITY", "System.Security.Cryptography.MD5CryptoServiceProvider.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.PasswordDeriveBytes")]
	public class HandlerClass90
	{
		// System.Security.Cryptography.PasswordDeriveBytes.Reset
		private static bool CallerMethod1040(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.PasswordDeriveBytes.GetBytes
		private static bool CallerMethod1041(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.PasswordDeriveBytes.get_HashName
		private static bool CallerMethod1042(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.PasswordDeriveBytes.set_HashName
		private static bool CallerMethod1043(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.PasswordDeriveBytes.get_IterationCount
		private static bool CallerMethod1044(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.PasswordDeriveBytes.set_IterationCount
		private static bool CallerMethod1045(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.PasswordDeriveBytes.get_Salt
		private static bool CallerMethod1046(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.PasswordDeriveBytes.set_Salt
		private static bool CallerMethod1047(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey
		private static bool CallerMethod1048(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.PasswordDeriveBytes..ctor
		private static bool CallerMethod1049(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.PasswordDeriveBytes..ctor
		private static bool CallerMethod1050(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.PasswordDeriveBytes..ctor
		private static bool CallerMethod1051(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.PasswordDeriveBytes..ctor
		private static bool CallerMethod1052(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Reset(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1040), "SECURITY", "System.Security.Cryptography.PasswordDeriveBytes.Reset()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Byte[] GetBytes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 cb)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = cb;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1041), "SECURITY", "System.Security.Cryptography.PasswordDeriveBytes.GetBytes(Int32)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.String get_HashName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1042), "SECURITY", "System.Security.Cryptography.PasswordDeriveBytes.get_HashName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_HashName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1043), "SECURITY", "System.Security.Cryptography.PasswordDeriveBytes.set_HashName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_IterationCount(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1044), "SECURITY", "System.Security.Cryptography.PasswordDeriveBytes.get_IterationCount()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_IterationCount(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1045), "SECURITY", "System.Security.Cryptography.PasswordDeriveBytes.set_IterationCount(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Byte[] get_Salt(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1046), "SECURITY", "System.Security.Cryptography.PasswordDeriveBytes.get_Salt()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void set_Salt(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1047), "SECURITY", "System.Security.Cryptography.PasswordDeriveBytes.set_Salt(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Byte[] CryptDeriveKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.String algname, System.String alghashname, System.Int32 keySize, System.Byte[] rgbIV)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = algname;
			paramObjs[2] = alghashname;
			paramObjs[3] = keySize;
			paramObjs[4] = rgbIV;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1048), "SECURITY", "System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(String, String, Int32, Byte[])", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String strPassword, System.Byte[] rgbSalt)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = strPassword;
			paramObjs[2] = rgbSalt;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1049), "SECURITY", "System.Security.Cryptography.PasswordDeriveBytes.ctor(String, Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String strPassword, System.Byte[] rgbSalt, System.String strHashName, System.Int32 iterations)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = strPassword;
			paramObjs[2] = rgbSalt;
			paramObjs[3] = strHashName;
			paramObjs[4] = iterations;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1050), "SECURITY", "System.Security.Cryptography.PasswordDeriveBytes.ctor(String, Byte[], String, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String strPassword, System.Byte[] rgbSalt, System.Security.Cryptography.CspParameters cspParams)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = strPassword;
			paramObjs[2] = rgbSalt;
			paramObjs[3] = cspParams;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1051), "SECURITY", "System.Security.Cryptography.PasswordDeriveBytes.ctor(String, Byte[], CspParameters)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String strPassword, System.Byte[] rgbSalt, System.String strHashName, System.Int32 iterations, System.Security.Cryptography.CspParameters cspParams)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = strPassword;
			paramObjs[2] = rgbSalt;
			paramObjs[3] = strHashName;
			paramObjs[4] = iterations;
			paramObjs[5] = cspParams;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1052), "SECURITY", "System.Security.Cryptography.PasswordDeriveBytes.ctor(String, Byte[], String, Int32, CspParameters)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.PKCS1MaskGenerationMethod")]
	public class HandlerClass91
	{
		// System.Security.Cryptography.PKCS1MaskGenerationMethod.GenerateMask
		private static bool CallerMethod1053(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.PKCS1MaskGenerationMethod.get_HashName
		private static bool CallerMethod1054(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.PKCS1MaskGenerationMethod.set_HashName
		private static bool CallerMethod1055(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.PKCS1MaskGenerationMethod..ctor
		private static bool CallerMethod1056(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Byte[] GenerateMask(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbSeed, System.Int32 cbReturn)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbSeed;
			paramObjs[2] = cbReturn;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1053), "SECURITY", "System.Security.Cryptography.PKCS1MaskGenerationMethod.GenerateMask(Byte[], Int32)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.String get_HashName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1054), "SECURITY", "System.Security.Cryptography.PKCS1MaskGenerationMethod.get_HashName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_HashName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1055), "SECURITY", "System.Security.Cryptography.PKCS1MaskGenerationMethod.set_HashName(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1056), "SECURITY", "System.Security.Cryptography.PKCS1MaskGenerationMethod.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.RC2")]
	public class HandlerClass92
	{
		// System.Security.Cryptography.RC2.set_EffectiveKeySize
		private static bool CallerMethod1057(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RC2.get_EffectiveKeySize
		private static bool CallerMethod1058(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RC2.set_KeySize
		private static bool CallerMethod1059(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RC2.get_KeySize
		private static bool CallerMethod1060(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RC2.Create
		private static bool CallerMethod1061(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RC2.Create
		private static bool CallerMethod1062(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RC2..ctor
		private static bool CallerMethod1063(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void set_EffectiveKeySize(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1057), "SECURITY", "System.Security.Cryptography.RC2.set_EffectiveKeySize(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_EffectiveKeySize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1058), "SECURITY", "System.Security.Cryptography.RC2.get_EffectiveKeySize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void set_KeySize(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1059), "SECURITY", "System.Security.Cryptography.RC2.set_KeySize(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_KeySize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1060), "SECURITY", "System.Security.Cryptography.RC2.get_KeySize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Security.Cryptography.RC2 Create(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1061), "SECURITY", "System.Security.Cryptography.RC2.Create()", paramObjs, typeof(System.Security.Cryptography.RC2), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.RC2)retValue;
		}

		public static System.Security.Cryptography.RC2 Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.String AlgName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = AlgName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1062), "SECURITY", "System.Security.Cryptography.RC2.Create(String)", paramObjs, typeof(System.Security.Cryptography.RC2), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.RC2)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1063), "SECURITY", "System.Security.Cryptography.RC2.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.RC2CryptoServiceProvider")]
	public class HandlerClass93
	{
		// System.Security.Cryptography.RC2CryptoServiceProvider.set_EffectiveKeySize
		private static bool CallerMethod1064(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RC2CryptoServiceProvider.get_EffectiveKeySize
		private static bool CallerMethod1065(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RC2CryptoServiceProvider.GenerateIV
		private static bool CallerMethod1066(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RC2CryptoServiceProvider.GenerateKey
		private static bool CallerMethod1067(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RC2CryptoServiceProvider.CreateDecryptor
		private static bool CallerMethod1068(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RC2CryptoServiceProvider.CreateEncryptor
		private static bool CallerMethod1069(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RC2CryptoServiceProvider..ctor
		private static bool CallerMethod1070(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void set_EffectiveKeySize(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1064), "SECURITY", "System.Security.Cryptography.RC2CryptoServiceProvider.set_EffectiveKeySize(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_EffectiveKeySize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1065), "SECURITY", "System.Security.Cryptography.RC2CryptoServiceProvider.get_EffectiveKeySize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void GenerateIV(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1066), "SECURITY", "System.Security.Cryptography.RC2CryptoServiceProvider.GenerateIV()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void GenerateKey(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1067), "SECURITY", "System.Security.Cryptography.RC2CryptoServiceProvider.GenerateKey()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Security.Cryptography.ICryptoTransform CreateDecryptor(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbKey, System.Byte[] rgbIV)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbKey;
			paramObjs[2] = rgbIV;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1068), "SECURITY", "System.Security.Cryptography.RC2CryptoServiceProvider.CreateDecryptor(Byte[], Byte[])", paramObjs, typeof(System.Security.Cryptography.ICryptoTransform), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.ICryptoTransform)retValue;
		}

		public static System.Security.Cryptography.ICryptoTransform CreateEncryptor(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbKey, System.Byte[] rgbIV)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbKey;
			paramObjs[2] = rgbIV;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1069), "SECURITY", "System.Security.Cryptography.RC2CryptoServiceProvider.CreateEncryptor(Byte[], Byte[])", paramObjs, typeof(System.Security.Cryptography.ICryptoTransform), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.ICryptoTransform)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1070), "SECURITY", "System.Security.Cryptography.RC2CryptoServiceProvider.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.RandomNumberGenerator")]
	public class HandlerClass94
	{
		// System.Security.Cryptography.RandomNumberGenerator.Create
		private static bool CallerMethod1071(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RandomNumberGenerator.Create
		private static bool CallerMethod1072(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RandomNumberGenerator..ctor
		private static bool CallerMethod1073(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Security.Cryptography.RandomNumberGenerator Create(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1071), "SECURITY", "System.Security.Cryptography.RandomNumberGenerator.Create()", paramObjs, typeof(System.Security.Cryptography.RandomNumberGenerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.RandomNumberGenerator)retValue;
		}

		public static System.Security.Cryptography.RandomNumberGenerator Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.String rngName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rngName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1072), "SECURITY", "System.Security.Cryptography.RandomNumberGenerator.Create(String)", paramObjs, typeof(System.Security.Cryptography.RandomNumberGenerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.RandomNumberGenerator)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1073), "SECURITY", "System.Security.Cryptography.RandomNumberGenerator.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.RNGCryptoServiceProvider")]
	public class HandlerClass95
	{
		// System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes
		private static bool CallerMethod1074(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes
		private static bool CallerMethod1075(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RNGCryptoServiceProvider..ctor
		private static bool CallerMethod1076(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RNGCryptoServiceProvider..ctor
		private static bool CallerMethod1077(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RNGCryptoServiceProvider..ctor
		private static bool CallerMethod1078(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RNGCryptoServiceProvider..ctor
		private static bool CallerMethod1079(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void GetNonZeroBytes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] data)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = data;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1074), "SECURITY", "System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void GetBytes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] data)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = data;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1075), "SECURITY", "System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1076), "SECURITY", "System.Security.Cryptography.RNGCryptoServiceProvider.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String str)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = str;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1077), "SECURITY", "System.Security.Cryptography.RNGCryptoServiceProvider.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Byte[] rgb)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = rgb;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1078), "SECURITY", "System.Security.Cryptography.RNGCryptoServiceProvider.ctor(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Cryptography.CspParameters cspParams)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = cspParams;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1079), "SECURITY", "System.Security.Cryptography.RNGCryptoServiceProvider.ctor(CspParameters)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.RSA")]
	public class HandlerClass96
	{
		// System.Security.Cryptography.RSA.ToXmlString
		private static bool CallerMethod1080(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSA.FromXmlString
		private static bool CallerMethod1081(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSA.Create
		private static bool CallerMethod1082(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSA.Create
		private static bool CallerMethod1083(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSA..ctor
		private static bool CallerMethod1084(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String ToXmlString(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean includePrivateParameters)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = includePrivateParameters;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1080), "SECURITY", "System.Security.Cryptography.RSA.ToXmlString(Boolean)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void FromXmlString(HeatDotNet.MethodInterceptInfo methodIntercept, System.String xmlString)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = xmlString;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1081), "SECURITY", "System.Security.Cryptography.RSA.FromXmlString(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Security.Cryptography.RSA Create(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1082), "SECURITY", "System.Security.Cryptography.RSA.Create()", paramObjs, typeof(System.Security.Cryptography.RSA), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.RSA)retValue;
		}

		public static System.Security.Cryptography.RSA Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.String algName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = algName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1083), "SECURITY", "System.Security.Cryptography.RSA.Create(String)", paramObjs, typeof(System.Security.Cryptography.RSA), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.RSA)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1084), "SECURITY", "System.Security.Cryptography.RSA.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.RSACryptoServiceProvider")]
	public class HandlerClass97
	{
		// System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters
		private static bool CallerMethod1085(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters
		private static bool CallerMethod1086(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue
		private static bool CallerMethod1087(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue
		private static bool CallerMethod1088(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider.get_KeyExchangeAlgorithm
		private static bool CallerMethod1089(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider.get_SignatureAlgorithm
		private static bool CallerMethod1090(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider.get_KeySize
		private static bool CallerMethod1091(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider.get_PersistKeyInCsp
		private static bool CallerMethod1092(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider.set_PersistKeyInCsp
		private static bool CallerMethod1093(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider.SignData
		private static bool CallerMethod1094(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider.SignData
		private static bool CallerMethod1095(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider.SignData
		private static bool CallerMethod1096(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider.VerifyData
		private static bool CallerMethod1097(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider.SignHash
		private static bool CallerMethod1098(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash
		private static bool CallerMethod1099(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider.Encrypt
		private static bool CallerMethod1100(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider.Decrypt
		private static bool CallerMethod1101(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider.get_UseMachineKeyStore
		private static bool CallerMethod1102(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider.set_UseMachineKeyStore
		private static bool CallerMethod1103(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider..ctor
		private static bool CallerMethod1104(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider..ctor
		private static bool CallerMethod1105(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider..ctor
		private static bool CallerMethod1106(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSACryptoServiceProvider..ctor
		private static bool CallerMethod1107(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void ImportParameters(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.RSAParameters parameters)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = parameters;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1085), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(RSAParameters)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Security.Cryptography.RSAParameters ExportParameters(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean includePrivateParameters)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = includePrivateParameters;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1086), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(Boolean)", paramObjs, typeof(System.Security.Cryptography.RSAParameters), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.RSAParameters)retValue;
		}

		public static System.Byte[] EncryptValue(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgb)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgb;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1087), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue(Byte[])", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Byte[] DecryptValue(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgb)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgb;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1088), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue(Byte[])", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.String get_KeyExchangeAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1089), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.get_KeyExchangeAlgorithm()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_SignatureAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1090), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.get_SignatureAlgorithm()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_KeySize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1091), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.get_KeySize()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean get_PersistKeyInCsp(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1092), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.get_PersistKeyInCsp()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_PersistKeyInCsp(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1093), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.set_PersistKeyInCsp(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Byte[] SignData(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.Stream inputStream, System.Object halg)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inputStream;
			paramObjs[2] = halg;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1094), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.SignData(Stream, Object)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Byte[] SignData(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Object halg)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = halg;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1095), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.SignData(Byte[], Object)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Byte[] SignData(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Object halg)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = count;
			paramObjs[4] = halg;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1096), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.SignData(Byte[], Int32, Int32, Object)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Boolean VerifyData(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Object halg, System.Byte[] signature)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = halg;
			paramObjs[3] = signature;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1097), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(Byte[], Object, Byte[])", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Byte[] SignHash(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbHash, System.String str)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbHash;
			paramObjs[2] = str;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1098), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.SignHash(Byte[], String)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Boolean VerifyHash(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbHash, System.String str, System.Byte[] rgbSignature)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbHash;
			paramObjs[2] = str;
			paramObjs[3] = rgbSignature;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1099), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(Byte[], String, Byte[])", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Byte[] Encrypt(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgb, System.Boolean fOAEP)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgb;
			paramObjs[2] = fOAEP;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1100), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(Byte[], Boolean)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Byte[] Decrypt(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgb, System.Boolean fOAEP)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgb;
			paramObjs[2] = fOAEP;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1101), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(Byte[], Boolean)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Boolean get_UseMachineKeyStore(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1102), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.get_UseMachineKeyStore()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_UseMachineKeyStore(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1103), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.set_UseMachineKeyStore(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1104), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int32 dwKeySize)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = dwKeySize;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1105), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.ctor(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Cryptography.CspParameters parameters)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = parameters;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1106), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.ctor(CspParameters)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int32 dwKeySize, System.Security.Cryptography.CspParameters parameters)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = dwKeySize;
			paramObjs[2] = parameters;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1107), "SECURITY", "System.Security.Cryptography.RSACryptoServiceProvider.ctor(Int32, CspParameters)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter")]
	public class HandlerClass98
	{
		// System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.DecryptKeyExchange
		private static bool CallerMethod1108(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.SetKey
		private static bool CallerMethod1109(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.set_Parameters
		private static bool CallerMethod1110(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.get_Parameters
		private static bool CallerMethod1111(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter..ctor
		private static bool CallerMethod1112(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter..ctor
		private static bool CallerMethod1113(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Byte[] DecryptKeyExchange(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbData)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbData;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1108), "SECURITY", "System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.DecryptKeyExchange(Byte[])", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void SetKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.AsymmetricAlgorithm key)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = key;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1109), "SECURITY", "System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.SetKey(AsymmetricAlgorithm)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_Parameters(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1110), "SECURITY", "System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.set_Parameters(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Parameters(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1111), "SECURITY", "System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.get_Parameters()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1112), "SECURITY", "System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Cryptography.AsymmetricAlgorithm key)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = key;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1113), "SECURITY", "System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.ctor(AsymmetricAlgorithm)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.RSAOAEPKeyExchangeFormatter")]
	public class HandlerClass99
	{
		// System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange
		private static bool CallerMethod1114(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange
		private static bool CallerMethod1115(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey
		private static bool CallerMethod1116(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.get_Parameters
		private static bool CallerMethod1117(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.get_Parameter
		private static bool CallerMethod1118(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.set_Parameter
		private static bool CallerMethod1119(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.get_Rng
		private static bool CallerMethod1120(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.set_Rng
		private static bool CallerMethod1121(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAOAEPKeyExchangeFormatter..ctor
		private static bool CallerMethod1122(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAOAEPKeyExchangeFormatter..ctor
		private static bool CallerMethod1123(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Byte[] CreateKeyExchange(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbData, System.Type symAlgType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbData;
			paramObjs[2] = symAlgType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1114), "SECURITY", "System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[], Type)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Byte[] CreateKeyExchange(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbData)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbData;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1115), "SECURITY", "System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[])", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void SetKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.AsymmetricAlgorithm key)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = key;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1116), "SECURITY", "System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(AsymmetricAlgorithm)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Parameters(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1117), "SECURITY", "System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.get_Parameters()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Byte[] get_Parameter(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1118), "SECURITY", "System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.get_Parameter()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void set_Parameter(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1119), "SECURITY", "System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.set_Parameter(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Security.Cryptography.RandomNumberGenerator get_Rng(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1120), "SECURITY", "System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.get_Rng()", paramObjs, typeof(System.Security.Cryptography.RandomNumberGenerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.RandomNumberGenerator)retValue;
		}

		public static void set_Rng(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.RandomNumberGenerator value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1121), "SECURITY", "System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.set_Rng(RandomNumberGenerator)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1122), "SECURITY", "System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Cryptography.AsymmetricAlgorithm key)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = key;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1123), "SECURITY", "System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.ctor(AsymmetricAlgorithm)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter")]
	public class HandlerClass100
	{
		// System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.DecryptKeyExchange
		private static bool CallerMethod1124(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.SetKey
		private static bool CallerMethod1125(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.set_Parameters
		private static bool CallerMethod1126(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.get_Parameters
		private static bool CallerMethod1127(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.get_RNG
		private static bool CallerMethod1128(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.set_RNG
		private static bool CallerMethod1129(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter..ctor
		private static bool CallerMethod1130(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter..ctor
		private static bool CallerMethod1131(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Byte[] DecryptKeyExchange(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbIn)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbIn;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1124), "SECURITY", "System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.DecryptKeyExchange(Byte[])", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void SetKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.AsymmetricAlgorithm key)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = key;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1125), "SECURITY", "System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.SetKey(AsymmetricAlgorithm)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_Parameters(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1126), "SECURITY", "System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.set_Parameters(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Parameters(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1127), "SECURITY", "System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.get_Parameters()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Security.Cryptography.RandomNumberGenerator get_RNG(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1128), "SECURITY", "System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.get_RNG()", paramObjs, typeof(System.Security.Cryptography.RandomNumberGenerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.RandomNumberGenerator)retValue;
		}

		public static void set_RNG(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.RandomNumberGenerator value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1129), "SECURITY", "System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.set_RNG(RandomNumberGenerator)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1130), "SECURITY", "System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Cryptography.AsymmetricAlgorithm key)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = key;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1131), "SECURITY", "System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.ctor(AsymmetricAlgorithm)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter")]
	public class HandlerClass101
	{
		// System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange
		private static bool CallerMethod1132(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange
		private static bool CallerMethod1133(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey
		private static bool CallerMethod1134(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.get_Parameters
		private static bool CallerMethod1135(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.get_Rng
		private static bool CallerMethod1136(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.set_Rng
		private static bool CallerMethod1137(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter..ctor
		private static bool CallerMethod1138(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter..ctor
		private static bool CallerMethod1139(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Byte[] CreateKeyExchange(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbData, System.Type symAlgType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbData;
			paramObjs[2] = symAlgType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1132), "SECURITY", "System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(Byte[], Type)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Byte[] CreateKeyExchange(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbData)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbData;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1133), "SECURITY", "System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(Byte[])", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void SetKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.AsymmetricAlgorithm key)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = key;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1134), "SECURITY", "System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey(AsymmetricAlgorithm)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_Parameters(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1135), "SECURITY", "System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.get_Parameters()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Security.Cryptography.RandomNumberGenerator get_Rng(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1136), "SECURITY", "System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.get_Rng()", paramObjs, typeof(System.Security.Cryptography.RandomNumberGenerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.RandomNumberGenerator)retValue;
		}

		public static void set_Rng(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.RandomNumberGenerator value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1137), "SECURITY", "System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.set_Rng(RandomNumberGenerator)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1138), "SECURITY", "System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Cryptography.AsymmetricAlgorithm key)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = key;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1139), "SECURITY", "System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.ctor(AsymmetricAlgorithm)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.RSAPKCS1SignatureDeformatter")]
	public class HandlerClass102
	{
		// System.Security.Cryptography.RSAPKCS1SignatureDeformatter.VerifySignature
		private static bool CallerMethod1140(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetHashAlgorithm
		private static bool CallerMethod1141(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetKey
		private static bool CallerMethod1142(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1SignatureDeformatter..ctor
		private static bool CallerMethod1143(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1SignatureDeformatter..ctor
		private static bool CallerMethod1144(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean VerifySignature(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbHash, System.Byte[] rgbSignature)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbHash;
			paramObjs[2] = rgbSignature;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1140), "SECURITY", "System.Security.Cryptography.RSAPKCS1SignatureDeformatter.VerifySignature(Byte[], Byte[])", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void SetHashAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept, System.String strName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = strName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1141), "SECURITY", "System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetHashAlgorithm(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.AsymmetricAlgorithm key)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = key;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1142), "SECURITY", "System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetKey(AsymmetricAlgorithm)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1143), "SECURITY", "System.Security.Cryptography.RSAPKCS1SignatureDeformatter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Cryptography.AsymmetricAlgorithm key)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = key;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1144), "SECURITY", "System.Security.Cryptography.RSAPKCS1SignatureDeformatter.ctor(AsymmetricAlgorithm)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.RSAPKCS1SignatureFormatter")]
	public class HandlerClass103
	{
		// System.Security.Cryptography.RSAPKCS1SignatureFormatter.CreateSignature
		private static bool CallerMethod1145(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetHashAlgorithm
		private static bool CallerMethod1146(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetKey
		private static bool CallerMethod1147(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1SignatureFormatter..ctor
		private static bool CallerMethod1148(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RSAPKCS1SignatureFormatter..ctor
		private static bool CallerMethod1149(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Byte[] CreateSignature(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbHash)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbHash;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1145), "SECURITY", "System.Security.Cryptography.RSAPKCS1SignatureFormatter.CreateSignature(Byte[])", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void SetHashAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept, System.String strName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = strName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1146), "SECURITY", "System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetHashAlgorithm(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.AsymmetricAlgorithm key)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = key;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1147), "SECURITY", "System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetKey(AsymmetricAlgorithm)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1148), "SECURITY", "System.Security.Cryptography.RSAPKCS1SignatureFormatter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.Cryptography.AsymmetricAlgorithm key)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = key;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1149), "SECURITY", "System.Security.Cryptography.RSAPKCS1SignatureFormatter.ctor(AsymmetricAlgorithm)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.Rijndael")]
	public class HandlerClass104
	{
		// System.Security.Cryptography.Rijndael.Create
		private static bool CallerMethod1150(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.Rijndael.Create
		private static bool CallerMethod1151(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.Rijndael..ctor
		private static bool CallerMethod1152(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Security.Cryptography.Rijndael Create(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1150), "SECURITY", "System.Security.Cryptography.Rijndael.Create()", paramObjs, typeof(System.Security.Cryptography.Rijndael), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.Rijndael)retValue;
		}

		public static System.Security.Cryptography.Rijndael Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.String algName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = algName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1151), "SECURITY", "System.Security.Cryptography.Rijndael.Create(String)", paramObjs, typeof(System.Security.Cryptography.Rijndael), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.Rijndael)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1152), "SECURITY", "System.Security.Cryptography.Rijndael.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.RijndaelManaged")]
	public class HandlerClass105
	{
		// System.Security.Cryptography.RijndaelManaged.GenerateIV
		private static bool CallerMethod1153(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RijndaelManaged.GenerateKey
		private static bool CallerMethod1154(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RijndaelManaged.CreateDecryptor
		private static bool CallerMethod1155(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RijndaelManaged.CreateEncryptor
		private static bool CallerMethod1156(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.RijndaelManaged..ctor
		private static bool CallerMethod1157(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void GenerateIV(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1153), "SECURITY", "System.Security.Cryptography.RijndaelManaged.GenerateIV()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void GenerateKey(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1154), "SECURITY", "System.Security.Cryptography.RijndaelManaged.GenerateKey()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Security.Cryptography.ICryptoTransform CreateDecryptor(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbKey, System.Byte[] rgbIV)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbKey;
			paramObjs[2] = rgbIV;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1155), "SECURITY", "System.Security.Cryptography.RijndaelManaged.CreateDecryptor(Byte[], Byte[])", paramObjs, typeof(System.Security.Cryptography.ICryptoTransform), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.ICryptoTransform)retValue;
		}

		public static System.Security.Cryptography.ICryptoTransform CreateEncryptor(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbKey, System.Byte[] rgbIV)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbKey;
			paramObjs[2] = rgbIV;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1156), "SECURITY", "System.Security.Cryptography.RijndaelManaged.CreateEncryptor(Byte[], Byte[])", paramObjs, typeof(System.Security.Cryptography.ICryptoTransform), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.ICryptoTransform)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1157), "SECURITY", "System.Security.Cryptography.RijndaelManaged.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.SHA1")]
	public class HandlerClass106
	{
		// System.Security.Cryptography.SHA1.Create
		private static bool CallerMethod1158(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SHA1.Create
		private static bool CallerMethod1159(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Security.Cryptography.SHA1 Create(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1158), "SECURITY", "System.Security.Cryptography.SHA1.Create()", paramObjs, typeof(System.Security.Cryptography.SHA1), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.SHA1)retValue;
		}

		public static System.Security.Cryptography.SHA1 Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.String hashName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = hashName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1159), "SECURITY", "System.Security.Cryptography.SHA1.Create(String)", paramObjs, typeof(System.Security.Cryptography.SHA1), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.SHA1)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.SHA1CryptoServiceProvider")]
	public class HandlerClass107
	{
		// System.Security.Cryptography.SHA1CryptoServiceProvider.Initialize
		private static bool CallerMethod1160(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SHA1CryptoServiceProvider..ctor
		private static bool CallerMethod1161(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Initialize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1160), "SECURITY", "System.Security.Cryptography.SHA1CryptoServiceProvider.Initialize()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1161), "SECURITY", "System.Security.Cryptography.SHA1CryptoServiceProvider.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.SHA1Managed")]
	public class HandlerClass108
	{
		// System.Security.Cryptography.SHA1Managed.Initialize
		private static bool CallerMethod1162(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SHA1Managed..ctor
		private static bool CallerMethod1163(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Initialize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1162), "SECURITY", "System.Security.Cryptography.SHA1Managed.Initialize()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1163), "SECURITY", "System.Security.Cryptography.SHA1Managed.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.SHA256")]
	public class HandlerClass109
	{
		// System.Security.Cryptography.SHA256.Create
		private static bool CallerMethod1164(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SHA256.Create
		private static bool CallerMethod1165(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SHA256..ctor
		private static bool CallerMethod1166(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Security.Cryptography.SHA256 Create(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1164), "SECURITY", "System.Security.Cryptography.SHA256.Create()", paramObjs, typeof(System.Security.Cryptography.SHA256), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.SHA256)retValue;
		}

		public static System.Security.Cryptography.SHA256 Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.String hashName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = hashName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1165), "SECURITY", "System.Security.Cryptography.SHA256.Create(String)", paramObjs, typeof(System.Security.Cryptography.SHA256), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.SHA256)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1166), "SECURITY", "System.Security.Cryptography.SHA256.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.SHA256Managed")]
	public class HandlerClass110
	{
		// System.Security.Cryptography.SHA256Managed.Initialize
		private static bool CallerMethod1167(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SHA256Managed..ctor
		private static bool CallerMethod1168(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Initialize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1167), "SECURITY", "System.Security.Cryptography.SHA256Managed.Initialize()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1168), "SECURITY", "System.Security.Cryptography.SHA256Managed.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.SHA384")]
	public class HandlerClass111
	{
		// System.Security.Cryptography.SHA384.Create
		private static bool CallerMethod1169(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SHA384.Create
		private static bool CallerMethod1170(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SHA384..ctor
		private static bool CallerMethod1171(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Security.Cryptography.SHA384 Create(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1169), "SECURITY", "System.Security.Cryptography.SHA384.Create()", paramObjs, typeof(System.Security.Cryptography.SHA384), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.SHA384)retValue;
		}

		public static System.Security.Cryptography.SHA384 Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.String hashName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = hashName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1170), "SECURITY", "System.Security.Cryptography.SHA384.Create(String)", paramObjs, typeof(System.Security.Cryptography.SHA384), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.SHA384)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1171), "SECURITY", "System.Security.Cryptography.SHA384.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.SHA384Managed")]
	public class HandlerClass112
	{
		// System.Security.Cryptography.SHA384Managed.Initialize
		private static bool CallerMethod1172(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SHA384Managed..ctor
		private static bool CallerMethod1173(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Initialize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1172), "SECURITY", "System.Security.Cryptography.SHA384Managed.Initialize()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1173), "SECURITY", "System.Security.Cryptography.SHA384Managed.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.SHA512")]
	public class HandlerClass113
	{
		// System.Security.Cryptography.SHA512.Create
		private static bool CallerMethod1174(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SHA512.Create
		private static bool CallerMethod1175(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SHA512..ctor
		private static bool CallerMethod1176(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Security.Cryptography.SHA512 Create(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1174), "SECURITY", "System.Security.Cryptography.SHA512.Create()", paramObjs, typeof(System.Security.Cryptography.SHA512), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.SHA512)retValue;
		}

		public static System.Security.Cryptography.SHA512 Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.String hashName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = hashName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1175), "SECURITY", "System.Security.Cryptography.SHA512.Create(String)", paramObjs, typeof(System.Security.Cryptography.SHA512), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.SHA512)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1176), "SECURITY", "System.Security.Cryptography.SHA512.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.SHA512Managed")]
	public class HandlerClass114
	{
		// System.Security.Cryptography.SHA512Managed.Initialize
		private static bool CallerMethod1177(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SHA512Managed..ctor
		private static bool CallerMethod1178(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Initialize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1177), "SECURITY", "System.Security.Cryptography.SHA512Managed.Initialize()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1178), "SECURITY", "System.Security.Cryptography.SHA512Managed.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.SignatureDescription")]
	public class HandlerClass115
	{
		// System.Security.Cryptography.SignatureDescription.CreateDigest
		private static bool CallerMethod1179(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SignatureDescription.CreateFormatter
		private static bool CallerMethod1180(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SignatureDescription.CreateDeformatter
		private static bool CallerMethod1181(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SignatureDescription.get_KeyAlgorithm
		private static bool CallerMethod1182(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SignatureDescription.set_KeyAlgorithm
		private static bool CallerMethod1183(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SignatureDescription.get_DigestAlgorithm
		private static bool CallerMethod1184(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SignatureDescription.set_DigestAlgorithm
		private static bool CallerMethod1185(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SignatureDescription.get_FormatterAlgorithm
		private static bool CallerMethod1186(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SignatureDescription.set_FormatterAlgorithm
		private static bool CallerMethod1187(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SignatureDescription.get_DeformatterAlgorithm
		private static bool CallerMethod1188(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SignatureDescription.set_DeformatterAlgorithm
		private static bool CallerMethod1189(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SignatureDescription..ctor
		private static bool CallerMethod1190(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.SignatureDescription..ctor
		private static bool CallerMethod1191(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Security.Cryptography.HashAlgorithm CreateDigest(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1179), "SECURITY", "System.Security.Cryptography.SignatureDescription.CreateDigest()", paramObjs, typeof(System.Security.Cryptography.HashAlgorithm), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.HashAlgorithm)retValue;
		}

		public static System.Security.Cryptography.AsymmetricSignatureFormatter CreateFormatter(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.AsymmetricAlgorithm key)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = key;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1180), "SECURITY", "System.Security.Cryptography.SignatureDescription.CreateFormatter(AsymmetricAlgorithm)", paramObjs, typeof(System.Security.Cryptography.AsymmetricSignatureFormatter), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.AsymmetricSignatureFormatter)retValue;
		}

		public static System.Security.Cryptography.AsymmetricSignatureDeformatter CreateDeformatter(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Cryptography.AsymmetricAlgorithm key)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = key;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1181), "SECURITY", "System.Security.Cryptography.SignatureDescription.CreateDeformatter(AsymmetricAlgorithm)", paramObjs, typeof(System.Security.Cryptography.AsymmetricSignatureDeformatter), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.AsymmetricSignatureDeformatter)retValue;
		}

		public static System.String get_KeyAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1182), "SECURITY", "System.Security.Cryptography.SignatureDescription.get_KeyAlgorithm()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_KeyAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1183), "SECURITY", "System.Security.Cryptography.SignatureDescription.set_KeyAlgorithm(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_DigestAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1184), "SECURITY", "System.Security.Cryptography.SignatureDescription.get_DigestAlgorithm()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_DigestAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1185), "SECURITY", "System.Security.Cryptography.SignatureDescription.set_DigestAlgorithm(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_FormatterAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1186), "SECURITY", "System.Security.Cryptography.SignatureDescription.get_FormatterAlgorithm()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_FormatterAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1187), "SECURITY", "System.Security.Cryptography.SignatureDescription.set_FormatterAlgorithm(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_DeformatterAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1188), "SECURITY", "System.Security.Cryptography.SignatureDescription.get_DeformatterAlgorithm()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void set_DeformatterAlgorithm(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1189), "SECURITY", "System.Security.Cryptography.SignatureDescription.set_DeformatterAlgorithm(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1190), "SECURITY", "System.Security.Cryptography.SignatureDescription.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Security.SecurityElement el)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = el;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1191), "SECURITY", "System.Security.Cryptography.SignatureDescription.ctor(SecurityElement)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.TripleDES")]
	public class HandlerClass116
	{
		// System.Security.Cryptography.TripleDES.set_Key
		private static bool CallerMethod1192(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.TripleDES.get_Key
		private static bool CallerMethod1193(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.TripleDES.Create
		private static bool CallerMethod1194(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.TripleDES.Create
		private static bool CallerMethod1195(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.TripleDES.IsWeakKey
		private static bool CallerMethod1196(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.TripleDES..ctor
		private static bool CallerMethod1197(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void set_Key(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1192), "SECURITY", "System.Security.Cryptography.TripleDES.set_Key(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Byte[] get_Key(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1193), "SECURITY", "System.Security.Cryptography.TripleDES.get_Key()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Security.Cryptography.TripleDES Create(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1194), "SECURITY", "System.Security.Cryptography.TripleDES.Create()", paramObjs, typeof(System.Security.Cryptography.TripleDES), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.TripleDES)retValue;
		}

		public static System.Security.Cryptography.TripleDES Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.String str)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = str;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1195), "SECURITY", "System.Security.Cryptography.TripleDES.Create(String)", paramObjs, typeof(System.Security.Cryptography.TripleDES), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.TripleDES)retValue;
		}

		public static System.Boolean IsWeakKey(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbKey)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbKey;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1196), "SECURITY", "System.Security.Cryptography.TripleDES.IsWeakKey(Byte[])", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1197), "SECURITY", "System.Security.Cryptography.TripleDES.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Security.Cryptography.TripleDESCryptoServiceProvider")]
	public class HandlerClass117
	{
		// System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateIV
		private static bool CallerMethod1198(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateKey
		private static bool CallerMethod1199(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateDecryptor
		private static bool CallerMethod1200(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateEncryptor
		private static bool CallerMethod1201(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Security.Cryptography.TripleDESCryptoServiceProvider..ctor
		private static bool CallerMethod1202(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void GenerateIV(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1198), "SECURITY", "System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateIV()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void GenerateKey(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1199), "SECURITY", "System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateKey()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Security.Cryptography.ICryptoTransform CreateDecryptor(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbKey, System.Byte[] rgbIV)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbKey;
			paramObjs[2] = rgbIV;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1200), "SECURITY", "System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateDecryptor(Byte[], Byte[])", paramObjs, typeof(System.Security.Cryptography.ICryptoTransform), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.ICryptoTransform)retValue;
		}

		public static System.Security.Cryptography.ICryptoTransform CreateEncryptor(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] rgbKey, System.Byte[] rgbIV)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = rgbKey;
			paramObjs[2] = rgbIV;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1201), "SECURITY", "System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateEncryptor(Byte[], Byte[])", paramObjs, typeof(System.Security.Cryptography.ICryptoTransform), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Security.Cryptography.ICryptoTransform)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1202), "SECURITY", "System.Security.Cryptography.TripleDESCryptoServiceProvider.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.BinaryReader")]
	public class HandlerClass118
	{
		// System.IO.BinaryReader.ReadBytes
		private static bool CallerMethod1203(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader.Read
		private static bool CallerMethod1204(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader.ReadChars
		private static bool CallerMethod1205(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader.Read
		private static bool CallerMethod1206(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader.ReadString
		private static bool CallerMethod1207(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader.ReadDecimal
		private static bool CallerMethod1208(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader.ReadDouble
		private static bool CallerMethod1209(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader.ReadSingle
		private static bool CallerMethod1210(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader.ReadUInt64
		private static bool CallerMethod1211(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader.ReadInt64
		private static bool CallerMethod1212(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader.ReadUInt32
		private static bool CallerMethod1213(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader.ReadInt32
		private static bool CallerMethod1214(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader.ReadUInt16
		private static bool CallerMethod1215(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader.ReadInt16
		private static bool CallerMethod1216(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader.ReadChar
		private static bool CallerMethod1217(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader.ReadSByte
		private static bool CallerMethod1218(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader.ReadByte
		private static bool CallerMethod1219(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader.ReadBoolean
		private static bool CallerMethod1220(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader.Read
		private static bool CallerMethod1221(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader.PeekChar
		private static bool CallerMethod1222(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader.Close
		private static bool CallerMethod1223(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader.get_BaseStream
		private static bool CallerMethod1224(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader..ctor
		private static bool CallerMethod1225(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryReader..ctor
		private static bool CallerMethod1226(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Byte[] ReadBytes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1203), "FILE", "System.IO.BinaryReader.ReadBytes(Int32)", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Int32 Read(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 index, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = index;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1204), "FILE", "System.IO.BinaryReader.Read(Byte[], Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Char[] ReadChars(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1205), "FILE", "System.IO.BinaryReader.ReadChars(Int32)", paramObjs, typeof(System.Char[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Char[])retValue;
		}

		public static System.Int32 Read(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char[] buffer, System.Int32 index, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = index;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1206), "FILE", "System.IO.BinaryReader.Read(Char[], Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String ReadString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1207), "FILE", "System.IO.BinaryReader.ReadString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Decimal ReadDecimal(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1208), "FILE", "System.IO.BinaryReader.ReadDecimal()", paramObjs, typeof(System.Decimal), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Decimal)retValue;
		}

		public static System.Double ReadDouble(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1209), "FILE", "System.IO.BinaryReader.ReadDouble()", paramObjs, typeof(System.Double), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Double)retValue;
		}

		public static System.Single ReadSingle(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1210), "FILE", "System.IO.BinaryReader.ReadSingle()", paramObjs, typeof(System.Single), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Single)retValue;
		}

		public static System.UInt64 ReadUInt64(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1211), "FILE", "System.IO.BinaryReader.ReadUInt64()", paramObjs, typeof(System.UInt64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.UInt64)retValue;
		}

		public static System.Int64 ReadInt64(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1212), "FILE", "System.IO.BinaryReader.ReadInt64()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.UInt32 ReadUInt32(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1213), "FILE", "System.IO.BinaryReader.ReadUInt32()", paramObjs, typeof(System.UInt32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.UInt32)retValue;
		}

		public static System.Int32 ReadInt32(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1214), "FILE", "System.IO.BinaryReader.ReadInt32()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.UInt16 ReadUInt16(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1215), "FILE", "System.IO.BinaryReader.ReadUInt16()", paramObjs, typeof(System.UInt16), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.UInt16)retValue;
		}

		public static System.Int16 ReadInt16(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1216), "FILE", "System.IO.BinaryReader.ReadInt16()", paramObjs, typeof(System.Int16), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int16)retValue;
		}

		public static System.Char ReadChar(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1217), "FILE", "System.IO.BinaryReader.ReadChar()", paramObjs, typeof(System.Char), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Char)retValue;
		}

		public static System.SByte ReadSByte(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1218), "FILE", "System.IO.BinaryReader.ReadSByte()", paramObjs, typeof(System.SByte), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.SByte)retValue;
		}

		public static System.Byte ReadByte(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1219), "FILE", "System.IO.BinaryReader.ReadByte()", paramObjs, typeof(System.Byte), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte)retValue;
		}

		public static System.Boolean ReadBoolean(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1220), "FILE", "System.IO.BinaryReader.ReadBoolean()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Int32 Read(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1221), "FILE", "System.IO.BinaryReader.Read()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 PeekChar(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1222), "FILE", "System.IO.BinaryReader.PeekChar()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1223), "FILE", "System.IO.BinaryReader.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IO.Stream get_BaseStream(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1224), "FILE", "System.IO.BinaryReader.get_BaseStream()", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream input)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = input;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1225), "FILE", "System.IO.BinaryReader.ctor(Stream)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream input, System.Text.Encoding encoding)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = input;
			paramObjs[2] = encoding;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1226), "FILE", "System.IO.BinaryReader.ctor(Stream, Encoding)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.BinaryWriter")]
	public class HandlerClass119
	{
		// System.IO.BinaryWriter.Write
		private static bool CallerMethod1227(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter.Write
		private static bool CallerMethod1228(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter.Write
		private static bool CallerMethod1229(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter.Write
		private static bool CallerMethod1230(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter.Write
		private static bool CallerMethod1231(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter.Write
		private static bool CallerMethod1232(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter.Write
		private static bool CallerMethod1233(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter.Write
		private static bool CallerMethod1234(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter.Write
		private static bool CallerMethod1235(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter.Write
		private static bool CallerMethod1236(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter.Write
		private static bool CallerMethod1237(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter.Write
		private static bool CallerMethod1238(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter.Write
		private static bool CallerMethod1239(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter.Write
		private static bool CallerMethod1240(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter.Write
		private static bool CallerMethod1241(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter.Write
		private static bool CallerMethod1242(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter.Write
		private static bool CallerMethod1243(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter.Write
		private static bool CallerMethod1244(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter.Seek
		private static bool CallerMethod1245(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter.Flush
		private static bool CallerMethod1246(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter.get_BaseStream
		private static bool CallerMethod1247(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter.Close
		private static bool CallerMethod1248(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter..ctor
		private static bool CallerMethod1249(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BinaryWriter..ctor
		private static bool CallerMethod1250(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1227), "FILE", "System.IO.BinaryWriter.Write(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Single value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1228), "FILE", "System.IO.BinaryWriter.Write(Single)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.UInt64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1229), "FILE", "System.IO.BinaryWriter.Write(UInt64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1230), "FILE", "System.IO.BinaryWriter.Write(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.UInt32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1231), "FILE", "System.IO.BinaryWriter.Write(UInt32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1232), "FILE", "System.IO.BinaryWriter.Write(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.UInt16 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1233), "FILE", "System.IO.BinaryWriter.Write(UInt16)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int16 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1234), "FILE", "System.IO.BinaryWriter.Write(Int16)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Decimal value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1235), "FILE", "System.IO.BinaryWriter.Write(Decimal)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Double value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1236), "FILE", "System.IO.BinaryWriter.Write(Double)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char[] chars, System.Int32 index, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = chars;
			paramObjs[2] = index;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1237), "FILE", "System.IO.BinaryWriter.Write(Char[], Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char[] chars)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = chars;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1238), "FILE", "System.IO.BinaryWriter.Write(Char[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char ch)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = ch;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1239), "FILE", "System.IO.BinaryWriter.Write(Char)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 index, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = index;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1240), "FILE", "System.IO.BinaryWriter.Write(Byte[], Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1241), "FILE", "System.IO.BinaryWriter.Write(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.SByte value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1242), "FILE", "System.IO.BinaryWriter.Write(SByte)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1243), "FILE", "System.IO.BinaryWriter.Write(Byte)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1244), "FILE", "System.IO.BinaryWriter.Write(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int64 Seek(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 offset, System.IO.SeekOrigin origin)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = offset;
			paramObjs[2] = origin;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1245), "FILE", "System.IO.BinaryWriter.Seek(Int32, SeekOrigin)", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static void Flush(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1246), "FILE", "System.IO.BinaryWriter.Flush()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IO.Stream get_BaseStream(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1247), "FILE", "System.IO.BinaryWriter.get_BaseStream()", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1248), "FILE", "System.IO.BinaryWriter.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream output)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = output;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1249), "FILE", "System.IO.BinaryWriter.ctor(Stream)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream output, System.Text.Encoding encoding)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = output;
			paramObjs[2] = encoding;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1250), "FILE", "System.IO.BinaryWriter.ctor(Stream, Encoding)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.BufferedStream")]
	public class HandlerClass120
	{
		// System.IO.BufferedStream.WriteByte
		private static bool CallerMethod1251(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BufferedStream.Write
		private static bool CallerMethod1252(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BufferedStream.ReadByte
		private static bool CallerMethod1253(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BufferedStream.Read
		private static bool CallerMethod1254(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BufferedStream.SetLength
		private static bool CallerMethod1255(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BufferedStream.Seek
		private static bool CallerMethod1256(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BufferedStream.Flush
		private static bool CallerMethod1257(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BufferedStream.Close
		private static bool CallerMethod1258(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BufferedStream.set_Position
		private static bool CallerMethod1259(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BufferedStream.get_Position
		private static bool CallerMethod1260(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BufferedStream.get_Length
		private static bool CallerMethod1261(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BufferedStream.get_CanWrite
		private static bool CallerMethod1262(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BufferedStream.get_CanSeek
		private static bool CallerMethod1263(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BufferedStream.get_CanRead
		private static bool CallerMethod1264(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BufferedStream..ctor
		private static bool CallerMethod1265(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.BufferedStream..ctor
		private static bool CallerMethod1266(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void WriteByte(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1251), "FILE", "System.IO.BufferedStream.WriteByte(Byte)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] array, System.Int32 offset, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = offset;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1252), "FILE", "System.IO.BufferedStream.Write(Byte[], Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 ReadByte(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1253), "FILE", "System.IO.BufferedStream.ReadByte()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Read(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] array, System.Int32 offset, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = offset;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1254), "FILE", "System.IO.BufferedStream.Read(Byte[], Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void SetLength(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1255), "FILE", "System.IO.BufferedStream.SetLength(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int64 Seek(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 offset, System.IO.SeekOrigin origin)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = offset;
			paramObjs[2] = origin;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1256), "FILE", "System.IO.BufferedStream.Seek(Int64, SeekOrigin)", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static void Flush(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1257), "FILE", "System.IO.BufferedStream.Flush()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1258), "FILE", "System.IO.BufferedStream.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_Position(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1259), "FILE", "System.IO.BufferedStream.set_Position(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int64 get_Position(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1260), "FILE", "System.IO.BufferedStream.get_Position()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.Int64 get_Length(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1261), "FILE", "System.IO.BufferedStream.get_Length()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.Boolean get_CanWrite(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1262), "FILE", "System.IO.BufferedStream.get_CanWrite()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_CanSeek(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1263), "FILE", "System.IO.BufferedStream.get_CanSeek()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_CanRead(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1264), "FILE", "System.IO.BufferedStream.get_CanRead()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream stream)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = stream;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1265), "FILE", "System.IO.BufferedStream.ctor(Stream)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream stream, System.Int32 bufferSize)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = stream;
			paramObjs[2] = bufferSize;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1266), "FILE", "System.IO.BufferedStream.ctor(Stream, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.Directory")]
	public class HandlerClass121
	{
		// System.IO.Directory.GetParent
		private static bool CallerMethod1267(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.CreateDirectory
		private static bool CallerMethod1268(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.Exists
		private static bool CallerMethod1269(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.SetCreationTime
		private static bool CallerMethod1270(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.SetCreationTimeUtc
		private static bool CallerMethod1271(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.GetCreationTime
		private static bool CallerMethod1272(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.GetCreationTimeUtc
		private static bool CallerMethod1273(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.SetLastWriteTime
		private static bool CallerMethod1274(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.SetLastWriteTimeUtc
		private static bool CallerMethod1275(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.GetLastWriteTime
		private static bool CallerMethod1276(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.GetLastWriteTimeUtc
		private static bool CallerMethod1277(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.SetLastAccessTime
		private static bool CallerMethod1278(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.SetLastAccessTimeUtc
		private static bool CallerMethod1279(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.GetLastAccessTime
		private static bool CallerMethod1280(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.GetLastAccessTimeUtc
		private static bool CallerMethod1281(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.GetFiles
		private static bool CallerMethod1282(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.GetFiles
		private static bool CallerMethod1283(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.GetDirectories
		private static bool CallerMethod1284(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.GetDirectories
		private static bool CallerMethod1285(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.GetFileSystemEntries
		private static bool CallerMethod1286(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.GetFileSystemEntries
		private static bool CallerMethod1287(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.GetLogicalDrives
		private static bool CallerMethod1288(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.GetDirectoryRoot
		private static bool CallerMethod1289(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.GetCurrentDirectory
		private static bool CallerMethod1290(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.SetCurrentDirectory
		private static bool CallerMethod1291(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.Move
		private static bool CallerMethod1292(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.Delete
		private static bool CallerMethod1293(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Directory.Delete
		private static bool CallerMethod1294(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.IO.DirectoryInfo GetParent(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1267), "FILE", "System.IO.Directory.GetParent(String)", paramObjs, typeof(System.IO.DirectoryInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.DirectoryInfo)retValue;
		}

		public static System.IO.DirectoryInfo CreateDirectory(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1268), "FILE", "System.IO.Directory.CreateDirectory(String)", paramObjs, typeof(System.IO.DirectoryInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.DirectoryInfo)retValue;
		}

		public static System.Boolean Exists(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1269), "FILE", "System.IO.Directory.Exists(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void SetCreationTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.DateTime creationTime)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = creationTime;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1270), "FILE", "System.IO.Directory.SetCreationTime(String, DateTime)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetCreationTimeUtc(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.DateTime creationTimeUtc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = creationTimeUtc;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1271), "FILE", "System.IO.Directory.SetCreationTimeUtc(String, DateTime)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.DateTime GetCreationTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1272), "FILE", "System.IO.Directory.GetCreationTime(String)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime GetCreationTimeUtc(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1273), "FILE", "System.IO.Directory.GetCreationTimeUtc(String)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static void SetLastWriteTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.DateTime lastWriteTime)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = lastWriteTime;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1274), "FILE", "System.IO.Directory.SetLastWriteTime(String, DateTime)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetLastWriteTimeUtc(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.DateTime lastWriteTimeUtc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = lastWriteTimeUtc;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1275), "FILE", "System.IO.Directory.SetLastWriteTimeUtc(String, DateTime)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.DateTime GetLastWriteTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1276), "FILE", "System.IO.Directory.GetLastWriteTime(String)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime GetLastWriteTimeUtc(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1277), "FILE", "System.IO.Directory.GetLastWriteTimeUtc(String)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static void SetLastAccessTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.DateTime lastAccessTime)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = lastAccessTime;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1278), "FILE", "System.IO.Directory.SetLastAccessTime(String, DateTime)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetLastAccessTimeUtc(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.DateTime lastAccessTimeUtc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = lastAccessTimeUtc;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1279), "FILE", "System.IO.Directory.SetLastAccessTimeUtc(String, DateTime)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.DateTime GetLastAccessTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1280), "FILE", "System.IO.Directory.GetLastAccessTime(String)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime GetLastAccessTimeUtc(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1281), "FILE", "System.IO.Directory.GetLastAccessTimeUtc(String)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.String[] GetFiles(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1282), "FILE", "System.IO.Directory.GetFiles(String)", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.String[] GetFiles(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.String searchPattern)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = searchPattern;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1283), "FILE", "System.IO.Directory.GetFiles(String, String)", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.String[] GetDirectories(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1284), "FILE", "System.IO.Directory.GetDirectories(String)", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.String[] GetDirectories(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.String searchPattern)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = searchPattern;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1285), "FILE", "System.IO.Directory.GetDirectories(String, String)", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.String[] GetFileSystemEntries(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1286), "FILE", "System.IO.Directory.GetFileSystemEntries(String)", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.String[] GetFileSystemEntries(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.String searchPattern)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = searchPattern;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1287), "FILE", "System.IO.Directory.GetFileSystemEntries(String, String)", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.String[] GetLogicalDrives(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1288), "FILE", "System.IO.Directory.GetLogicalDrives()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.String GetDirectoryRoot(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1289), "FILE", "System.IO.Directory.GetDirectoryRoot(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetCurrentDirectory(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1290), "FILE", "System.IO.Directory.GetCurrentDirectory()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void SetCurrentDirectory(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1291), "FILE", "System.IO.Directory.SetCurrentDirectory(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Move(HeatDotNet.MethodInterceptInfo methodIntercept, System.String sourceDirName, System.String destDirName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = sourceDirName;
			paramObjs[2] = destDirName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1292), "FILE", "System.IO.Directory.Move(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Delete(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1293), "FILE", "System.IO.Directory.Delete(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Delete(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.Boolean recursive)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = recursive;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1294), "FILE", "System.IO.Directory.Delete(String, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.FileSystemInfo")]
	public class HandlerClass122
	{
		// System.IO.FileSystemInfo.GetObjectData
		private static bool CallerMethod1295(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemInfo.get_FullName
		private static bool CallerMethod1296(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemInfo.get_Extension
		private static bool CallerMethod1297(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemInfo.get_CreationTime
		private static bool CallerMethod1298(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemInfo.set_CreationTime
		private static bool CallerMethod1299(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemInfo.get_CreationTimeUtc
		private static bool CallerMethod1300(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemInfo.set_CreationTimeUtc
		private static bool CallerMethod1301(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemInfo.get_LastAccessTime
		private static bool CallerMethod1302(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemInfo.set_LastAccessTime
		private static bool CallerMethod1303(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemInfo.get_LastAccessTimeUtc
		private static bool CallerMethod1304(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemInfo.set_LastAccessTimeUtc
		private static bool CallerMethod1305(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemInfo.get_LastWriteTime
		private static bool CallerMethod1306(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemInfo.set_LastWriteTime
		private static bool CallerMethod1307(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemInfo.get_LastWriteTimeUtc
		private static bool CallerMethod1308(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemInfo.set_LastWriteTimeUtc
		private static bool CallerMethod1309(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemInfo.Refresh
		private static bool CallerMethod1310(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemInfo.get_Attributes
		private static bool CallerMethod1311(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileSystemInfo.set_Attributes
		private static bool CallerMethod1312(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void GetObjectData(HeatDotNet.MethodInterceptInfo methodIntercept, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = info;
			paramObjs[2] = context;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1295), "FILE", "System.IO.FileSystemInfo.GetObjectData(SerializationInfo, StreamingContext)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_FullName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1296), "FILE", "System.IO.FileSystemInfo.get_FullName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Extension(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1297), "FILE", "System.IO.FileSystemInfo.get_Extension()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.DateTime get_CreationTime(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1298), "FILE", "System.IO.FileSystemInfo.get_CreationTime()", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static void set_CreationTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1299), "FILE", "System.IO.FileSystemInfo.set_CreationTime(DateTime)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.DateTime get_CreationTimeUtc(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1300), "FILE", "System.IO.FileSystemInfo.get_CreationTimeUtc()", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static void set_CreationTimeUtc(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1301), "FILE", "System.IO.FileSystemInfo.set_CreationTimeUtc(DateTime)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.DateTime get_LastAccessTime(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1302), "FILE", "System.IO.FileSystemInfo.get_LastAccessTime()", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static void set_LastAccessTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1303), "FILE", "System.IO.FileSystemInfo.set_LastAccessTime(DateTime)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.DateTime get_LastAccessTimeUtc(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1304), "FILE", "System.IO.FileSystemInfo.get_LastAccessTimeUtc()", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static void set_LastAccessTimeUtc(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1305), "FILE", "System.IO.FileSystemInfo.set_LastAccessTimeUtc(DateTime)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.DateTime get_LastWriteTime(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1306), "FILE", "System.IO.FileSystemInfo.get_LastWriteTime()", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static void set_LastWriteTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1307), "FILE", "System.IO.FileSystemInfo.set_LastWriteTime(DateTime)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.DateTime get_LastWriteTimeUtc(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1308), "FILE", "System.IO.FileSystemInfo.get_LastWriteTimeUtc()", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static void set_LastWriteTimeUtc(HeatDotNet.MethodInterceptInfo methodIntercept, System.DateTime value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1309), "FILE", "System.IO.FileSystemInfo.set_LastWriteTimeUtc(DateTime)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Refresh(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1310), "FILE", "System.IO.FileSystemInfo.Refresh()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IO.FileAttributes get_Attributes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1311), "FILE", "System.IO.FileSystemInfo.get_Attributes()", paramObjs, typeof(System.IO.FileAttributes), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileAttributes)retValue;
		}

		public static void set_Attributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.FileAttributes value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1312), "FILE", "System.IO.FileSystemInfo.set_Attributes(FileAttributes)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.DirectoryInfo")]
	public class HandlerClass123
	{
		// System.IO.DirectoryInfo.Delete
		private static bool CallerMethod1313(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.DirectoryInfo.get_Exists
		private static bool CallerMethod1314(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.DirectoryInfo.get_Name
		private static bool CallerMethod1315(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.DirectoryInfo.ToString
		private static bool CallerMethod1316(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.DirectoryInfo.get_Parent
		private static bool CallerMethod1317(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.DirectoryInfo.CreateSubdirectory
		private static bool CallerMethod1318(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.DirectoryInfo.Create
		private static bool CallerMethod1319(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.DirectoryInfo.GetFiles
		private static bool CallerMethod1320(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.DirectoryInfo.GetFiles
		private static bool CallerMethod1321(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.DirectoryInfo.GetDirectories
		private static bool CallerMethod1322(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.DirectoryInfo.GetFileSystemInfos
		private static bool CallerMethod1323(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.DirectoryInfo.GetFileSystemInfos
		private static bool CallerMethod1324(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.DirectoryInfo.GetDirectories
		private static bool CallerMethod1325(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.DirectoryInfo.get_Root
		private static bool CallerMethod1326(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.DirectoryInfo.MoveTo
		private static bool CallerMethod1327(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.DirectoryInfo.Delete
		private static bool CallerMethod1328(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.DirectoryInfo..ctor
		private static bool CallerMethod1329(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Delete(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1313), "FILE", "System.IO.DirectoryInfo.Delete()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_Exists(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1314), "FILE", "System.IO.DirectoryInfo.get_Exists()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1315), "FILE", "System.IO.DirectoryInfo.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1316), "FILE", "System.IO.DirectoryInfo.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.IO.DirectoryInfo get_Parent(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1317), "FILE", "System.IO.DirectoryInfo.get_Parent()", paramObjs, typeof(System.IO.DirectoryInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.DirectoryInfo)retValue;
		}

		public static System.IO.DirectoryInfo CreateSubdirectory(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1318), "FILE", "System.IO.DirectoryInfo.CreateSubdirectory(String)", paramObjs, typeof(System.IO.DirectoryInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.DirectoryInfo)retValue;
		}

		public static void Create(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1319), "FILE", "System.IO.DirectoryInfo.Create()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IO.FileInfo[] GetFiles(HeatDotNet.MethodInterceptInfo methodIntercept, System.String searchPattern)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = searchPattern;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1320), "FILE", "System.IO.DirectoryInfo.GetFiles(String)", paramObjs, typeof(System.IO.FileInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileInfo[])retValue;
		}

		public static System.IO.FileInfo[] GetFiles(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1321), "FILE", "System.IO.DirectoryInfo.GetFiles()", paramObjs, typeof(System.IO.FileInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileInfo[])retValue;
		}

		public static System.IO.DirectoryInfo[] GetDirectories(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1322), "FILE", "System.IO.DirectoryInfo.GetDirectories()", paramObjs, typeof(System.IO.DirectoryInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.DirectoryInfo[])retValue;
		}

		public static System.IO.FileSystemInfo[] GetFileSystemInfos(HeatDotNet.MethodInterceptInfo methodIntercept, System.String searchPattern)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = searchPattern;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1323), "FILE", "System.IO.DirectoryInfo.GetFileSystemInfos(String)", paramObjs, typeof(System.IO.FileSystemInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileSystemInfo[])retValue;
		}

		public static System.IO.FileSystemInfo[] GetFileSystemInfos(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1324), "FILE", "System.IO.DirectoryInfo.GetFileSystemInfos()", paramObjs, typeof(System.IO.FileSystemInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileSystemInfo[])retValue;
		}

		public static System.IO.DirectoryInfo[] GetDirectories(HeatDotNet.MethodInterceptInfo methodIntercept, System.String searchPattern)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = searchPattern;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1325), "FILE", "System.IO.DirectoryInfo.GetDirectories(String)", paramObjs, typeof(System.IO.DirectoryInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.DirectoryInfo[])retValue;
		}

		public static System.IO.DirectoryInfo get_Root(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1326), "FILE", "System.IO.DirectoryInfo.get_Root()", paramObjs, typeof(System.IO.DirectoryInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.DirectoryInfo)retValue;
		}

		public static void MoveTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.String destDirName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = destDirName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1327), "FILE", "System.IO.DirectoryInfo.MoveTo(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Delete(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean recursive)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = recursive;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1328), "FILE", "System.IO.DirectoryInfo.Delete(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1329), "FILE", "System.IO.DirectoryInfo.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.File")]
	public class HandlerClass124
	{
		// System.IO.File.OpenText
		private static bool CallerMethod1330(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.CreateText
		private static bool CallerMethod1331(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.AppendText
		private static bool CallerMethod1332(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.Copy
		private static bool CallerMethod1333(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.Copy
		private static bool CallerMethod1334(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.Create
		private static bool CallerMethod1335(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.Create
		private static bool CallerMethod1336(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.Delete
		private static bool CallerMethod1337(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.Exists
		private static bool CallerMethod1338(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.Open
		private static bool CallerMethod1339(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.Open
		private static bool CallerMethod1340(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.Open
		private static bool CallerMethod1341(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.SetCreationTime
		private static bool CallerMethod1342(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.SetCreationTimeUtc
		private static bool CallerMethod1343(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.GetCreationTime
		private static bool CallerMethod1344(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.GetCreationTimeUtc
		private static bool CallerMethod1345(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.SetLastAccessTime
		private static bool CallerMethod1346(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.SetLastAccessTimeUtc
		private static bool CallerMethod1347(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.GetLastAccessTime
		private static bool CallerMethod1348(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.GetLastAccessTimeUtc
		private static bool CallerMethod1349(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.SetLastWriteTime
		private static bool CallerMethod1350(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.SetLastWriteTimeUtc
		private static bool CallerMethod1351(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.GetLastWriteTime
		private static bool CallerMethod1352(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.GetLastWriteTimeUtc
		private static bool CallerMethod1353(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.GetAttributes
		private static bool CallerMethod1354(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.SetAttributes
		private static bool CallerMethod1355(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.OpenRead
		private static bool CallerMethod1356(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.OpenWrite
		private static bool CallerMethod1357(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.File.Move
		private static bool CallerMethod1358(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.IO.StreamReader OpenText(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1330), "FILE", "System.IO.File.OpenText(String)", paramObjs, typeof(System.IO.StreamReader), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.StreamReader)retValue;
		}

		public static System.IO.StreamWriter CreateText(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1331), "FILE", "System.IO.File.CreateText(String)", paramObjs, typeof(System.IO.StreamWriter), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.StreamWriter)retValue;
		}

		public static System.IO.StreamWriter AppendText(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1332), "FILE", "System.IO.File.AppendText(String)", paramObjs, typeof(System.IO.StreamWriter), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.StreamWriter)retValue;
		}

		public static void Copy(HeatDotNet.MethodInterceptInfo methodIntercept, System.String sourceFileName, System.String destFileName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = sourceFileName;
			paramObjs[2] = destFileName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1333), "FILE", "System.IO.File.Copy(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Copy(HeatDotNet.MethodInterceptInfo methodIntercept, System.String sourceFileName, System.String destFileName, System.Boolean overwrite)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = sourceFileName;
			paramObjs[2] = destFileName;
			paramObjs[3] = overwrite;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1334), "FILE", "System.IO.File.Copy(String, String, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IO.FileStream Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1335), "FILE", "System.IO.File.Create(String)", paramObjs, typeof(System.IO.FileStream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileStream)retValue;
		}

		public static System.IO.FileStream Create(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.Int32 bufferSize)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = bufferSize;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1336), "FILE", "System.IO.File.Create(String, Int32)", paramObjs, typeof(System.IO.FileStream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileStream)retValue;
		}

		public static void Delete(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1337), "FILE", "System.IO.File.Delete(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean Exists(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1338), "FILE", "System.IO.File.Exists(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.IO.FileStream Open(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.IO.FileMode mode)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = mode;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1339), "FILE", "System.IO.File.Open(String, FileMode)", paramObjs, typeof(System.IO.FileStream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileStream)retValue;
		}

		public static System.IO.FileStream Open(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.IO.FileMode mode, System.IO.FileAccess access)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = mode;
			paramObjs[3] = access;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1340), "FILE", "System.IO.File.Open(String, FileMode, FileAccess)", paramObjs, typeof(System.IO.FileStream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileStream)retValue;
		}

		public static System.IO.FileStream Open(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = mode;
			paramObjs[3] = access;
			paramObjs[4] = share;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1341), "FILE", "System.IO.File.Open(String, FileMode, FileAccess, FileShare)", paramObjs, typeof(System.IO.FileStream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileStream)retValue;
		}

		public static void SetCreationTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.DateTime creationTime)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = creationTime;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1342), "FILE", "System.IO.File.SetCreationTime(String, DateTime)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetCreationTimeUtc(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.DateTime creationTimeUtc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = creationTimeUtc;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1343), "FILE", "System.IO.File.SetCreationTimeUtc(String, DateTime)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.DateTime GetCreationTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1344), "FILE", "System.IO.File.GetCreationTime(String)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime GetCreationTimeUtc(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1345), "FILE", "System.IO.File.GetCreationTimeUtc(String)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static void SetLastAccessTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.DateTime lastAccessTime)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = lastAccessTime;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1346), "FILE", "System.IO.File.SetLastAccessTime(String, DateTime)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetLastAccessTimeUtc(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.DateTime lastAccessTimeUtc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = lastAccessTimeUtc;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1347), "FILE", "System.IO.File.SetLastAccessTimeUtc(String, DateTime)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.DateTime GetLastAccessTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1348), "FILE", "System.IO.File.GetLastAccessTime(String)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime GetLastAccessTimeUtc(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1349), "FILE", "System.IO.File.GetLastAccessTimeUtc(String)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static void SetLastWriteTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.DateTime lastWriteTime)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = lastWriteTime;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1350), "FILE", "System.IO.File.SetLastWriteTime(String, DateTime)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetLastWriteTimeUtc(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.DateTime lastWriteTimeUtc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = lastWriteTimeUtc;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1351), "FILE", "System.IO.File.SetLastWriteTimeUtc(String, DateTime)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.DateTime GetLastWriteTime(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1352), "FILE", "System.IO.File.GetLastWriteTime(String)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.DateTime GetLastWriteTimeUtc(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1353), "FILE", "System.IO.File.GetLastWriteTimeUtc(String)", paramObjs, typeof(System.DateTime), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.DateTime)retValue;
		}

		public static System.IO.FileAttributes GetAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1354), "FILE", "System.IO.File.GetAttributes(String)", paramObjs, typeof(System.IO.FileAttributes), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileAttributes)retValue;
		}

		public static void SetAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.IO.FileAttributes fileAttributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = fileAttributes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1355), "FILE", "System.IO.File.SetAttributes(String, FileAttributes)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IO.FileStream OpenRead(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1356), "FILE", "System.IO.File.OpenRead(String)", paramObjs, typeof(System.IO.FileStream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileStream)retValue;
		}

		public static System.IO.FileStream OpenWrite(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1357), "FILE", "System.IO.File.OpenWrite(String)", paramObjs, typeof(System.IO.FileStream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileStream)retValue;
		}

		public static void Move(HeatDotNet.MethodInterceptInfo methodIntercept, System.String sourceFileName, System.String destFileName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = sourceFileName;
			paramObjs[2] = destFileName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1358), "FILE", "System.IO.File.Move(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.FileInfo")]
	public class HandlerClass125
	{
		// System.IO.FileInfo.Delete
		private static bool CallerMethod1359(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileInfo.get_Exists
		private static bool CallerMethod1360(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileInfo.get_Name
		private static bool CallerMethod1361(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileInfo.ToString
		private static bool CallerMethod1362(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileInfo.get_Length
		private static bool CallerMethod1363(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileInfo.get_DirectoryName
		private static bool CallerMethod1364(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileInfo.get_Directory
		private static bool CallerMethod1365(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileInfo.OpenText
		private static bool CallerMethod1366(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileInfo.CreateText
		private static bool CallerMethod1367(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileInfo.AppendText
		private static bool CallerMethod1368(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileInfo.CopyTo
		private static bool CallerMethod1369(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileInfo.Create
		private static bool CallerMethod1370(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileInfo.CopyTo
		private static bool CallerMethod1371(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileInfo.Open
		private static bool CallerMethod1372(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileInfo.Open
		private static bool CallerMethod1373(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileInfo.Open
		private static bool CallerMethod1374(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileInfo.OpenRead
		private static bool CallerMethod1375(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileInfo.OpenWrite
		private static bool CallerMethod1376(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileInfo.MoveTo
		private static bool CallerMethod1377(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileInfo..ctor
		private static bool CallerMethod1378(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Delete(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1359), "FILE", "System.IO.FileInfo.Delete()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_Exists(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1360), "FILE", "System.IO.FileInfo.get_Exists()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1361), "FILE", "System.IO.FileInfo.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1362), "FILE", "System.IO.FileInfo.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int64 get_Length(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1363), "FILE", "System.IO.FileInfo.get_Length()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.String get_DirectoryName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1364), "FILE", "System.IO.FileInfo.get_DirectoryName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.IO.DirectoryInfo get_Directory(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1365), "FILE", "System.IO.FileInfo.get_Directory()", paramObjs, typeof(System.IO.DirectoryInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.DirectoryInfo)retValue;
		}

		public static System.IO.StreamReader OpenText(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1366), "FILE", "System.IO.FileInfo.OpenText()", paramObjs, typeof(System.IO.StreamReader), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.StreamReader)retValue;
		}

		public static System.IO.StreamWriter CreateText(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1367), "FILE", "System.IO.FileInfo.CreateText()", paramObjs, typeof(System.IO.StreamWriter), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.StreamWriter)retValue;
		}

		public static System.IO.StreamWriter AppendText(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1368), "FILE", "System.IO.FileInfo.AppendText()", paramObjs, typeof(System.IO.StreamWriter), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.StreamWriter)retValue;
		}

		public static System.IO.FileInfo CopyTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.String destFileName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = destFileName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1369), "FILE", "System.IO.FileInfo.CopyTo(String)", paramObjs, typeof(System.IO.FileInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileInfo)retValue;
		}

		public static System.IO.FileStream Create(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1370), "FILE", "System.IO.FileInfo.Create()", paramObjs, typeof(System.IO.FileStream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileStream)retValue;
		}

		public static System.IO.FileInfo CopyTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.String destFileName, System.Boolean overwrite)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = destFileName;
			paramObjs[2] = overwrite;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1371), "FILE", "System.IO.FileInfo.CopyTo(String, Boolean)", paramObjs, typeof(System.IO.FileInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileInfo)retValue;
		}

		public static System.IO.FileStream Open(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.FileMode mode)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = mode;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1372), "FILE", "System.IO.FileInfo.Open(FileMode)", paramObjs, typeof(System.IO.FileStream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileStream)retValue;
		}

		public static System.IO.FileStream Open(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.FileMode mode, System.IO.FileAccess access)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = mode;
			paramObjs[2] = access;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1373), "FILE", "System.IO.FileInfo.Open(FileMode, FileAccess)", paramObjs, typeof(System.IO.FileStream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileStream)retValue;
		}

		public static System.IO.FileStream Open(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = mode;
			paramObjs[2] = access;
			paramObjs[3] = share;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1374), "FILE", "System.IO.FileInfo.Open(FileMode, FileAccess, FileShare)", paramObjs, typeof(System.IO.FileStream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileStream)retValue;
		}

		public static System.IO.FileStream OpenRead(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1375), "FILE", "System.IO.FileInfo.OpenRead()", paramObjs, typeof(System.IO.FileStream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileStream)retValue;
		}

		public static System.IO.FileStream OpenWrite(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1376), "FILE", "System.IO.FileInfo.OpenWrite()", paramObjs, typeof(System.IO.FileStream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileStream)retValue;
		}

		public static void MoveTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.String destFileName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = destFileName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1377), "FILE", "System.IO.FileInfo.MoveTo(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String fileName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = fileName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1378), "FILE", "System.IO.FileInfo.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.FileStream")]
	public class HandlerClass126
	{
		// System.IO.FileStream.Unlock
		private static bool CallerMethod1379(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.Lock
		private static bool CallerMethod1380(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.get_Handle
		private static bool CallerMethod1381(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.get_IsAsync
		private static bool CallerMethod1382(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.WriteByte
		private static bool CallerMethod1383(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.Write
		private static bool CallerMethod1384(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.ReadByte
		private static bool CallerMethod1385(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.Read
		private static bool CallerMethod1386(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.SetLength
		private static bool CallerMethod1387(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.Seek
		private static bool CallerMethod1388(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.EndWrite
		private static bool CallerMethod1389(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.BeginWrite
		private static bool CallerMethod1390(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.EndRead
		private static bool CallerMethod1391(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.BeginRead
		private static bool CallerMethod1392(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.Flush
		private static bool CallerMethod1393(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.Close
		private static bool CallerMethod1394(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.set_Position
		private static bool CallerMethod1395(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.get_Position
		private static bool CallerMethod1396(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.get_Length
		private static bool CallerMethod1397(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.get_CanWrite
		private static bool CallerMethod1398(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.get_CanSeek
		private static bool CallerMethod1399(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.get_CanRead
		private static bool CallerMethod1400(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream.get_Name
		private static bool CallerMethod1401(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream..ctor
		private static bool CallerMethod1402(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream..ctor
		private static bool CallerMethod1403(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream..ctor
		private static bool CallerMethod1404(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream..ctor
		private static bool CallerMethod1405(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream..ctor
		private static bool CallerMethod1406(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 7) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream..ctor
		private static bool CallerMethod1407(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream..ctor
		private static bool CallerMethod1408(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream..ctor
		private static bool CallerMethod1409(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.FileStream..ctor
		private static bool CallerMethod1410(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Unlock(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 position, System.Int64 length)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = position;
			paramObjs[2] = length;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1379), "FILE", "System.IO.FileStream.Unlock(Int64, Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Lock(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 position, System.Int64 length)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = position;
			paramObjs[2] = length;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1380), "FILE", "System.IO.FileStream.Lock(Int64, Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IntPtr get_Handle(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1381), "FILE", "System.IO.FileStream.get_Handle()", paramObjs, typeof(System.IntPtr), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IntPtr)retValue;
		}

		public static System.Boolean get_IsAsync(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1382), "FILE", "System.IO.FileStream.get_IsAsync()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void WriteByte(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1383), "FILE", "System.IO.FileStream.WriteByte(Byte)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] array, System.Int32 offset, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = offset;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1384), "FILE", "System.IO.FileStream.Write(Byte[], Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 ReadByte(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1385), "FILE", "System.IO.FileStream.ReadByte()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Read(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] array, System.Int32 offset, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = offset;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1386), "FILE", "System.IO.FileStream.Read(Byte[], Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void SetLength(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1387), "FILE", "System.IO.FileStream.SetLength(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int64 Seek(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 offset, System.IO.SeekOrigin origin)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = offset;
			paramObjs[2] = origin;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1388), "FILE", "System.IO.FileStream.Seek(Int64, SeekOrigin)", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static void EndWrite(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1389), "FILE", "System.IO.FileStream.EndWrite(IAsyncResult)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IAsyncResult BeginWrite(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] array, System.Int32 offset, System.Int32 numBytes, System.AsyncCallback userCallback, System.Object stateObject)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = offset;
			paramObjs[3] = numBytes;
			paramObjs[4] = userCallback;
			paramObjs[5] = stateObject;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1390), "FILE", "System.IO.FileStream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static System.Int32 EndRead(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1391), "FILE", "System.IO.FileStream.EndRead(IAsyncResult)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.IAsyncResult BeginRead(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] array, System.Int32 offset, System.Int32 numBytes, System.AsyncCallback userCallback, System.Object stateObject)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = array;
			paramObjs[2] = offset;
			paramObjs[3] = numBytes;
			paramObjs[4] = userCallback;
			paramObjs[5] = stateObject;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1392), "FILE", "System.IO.FileStream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static void Flush(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1393), "FILE", "System.IO.FileStream.Flush()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1394), "FILE", "System.IO.FileStream.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_Position(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1395), "FILE", "System.IO.FileStream.set_Position(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int64 get_Position(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1396), "FILE", "System.IO.FileStream.get_Position()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.Int64 get_Length(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1397), "FILE", "System.IO.FileStream.get_Length()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.Boolean get_CanWrite(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1398), "FILE", "System.IO.FileStream.get_CanWrite()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_CanSeek(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1399), "FILE", "System.IO.FileStream.get_CanSeek()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_CanRead(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1400), "FILE", "System.IO.FileStream.get_CanRead()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1401), "FILE", "System.IO.FileStream.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path, System.IO.FileMode mode)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			paramObjs[2] = mode;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1402), "FILE", "System.IO.FileStream.ctor(String, FileMode)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path, System.IO.FileMode mode, System.IO.FileAccess access)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			paramObjs[2] = mode;
			paramObjs[3] = access;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1403), "FILE", "System.IO.FileStream.ctor(String, FileMode, FileAccess)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			paramObjs[2] = mode;
			paramObjs[3] = access;
			paramObjs[4] = share;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1404), "FILE", "System.IO.FileStream.ctor(String, FileMode, FileAccess, FileShare)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Int32 bufferSize)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			paramObjs[2] = mode;
			paramObjs[3] = access;
			paramObjs[4] = share;
			paramObjs[5] = bufferSize;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1405), "FILE", "System.IO.FileStream.ctor(String, FileMode, FileAccess, FileShare, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Int32 bufferSize, System.Boolean useAsync)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[7];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			paramObjs[2] = mode;
			paramObjs[3] = access;
			paramObjs[4] = share;
			paramObjs[5] = bufferSize;
			paramObjs[6] = useAsync;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1406), "FILE", "System.IO.FileStream.ctor(String, FileMode, FileAccess, FileShare, Int32, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IntPtr handle, System.IO.FileAccess access)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = handle;
			paramObjs[2] = access;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1407), "FILE", "System.IO.FileStream.ctor(IntPtr, FileAccess)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IntPtr handle, System.IO.FileAccess access, System.Boolean ownsHandle)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = handle;
			paramObjs[2] = access;
			paramObjs[3] = ownsHandle;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1408), "FILE", "System.IO.FileStream.ctor(IntPtr, FileAccess, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IntPtr handle, System.IO.FileAccess access, System.Boolean ownsHandle, System.Int32 bufferSize)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = handle;
			paramObjs[2] = access;
			paramObjs[3] = ownsHandle;
			paramObjs[4] = bufferSize;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1409), "FILE", "System.IO.FileStream.ctor(IntPtr, FileAccess, Boolean, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IntPtr handle, System.IO.FileAccess access, System.Boolean ownsHandle, System.Int32 bufferSize, System.Boolean isAsync)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = handle;
			paramObjs[2] = access;
			paramObjs[3] = ownsHandle;
			paramObjs[4] = bufferSize;
			paramObjs[5] = isAsync;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1410), "FILE", "System.IO.FileStream.ctor(IntPtr, FileAccess, Boolean, Int32, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.MemoryStream")]
	public class HandlerClass127
	{
		// System.IO.MemoryStream.WriteTo
		private static bool CallerMethod1411(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream.ToArray
		private static bool CallerMethod1412(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream.set_Capacity
		private static bool CallerMethod1413(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream.get_Capacity
		private static bool CallerMethod1414(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream.GetBuffer
		private static bool CallerMethod1415(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream.WriteByte
		private static bool CallerMethod1416(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream.Write
		private static bool CallerMethod1417(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream.ReadByte
		private static bool CallerMethod1418(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream.Read
		private static bool CallerMethod1419(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream.SetLength
		private static bool CallerMethod1420(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream.Seek
		private static bool CallerMethod1421(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream.Flush
		private static bool CallerMethod1422(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream.Close
		private static bool CallerMethod1423(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream.set_Position
		private static bool CallerMethod1424(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream.get_Position
		private static bool CallerMethod1425(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream.get_Length
		private static bool CallerMethod1426(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream.get_CanWrite
		private static bool CallerMethod1427(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream.get_CanSeek
		private static bool CallerMethod1428(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream.get_CanRead
		private static bool CallerMethod1429(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream..ctor
		private static bool CallerMethod1430(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream..ctor
		private static bool CallerMethod1431(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream..ctor
		private static bool CallerMethod1432(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream..ctor
		private static bool CallerMethod1433(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream..ctor
		private static bool CallerMethod1434(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream..ctor
		private static bool CallerMethod1435(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.MemoryStream..ctor
		private static bool CallerMethod1436(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void WriteTo(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.Stream stream)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = stream;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1411), "FILE", "System.IO.MemoryStream.WriteTo(Stream)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Byte[] ToArray(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1412), "FILE", "System.IO.MemoryStream.ToArray()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void set_Capacity(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1413), "FILE", "System.IO.MemoryStream.set_Capacity(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 get_Capacity(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1414), "FILE", "System.IO.MemoryStream.get_Capacity()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Byte[] GetBuffer(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1415), "FILE", "System.IO.MemoryStream.GetBuffer()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static void WriteByte(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1416), "FILE", "System.IO.MemoryStream.WriteByte(Byte)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1417), "FILE", "System.IO.MemoryStream.Write(Byte[], Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 ReadByte(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1418), "FILE", "System.IO.MemoryStream.ReadByte()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Read(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1419), "FILE", "System.IO.MemoryStream.Read(Byte[], Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void SetLength(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1420), "FILE", "System.IO.MemoryStream.SetLength(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int64 Seek(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 offset, System.IO.SeekOrigin loc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = offset;
			paramObjs[2] = loc;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1421), "FILE", "System.IO.MemoryStream.Seek(Int64, SeekOrigin)", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static void Flush(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1422), "FILE", "System.IO.MemoryStream.Flush()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1423), "FILE", "System.IO.MemoryStream.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_Position(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1424), "FILE", "System.IO.MemoryStream.set_Position(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int64 get_Position(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1425), "FILE", "System.IO.MemoryStream.get_Position()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.Int64 get_Length(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1426), "FILE", "System.IO.MemoryStream.get_Length()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.Boolean get_CanWrite(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1427), "FILE", "System.IO.MemoryStream.get_CanWrite()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_CanSeek(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1428), "FILE", "System.IO.MemoryStream.get_CanSeek()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_CanRead(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1429), "FILE", "System.IO.MemoryStream.get_CanRead()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1430), "FILE", "System.IO.MemoryStream.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Int32 capacity)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = capacity;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1431), "FILE", "System.IO.MemoryStream.ctor(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Byte[] buffer)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = buffer;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1432), "FILE", "System.IO.MemoryStream.ctor(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Byte[] buffer, System.Boolean writable)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = writable;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1433), "FILE", "System.IO.MemoryStream.ctor(Byte[], Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Byte[] buffer, System.Int32 index, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = index;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1434), "FILE", "System.IO.MemoryStream.ctor(Byte[], Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Byte[] buffer, System.Int32 index, System.Int32 count, System.Boolean writable)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = index;
			paramObjs[3] = count;
			paramObjs[4] = writable;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1435), "FILE", "System.IO.MemoryStream.ctor(Byte[], Int32, Int32, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Byte[] buffer, System.Int32 index, System.Int32 count, System.Boolean writable, System.Boolean publiclyVisible)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = index;
			paramObjs[3] = count;
			paramObjs[4] = writable;
			paramObjs[5] = publiclyVisible;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1436), "FILE", "System.IO.MemoryStream.ctor(Byte[], Int32, Int32, Boolean, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.Path")]
	public class HandlerClass128
	{
		// System.IO.Path.ChangeExtension
		private static bool CallerMethod1437(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Path.GetDirectoryName
		private static bool CallerMethod1438(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Path.GetExtension
		private static bool CallerMethod1439(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Path.GetFullPath
		private static bool CallerMethod1440(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Path.GetFileName
		private static bool CallerMethod1441(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Path.GetFileNameWithoutExtension
		private static bool CallerMethod1442(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Path.GetPathRoot
		private static bool CallerMethod1443(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Path.GetTempPath
		private static bool CallerMethod1444(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Path.GetTempFileName
		private static bool CallerMethod1445(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Path.HasExtension
		private static bool CallerMethod1446(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Path.IsPathRooted
		private static bool CallerMethod1447(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.Path.Combine
		private static bool CallerMethod1448(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String ChangeExtension(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path, System.String extension)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			paramObjs[2] = extension;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1437), "FILE", "System.IO.Path.ChangeExtension(String, String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetDirectoryName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1438), "FILE", "System.IO.Path.GetDirectoryName(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetExtension(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1439), "FILE", "System.IO.Path.GetExtension(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetFullPath(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1440), "FILE", "System.IO.Path.GetFullPath(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetFileName(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1441), "FILE", "System.IO.Path.GetFileName(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetFileNameWithoutExtension(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1442), "FILE", "System.IO.Path.GetFileNameWithoutExtension(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetPathRoot(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1443), "FILE", "System.IO.Path.GetPathRoot(String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetTempPath(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1444), "FILE", "System.IO.Path.GetTempPath()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String GetTempFileName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1445), "FILE", "System.IO.Path.GetTempFileName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Boolean HasExtension(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1446), "FILE", "System.IO.Path.HasExtension(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsPathRooted(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1447), "FILE", "System.IO.Path.IsPathRooted(String)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String Combine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String path1, System.String path2)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = path1;
			paramObjs[2] = path2;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1448), "FILE", "System.IO.Path.Combine(String, String)", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.TextReader")]
	public class HandlerClass129
	{
		// System.IO.TextReader.ReadLine
		private static bool CallerMethod1449(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextReader.ReadBlock
		private static bool CallerMethod1450(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextReader.ReadToEnd
		private static bool CallerMethod1451(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextReader.Read
		private static bool CallerMethod1452(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextReader.Read
		private static bool CallerMethod1453(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextReader.Peek
		private static bool CallerMethod1454(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextReader.Close
		private static bool CallerMethod1455(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextReader.Synchronized
		private static bool CallerMethod1456(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String ReadLine(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1449), "FILE", "System.IO.TextReader.ReadLine()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 ReadBlock(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char[] buffer, System.Int32 index, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = index;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1450), "FILE", "System.IO.TextReader.ReadBlock(Char[], Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String ReadToEnd(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1451), "FILE", "System.IO.TextReader.ReadToEnd()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 Read(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char[] buffer, System.Int32 index, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = index;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1452), "FILE", "System.IO.TextReader.Read(Char[], Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Read(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1453), "FILE", "System.IO.TextReader.Read()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Peek(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1454), "FILE", "System.IO.TextReader.Peek()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1455), "FILE", "System.IO.TextReader.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IO.TextReader Synchronized(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.TextReader reader)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = reader;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1456), "FILE", "System.IO.TextReader.Synchronized(TextReader)", paramObjs, typeof(System.IO.TextReader), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.TextReader)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.StreamReader")]
	public class HandlerClass130
	{
		// System.IO.StreamReader.get_BaseStream
		private static bool CallerMethod1457(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamReader.get_CurrentEncoding
		private static bool CallerMethod1458(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamReader.ReadLine
		private static bool CallerMethod1459(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamReader.ReadToEnd
		private static bool CallerMethod1460(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamReader.Read
		private static bool CallerMethod1461(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamReader.Read
		private static bool CallerMethod1462(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamReader.Peek
		private static bool CallerMethod1463(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamReader.Close
		private static bool CallerMethod1464(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamReader.DiscardBufferedData
		private static bool CallerMethod1465(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamReader..ctor
		private static bool CallerMethod1466(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamReader..ctor
		private static bool CallerMethod1467(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamReader..ctor
		private static bool CallerMethod1468(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamReader..ctor
		private static bool CallerMethod1469(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamReader..ctor
		private static bool CallerMethod1470(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamReader..ctor
		private static bool CallerMethod1471(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamReader..ctor
		private static bool CallerMethod1472(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamReader..ctor
		private static bool CallerMethod1473(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamReader..ctor
		private static bool CallerMethod1474(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamReader..ctor
		private static bool CallerMethod1475(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.IO.Stream get_BaseStream(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1457), "FILE", "System.IO.StreamReader.get_BaseStream()", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static System.Text.Encoding get_CurrentEncoding(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1458), "FILE", "System.IO.StreamReader.get_CurrentEncoding()", paramObjs, typeof(System.Text.Encoding), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.Encoding)retValue;
		}

		public static System.String ReadLine(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1459), "FILE", "System.IO.StreamReader.ReadLine()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ReadToEnd(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1460), "FILE", "System.IO.StreamReader.ReadToEnd()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 Read(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char[] buffer, System.Int32 index, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = index;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1461), "FILE", "System.IO.StreamReader.Read(Char[], Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Read(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1462), "FILE", "System.IO.StreamReader.Read()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Peek(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1463), "FILE", "System.IO.StreamReader.Peek()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1464), "FILE", "System.IO.StreamReader.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void DiscardBufferedData(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1465), "FILE", "System.IO.StreamReader.DiscardBufferedData()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream stream)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = stream;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1466), "FILE", "System.IO.StreamReader.ctor(Stream)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream stream, System.Boolean detectEncodingFromByteOrderMarks)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = stream;
			paramObjs[2] = detectEncodingFromByteOrderMarks;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1467), "FILE", "System.IO.StreamReader.ctor(Stream, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream stream, System.Text.Encoding encoding)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = stream;
			paramObjs[2] = encoding;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1468), "FILE", "System.IO.StreamReader.ctor(Stream, Encoding)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream stream, System.Text.Encoding encoding, System.Boolean detectEncodingFromByteOrderMarks)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = stream;
			paramObjs[2] = encoding;
			paramObjs[3] = detectEncodingFromByteOrderMarks;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1469), "FILE", "System.IO.StreamReader.ctor(Stream, Encoding, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream stream, System.Text.Encoding encoding, System.Boolean detectEncodingFromByteOrderMarks, System.Int32 bufferSize)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = stream;
			paramObjs[2] = encoding;
			paramObjs[3] = detectEncodingFromByteOrderMarks;
			paramObjs[4] = bufferSize;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1470), "FILE", "System.IO.StreamReader.ctor(Stream, Encoding, Boolean, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1471), "FILE", "System.IO.StreamReader.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path, System.Boolean detectEncodingFromByteOrderMarks)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			paramObjs[2] = detectEncodingFromByteOrderMarks;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1472), "FILE", "System.IO.StreamReader.ctor(String, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path, System.Text.Encoding encoding)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			paramObjs[2] = encoding;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1473), "FILE", "System.IO.StreamReader.ctor(String, Encoding)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path, System.Text.Encoding encoding, System.Boolean detectEncodingFromByteOrderMarks)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			paramObjs[2] = encoding;
			paramObjs[3] = detectEncodingFromByteOrderMarks;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1474), "FILE", "System.IO.StreamReader.ctor(String, Encoding, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path, System.Text.Encoding encoding, System.Boolean detectEncodingFromByteOrderMarks, System.Int32 bufferSize)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			paramObjs[2] = encoding;
			paramObjs[3] = detectEncodingFromByteOrderMarks;
			paramObjs[4] = bufferSize;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1475), "FILE", "System.IO.StreamReader.ctor(String, Encoding, Boolean, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.TextWriter")]
	public class HandlerClass131
	{
		// System.IO.TextWriter.WriteLine
		private static bool CallerMethod1476(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.WriteLine
		private static bool CallerMethod1477(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.WriteLine
		private static bool CallerMethod1478(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.WriteLine
		private static bool CallerMethod1479(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.WriteLine
		private static bool CallerMethod1480(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.WriteLine
		private static bool CallerMethod1481(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.WriteLine
		private static bool CallerMethod1482(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.WriteLine
		private static bool CallerMethod1483(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.WriteLine
		private static bool CallerMethod1484(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.WriteLine
		private static bool CallerMethod1485(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.WriteLine
		private static bool CallerMethod1486(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.WriteLine
		private static bool CallerMethod1487(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.WriteLine
		private static bool CallerMethod1488(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.WriteLine
		private static bool CallerMethod1489(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.WriteLine
		private static bool CallerMethod1490(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.WriteLine
		private static bool CallerMethod1491(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.WriteLine
		private static bool CallerMethod1492(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.WriteLine
		private static bool CallerMethod1493(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.Write
		private static bool CallerMethod1494(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.Write
		private static bool CallerMethod1495(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.Write
		private static bool CallerMethod1496(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.Write
		private static bool CallerMethod1497(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.Write
		private static bool CallerMethod1498(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.Write
		private static bool CallerMethod1499(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.Write
		private static bool CallerMethod1500(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.Write
		private static bool CallerMethod1501(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.Write
		private static bool CallerMethod1502(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.Write
		private static bool CallerMethod1503(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.Write
		private static bool CallerMethod1504(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.Write
		private static bool CallerMethod1505(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.Write
		private static bool CallerMethod1506(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.Write
		private static bool CallerMethod1507(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.Write
		private static bool CallerMethod1508(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.Write
		private static bool CallerMethod1509(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.Write
		private static bool CallerMethod1510(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.set_NewLine
		private static bool CallerMethod1511(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.get_NewLine
		private static bool CallerMethod1512(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.Flush
		private static bool CallerMethod1513(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.Close
		private static bool CallerMethod1514(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.get_FormatProvider
		private static bool CallerMethod1515(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.TextWriter.Synchronized
		private static bool CallerMethod1516(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String format, System.Object[] arg)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = format;
			paramObjs[2] = arg;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1476), "FILE", "System.IO.TextWriter.WriteLine(String, Object[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String format, System.Object arg0, System.Object arg1, System.Object arg2)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = format;
			paramObjs[2] = arg0;
			paramObjs[3] = arg1;
			paramObjs[4] = arg2;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1477), "FILE", "System.IO.TextWriter.WriteLine(String, Object, Object, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String format, System.Object arg0, System.Object arg1)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = format;
			paramObjs[2] = arg0;
			paramObjs[3] = arg1;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1478), "FILE", "System.IO.TextWriter.WriteLine(String, Object, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String format, System.Object arg0)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = format;
			paramObjs[2] = arg0;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1479), "FILE", "System.IO.TextWriter.WriteLine(String, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1480), "FILE", "System.IO.TextWriter.WriteLine(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1481), "FILE", "System.IO.TextWriter.WriteLine(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Decimal value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1482), "FILE", "System.IO.TextWriter.WriteLine(Decimal)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Double value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1483), "FILE", "System.IO.TextWriter.WriteLine(Double)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Single value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1484), "FILE", "System.IO.TextWriter.WriteLine(Single)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.UInt64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1485), "FILE", "System.IO.TextWriter.WriteLine(UInt64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1486), "FILE", "System.IO.TextWriter.WriteLine(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.UInt32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1487), "FILE", "System.IO.TextWriter.WriteLine(UInt32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1488), "FILE", "System.IO.TextWriter.WriteLine(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1489), "FILE", "System.IO.TextWriter.WriteLine(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char[] buffer, System.Int32 index, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = index;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1490), "FILE", "System.IO.TextWriter.WriteLine(Char[], Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char[] buffer)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1491), "FILE", "System.IO.TextWriter.WriteLine(Char[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1492), "FILE", "System.IO.TextWriter.WriteLine(Char)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void WriteLine(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1493), "FILE", "System.IO.TextWriter.WriteLine()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String format, System.Object[] arg)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = format;
			paramObjs[2] = arg;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1494), "FILE", "System.IO.TextWriter.Write(String, Object[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String format, System.Object arg0, System.Object arg1, System.Object arg2)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = format;
			paramObjs[2] = arg0;
			paramObjs[3] = arg1;
			paramObjs[4] = arg2;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1495), "FILE", "System.IO.TextWriter.Write(String, Object, Object, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String format, System.Object arg0, System.Object arg1)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = format;
			paramObjs[2] = arg0;
			paramObjs[3] = arg1;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1496), "FILE", "System.IO.TextWriter.Write(String, Object, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String format, System.Object arg0)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = format;
			paramObjs[2] = arg0;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1497), "FILE", "System.IO.TextWriter.Write(String, Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1498), "FILE", "System.IO.TextWriter.Write(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1499), "FILE", "System.IO.TextWriter.Write(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Decimal value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1500), "FILE", "System.IO.TextWriter.Write(Decimal)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Double value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1501), "FILE", "System.IO.TextWriter.Write(Double)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Single value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1502), "FILE", "System.IO.TextWriter.Write(Single)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.UInt64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1503), "FILE", "System.IO.TextWriter.Write(UInt64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1504), "FILE", "System.IO.TextWriter.Write(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.UInt32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1505), "FILE", "System.IO.TextWriter.Write(UInt32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1506), "FILE", "System.IO.TextWriter.Write(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1507), "FILE", "System.IO.TextWriter.Write(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char[] buffer, System.Int32 index, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = index;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1508), "FILE", "System.IO.TextWriter.Write(Char[], Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char[] buffer)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1509), "FILE", "System.IO.TextWriter.Write(Char[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1510), "FILE", "System.IO.TextWriter.Write(Char)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_NewLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1511), "FILE", "System.IO.TextWriter.set_NewLine(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String get_NewLine(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1512), "FILE", "System.IO.TextWriter.get_NewLine()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void Flush(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1513), "FILE", "System.IO.TextWriter.Flush()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1514), "FILE", "System.IO.TextWriter.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IFormatProvider get_FormatProvider(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1515), "FILE", "System.IO.TextWriter.get_FormatProvider()", paramObjs, typeof(System.IFormatProvider), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IFormatProvider)retValue;
		}

		public static System.IO.TextWriter Synchronized(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.TextWriter writer)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = writer;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1516), "FILE", "System.IO.TextWriter.Synchronized(TextWriter)", paramObjs, typeof(System.IO.TextWriter), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.TextWriter)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.StreamWriter")]
	public class HandlerClass132
	{
		// System.IO.StreamWriter.get_BaseStream
		private static bool CallerMethod1517(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamWriter.set_AutoFlush
		private static bool CallerMethod1518(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamWriter.get_AutoFlush
		private static bool CallerMethod1519(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamWriter.Write
		private static bool CallerMethod1520(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamWriter.Write
		private static bool CallerMethod1521(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamWriter.Write
		private static bool CallerMethod1522(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamWriter.Write
		private static bool CallerMethod1523(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamWriter.get_Encoding
		private static bool CallerMethod1524(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamWriter.Flush
		private static bool CallerMethod1525(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamWriter.Close
		private static bool CallerMethod1526(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamWriter..ctor
		private static bool CallerMethod1527(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamWriter..ctor
		private static bool CallerMethod1528(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamWriter..ctor
		private static bool CallerMethod1529(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamWriter..ctor
		private static bool CallerMethod1530(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamWriter..ctor
		private static bool CallerMethod1531(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamWriter..ctor
		private static bool CallerMethod1532(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StreamWriter..ctor
		private static bool CallerMethod1533(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.IO.Stream get_BaseStream(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1517), "FILE", "System.IO.StreamWriter.get_BaseStream()", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static void set_AutoFlush(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1518), "FILE", "System.IO.StreamWriter.set_AutoFlush(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_AutoFlush(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1519), "FILE", "System.IO.StreamWriter.get_AutoFlush()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1520), "FILE", "System.IO.StreamWriter.Write(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char[] buffer, System.Int32 index, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = index;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1521), "FILE", "System.IO.StreamWriter.Write(Char[], Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char[] buffer)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1522), "FILE", "System.IO.StreamWriter.Write(Char[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1523), "FILE", "System.IO.StreamWriter.Write(Char)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Text.Encoding get_Encoding(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1524), "FILE", "System.IO.StreamWriter.get_Encoding()", paramObjs, typeof(System.Text.Encoding), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.Encoding)retValue;
		}

		public static void Flush(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1525), "FILE", "System.IO.StreamWriter.Flush()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1526), "FILE", "System.IO.StreamWriter.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream stream)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = stream;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1527), "FILE", "System.IO.StreamWriter.ctor(Stream)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream stream, System.Text.Encoding encoding)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = stream;
			paramObjs[2] = encoding;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1528), "FILE", "System.IO.StreamWriter.ctor(Stream, Encoding)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IO.Stream stream, System.Text.Encoding encoding, System.Int32 bufferSize)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = stream;
			paramObjs[2] = encoding;
			paramObjs[3] = bufferSize;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1529), "FILE", "System.IO.StreamWriter.ctor(Stream, Encoding, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1530), "FILE", "System.IO.StreamWriter.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path, System.Boolean append)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			paramObjs[2] = append;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1531), "FILE", "System.IO.StreamWriter.ctor(String, Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path, System.Boolean append, System.Text.Encoding encoding)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			paramObjs[2] = append;
			paramObjs[3] = encoding;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1532), "FILE", "System.IO.StreamWriter.ctor(String, Boolean, Encoding)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path, System.Boolean append, System.Text.Encoding encoding, System.Int32 bufferSize)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			paramObjs[2] = append;
			paramObjs[3] = encoding;
			paramObjs[4] = bufferSize;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1533), "FILE", "System.IO.StreamWriter.ctor(String, Boolean, Encoding, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.StringReader")]
	public class HandlerClass133
	{
		// System.IO.StringReader.ReadLine
		private static bool CallerMethod1534(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StringReader.ReadToEnd
		private static bool CallerMethod1535(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StringReader.Read
		private static bool CallerMethod1536(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StringReader.Read
		private static bool CallerMethod1537(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StringReader.Peek
		private static bool CallerMethod1538(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StringReader.Close
		private static bool CallerMethod1539(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StringReader..ctor
		private static bool CallerMethod1540(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String ReadLine(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1534), "FILE", "System.IO.StringReader.ReadLine()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ReadToEnd(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1535), "FILE", "System.IO.StringReader.ReadToEnd()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 Read(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char[] buffer, System.Int32 index, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = index;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1536), "FILE", "System.IO.StringReader.Read(Char[], Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Read(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1537), "FILE", "System.IO.StringReader.Read()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Peek(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1538), "FILE", "System.IO.StringReader.Peek()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1539), "FILE", "System.IO.StringReader.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String s)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = s;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1540), "FILE", "System.IO.StringReader.ctor(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.StringWriter")]
	public class HandlerClass134
	{
		// System.IO.StringWriter.GetStringBuilder
		private static bool CallerMethod1541(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StringWriter.Write
		private static bool CallerMethod1542(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StringWriter.Write
		private static bool CallerMethod1543(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StringWriter.Write
		private static bool CallerMethod1544(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StringWriter.get_Encoding
		private static bool CallerMethod1545(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StringWriter.Close
		private static bool CallerMethod1546(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StringWriter.ToString
		private static bool CallerMethod1547(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StringWriter..ctor
		private static bool CallerMethod1548(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StringWriter..ctor
		private static bool CallerMethod1549(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StringWriter..ctor
		private static bool CallerMethod1550(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.StringWriter..ctor
		private static bool CallerMethod1551(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Text.StringBuilder GetStringBuilder(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1541), "FILE", "System.IO.StringWriter.GetStringBuilder()", paramObjs, typeof(System.Text.StringBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.StringBuilder)retValue;
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1542), "FILE", "System.IO.StringWriter.Write(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char[] buffer, System.Int32 index, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = index;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1543), "FILE", "System.IO.StringWriter.Write(Char[], Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Char value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1544), "FILE", "System.IO.StringWriter.Write(Char)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Text.Encoding get_Encoding(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1545), "FILE", "System.IO.StringWriter.get_Encoding()", paramObjs, typeof(System.Text.Encoding), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Text.Encoding)retValue;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1546), "FILE", "System.IO.StringWriter.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1547), "FILE", "System.IO.StringWriter.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1548), "FILE", "System.IO.StringWriter.ctor()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.IFormatProvider formatProvider)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = formatProvider;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1549), "FILE", "System.IO.StringWriter.ctor(IFormatProvider)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Text.StringBuilder sb)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = sb;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1550), "FILE", "System.IO.StringWriter.ctor(StringBuilder)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Text.StringBuilder sb, System.IFormatProvider formatProvider)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = sb;
			paramObjs[2] = formatProvider;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1551), "FILE", "System.IO.StringWriter.ctor(StringBuilder, IFormatProvider)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.IsolatedStorage.IsolatedStorage")]
	public class HandlerClass135
	{
		// System.IO.IsolatedStorage.IsolatedStorage.get_CurrentSize
		private static bool CallerMethod1552(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorage.get_MaximumSize
		private static bool CallerMethod1553(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorage.get_DomainIdentity
		private static bool CallerMethod1554(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorage.get_AssemblyIdentity
		private static bool CallerMethod1555(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorage.get_Scope
		private static bool CallerMethod1556(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.UInt64 get_CurrentSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1552), "FILE", "System.IO.IsolatedStorage.IsolatedStorage.get_CurrentSize()", paramObjs, typeof(System.UInt64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.UInt64)retValue;
		}

		public static System.UInt64 get_MaximumSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1553), "FILE", "System.IO.IsolatedStorage.IsolatedStorage.get_MaximumSize()", paramObjs, typeof(System.UInt64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.UInt64)retValue;
		}

		public static System.Object get_DomainIdentity(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1554), "FILE", "System.IO.IsolatedStorage.IsolatedStorage.get_DomainIdentity()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object get_AssemblyIdentity(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1555), "FILE", "System.IO.IsolatedStorage.IsolatedStorage.get_AssemblyIdentity()", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.IO.IsolatedStorage.IsolatedStorageScope get_Scope(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1556), "FILE", "System.IO.IsolatedStorage.IsolatedStorage.get_Scope()", paramObjs, typeof(System.IO.IsolatedStorage.IsolatedStorageScope), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.IsolatedStorage.IsolatedStorageScope)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.IsolatedStorage.IsolatedStorageFile")]
	public class HandlerClass136
	{
		// System.IO.IsolatedStorage.IsolatedStorageFile.Dispose
		private static bool CallerMethod1557(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFile.Remove
		private static bool CallerMethod1558(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFile.get_CurrentSize
		private static bool CallerMethod1559(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFile.get_MaximumSize
		private static bool CallerMethod1560(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFile.DeleteFile
		private static bool CallerMethod1561(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFile.CreateDirectory
		private static bool CallerMethod1562(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFile.DeleteDirectory
		private static bool CallerMethod1563(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames
		private static bool CallerMethod1564(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames
		private static bool CallerMethod1565(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFile.Close
		private static bool CallerMethod1566(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForDomain
		private static bool CallerMethod1567(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForAssembly
		private static bool CallerMethod1568(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFile.GetStore
		private static bool CallerMethod1569(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFile.GetStore
		private static bool CallerMethod1570(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFile.GetStore
		private static bool CallerMethod1571(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFile.Remove
		private static bool CallerMethod1572(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFile.GetEnumerator
		private static bool CallerMethod1573(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void Dispose(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1557), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFile.Dispose()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Remove(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1558), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFile.Remove()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.UInt64 get_CurrentSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1559), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFile.get_CurrentSize()", paramObjs, typeof(System.UInt64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.UInt64)retValue;
		}

		public static System.UInt64 get_MaximumSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1560), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFile.get_MaximumSize()", paramObjs, typeof(System.UInt64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.UInt64)retValue;
		}

		public static void DeleteFile(HeatDotNet.MethodInterceptInfo methodIntercept, System.String file)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = file;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1561), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFile.DeleteFile(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void CreateDirectory(HeatDotNet.MethodInterceptInfo methodIntercept, System.String dir)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = dir;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1562), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFile.CreateDirectory(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void DeleteDirectory(HeatDotNet.MethodInterceptInfo methodIntercept, System.String dir)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = dir;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1563), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFile.DeleteDirectory(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.String[] GetFileNames(HeatDotNet.MethodInterceptInfo methodIntercept, System.String searchPattern)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = searchPattern;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1564), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames(String)", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.String[] GetDirectoryNames(HeatDotNet.MethodInterceptInfo methodIntercept, System.String searchPattern)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = searchPattern;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1565), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames(String)", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1566), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFile.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IO.IsolatedStorage.IsolatedStorageFile GetUserStoreForDomain(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1567), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForDomain()", paramObjs, typeof(System.IO.IsolatedStorage.IsolatedStorageFile), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.IsolatedStorage.IsolatedStorageFile)retValue;
		}

		public static System.IO.IsolatedStorage.IsolatedStorageFile GetUserStoreForAssembly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1568), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForAssembly()", paramObjs, typeof(System.IO.IsolatedStorage.IsolatedStorageFile), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.IsolatedStorage.IsolatedStorageFile)retValue;
		}

		public static System.IO.IsolatedStorage.IsolatedStorageFile GetStore(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.IsolatedStorage.IsolatedStorageScope scope, System.Type domainEvidenceType, System.Type assemblyEvidenceType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = scope;
			paramObjs[2] = domainEvidenceType;
			paramObjs[3] = assemblyEvidenceType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1569), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFile.GetStore(IsolatedStorageScope, Type, Type)", paramObjs, typeof(System.IO.IsolatedStorage.IsolatedStorageFile), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.IsolatedStorage.IsolatedStorageFile)retValue;
		}

		public static System.IO.IsolatedStorage.IsolatedStorageFile GetStore(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.IsolatedStorage.IsolatedStorageScope scope, System.Object domainIdentity, System.Object assemblyIdentity)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = scope;
			paramObjs[2] = domainIdentity;
			paramObjs[3] = assemblyIdentity;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1570), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFile.GetStore(IsolatedStorageScope, Object, Object)", paramObjs, typeof(System.IO.IsolatedStorage.IsolatedStorageFile), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.IsolatedStorage.IsolatedStorageFile)retValue;
		}

		public static System.IO.IsolatedStorage.IsolatedStorageFile GetStore(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.IsolatedStorage.IsolatedStorageScope scope, System.Security.Policy.Evidence domainEvidence, System.Type domainEvidenceType, System.Security.Policy.Evidence assemblyEvidence, System.Type assemblyEvidenceType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = scope;
			paramObjs[2] = domainEvidence;
			paramObjs[3] = domainEvidenceType;
			paramObjs[4] = assemblyEvidence;
			paramObjs[5] = assemblyEvidenceType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1571), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFile.GetStore(IsolatedStorageScope, Evidence, Type, Evidence, Type)", paramObjs, typeof(System.IO.IsolatedStorage.IsolatedStorageFile), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.IsolatedStorage.IsolatedStorageFile)retValue;
		}

		public static void Remove(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.IsolatedStorage.IsolatedStorageScope scope)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = scope;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1572), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFile.Remove(IsolatedStorageScope)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Collections.IEnumerator GetEnumerator(HeatDotNet.MethodInterceptInfo methodIntercept, System.IO.IsolatedStorage.IsolatedStorageScope scope)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = scope;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1573), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFile.GetEnumerator(IsolatedStorageScope)", paramObjs, typeof(System.Collections.IEnumerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Collections.IEnumerator)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.IO.IsolatedStorage.IsolatedStorageFileStream")]
	public class HandlerClass137
	{
		// System.IO.IsolatedStorage.IsolatedStorageFileStream.get_Handle
		private static bool CallerMethod1574(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream.get_IsAsync
		private static bool CallerMethod1575(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte
		private static bool CallerMethod1576(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream.Write
		private static bool CallerMethod1577(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte
		private static bool CallerMethod1578(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream.Read
		private static bool CallerMethod1579(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength
		private static bool CallerMethod1580(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek
		private static bool CallerMethod1581(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite
		private static bool CallerMethod1582(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite
		private static bool CallerMethod1583(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead
		private static bool CallerMethod1584(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead
		private static bool CallerMethod1585(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush
		private static bool CallerMethod1586(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream.Close
		private static bool CallerMethod1587(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream.set_Position
		private static bool CallerMethod1588(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream.get_Position
		private static bool CallerMethod1589(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream.get_Length
		private static bool CallerMethod1590(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream.get_CanWrite
		private static bool CallerMethod1591(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream.get_CanSeek
		private static bool CallerMethod1592(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream.get_CanRead
		private static bool CallerMethod1593(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream..ctor
		private static bool CallerMethod1594(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream..ctor
		private static bool CallerMethod1595(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream..ctor
		private static bool CallerMethod1596(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream..ctor
		private static bool CallerMethod1597(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream..ctor
		private static bool CallerMethod1598(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream..ctor
		private static bool CallerMethod1599(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream..ctor
		private static bool CallerMethod1600(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.IO.IsolatedStorage.IsolatedStorageFileStream..ctor
		private static bool CallerMethod1601(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 7) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.IntPtr get_Handle(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1574), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.get_Handle()", paramObjs, typeof(System.IntPtr), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IntPtr)retValue;
		}

		public static System.Boolean get_IsAsync(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1575), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.get_IsAsync()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void WriteByte(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1576), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(Byte)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Write(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1577), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(Byte[], Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int32 ReadByte(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1578), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 Read(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1579), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(Byte[], Int32, Int32)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static void SetLength(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1580), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int64 Seek(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 offset, System.IO.SeekOrigin origin)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = offset;
			paramObjs[2] = origin;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1581), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(Int64, SeekOrigin)", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static void EndWrite(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1582), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite(IAsyncResult)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.IAsyncResult BeginWrite(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 numBytes, System.AsyncCallback userCallback, System.Object stateObject)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = numBytes;
			paramObjs[4] = userCallback;
			paramObjs[5] = stateObject;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1583), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static System.Int32 EndRead(HeatDotNet.MethodInterceptInfo methodIntercept, System.IAsyncResult asyncResult)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = asyncResult;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1584), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(IAsyncResult)", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.IAsyncResult BeginRead(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] buffer, System.Int32 offset, System.Int32 numBytes, System.AsyncCallback userCallback, System.Object stateObject)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = buffer;
			paramObjs[2] = offset;
			paramObjs[3] = numBytes;
			paramObjs[4] = userCallback;
			paramObjs[5] = stateObject;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1585), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)", paramObjs, typeof(System.IAsyncResult), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IAsyncResult)retValue;
		}

		public static void Flush(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1586), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Close(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1587), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.Close()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void set_Position(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int64 value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1588), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.set_Position(Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Int64 get_Position(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1589), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.get_Position()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.Int64 get_Length(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1590), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.get_Length()", paramObjs, typeof(System.Int64), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int64)retValue;
		}

		public static System.Boolean get_CanWrite(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1591), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.get_CanWrite()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_CanSeek(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1592), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.get_CanSeek()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_CanRead(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1593), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.get_CanRead()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path, System.IO.FileMode mode)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			paramObjs[2] = mode;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1594), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.ctor(String, FileMode)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path, System.IO.FileMode mode, System.IO.IsolatedStorage.IsolatedStorageFile isf)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			paramObjs[2] = mode;
			paramObjs[3] = isf;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1595), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.ctor(String, FileMode, IsolatedStorageFile)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path, System.IO.FileMode mode, System.IO.FileAccess access)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			paramObjs[2] = mode;
			paramObjs[3] = access;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1596), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.ctor(String, FileMode, FileAccess)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.IsolatedStorage.IsolatedStorageFile isf)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			paramObjs[2] = mode;
			paramObjs[3] = access;
			paramObjs[4] = isf;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1597), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.ctor(String, FileMode, FileAccess, IsolatedStorageFile)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			paramObjs[2] = mode;
			paramObjs[3] = access;
			paramObjs[4] = share;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1598), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.ctor(String, FileMode, FileAccess, FileShare)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.IO.IsolatedStorage.IsolatedStorageFile isf)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			paramObjs[2] = mode;
			paramObjs[3] = access;
			paramObjs[4] = share;
			paramObjs[5] = isf;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1599), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.ctor(String, FileMode, FileAccess, FileShare, IsolatedStorageFile)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Int32 bufferSize)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			paramObjs[2] = mode;
			paramObjs[3] = access;
			paramObjs[4] = share;
			paramObjs[5] = bufferSize;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1600), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.ctor(String, FileMode, FileAccess, FileShare, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Int32 bufferSize, System.IO.IsolatedStorage.IsolatedStorageFile isf)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[7];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = path;
			paramObjs[2] = mode;
			paramObjs[3] = access;
			paramObjs[4] = share;
			paramObjs[5] = bufferSize;
			paramObjs[6] = isf;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1601), "FILE", "System.IO.IsolatedStorage.IsolatedStorageFileStream.ctor(String, FileMode, FileAccess, FileShare, Int32, IsolatedStorageFile)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.Emit.AssemblyBuilder")]
	public class HandlerClass138
	{
		// System.Reflection.Emit.AssemblyBuilder.get_ImageRuntimeVersion
		private static bool CallerMethod1602(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.get_Location
		private static bool CallerMethod1603(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo
		private static bool CallerMethod1604(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames
		private static bool CallerMethod1605(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.GetFiles
		private static bool CallerMethod1606(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.GetFile
		private static bool CallerMethod1607(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream
		private static bool CallerMethod1608(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream
		private static bool CallerMethod1609(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.GetExportedTypes
		private static bool CallerMethod1610(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.get_EntryPoint
		private static bool CallerMethod1611(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.get_CodeBase
		private static bool CallerMethod1612(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule
		private static bool CallerMethod1613(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule
		private static bool CallerMethod1614(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule
		private static bool CallerMethod1615(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule
		private static bool CallerMethod1616(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.DefineResource
		private static bool CallerMethod1617(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.DefineResource
		private static bool CallerMethod1618(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.AddResourceFile
		private static bool CallerMethod1619(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.AddResourceFile
		private static bool CallerMethod1620(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource
		private static bool CallerMethod1621(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource
		private static bool CallerMethod1622(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource
		private static bool CallerMethod1623(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource
		private static bool CallerMethod1624(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.GetDynamicModule
		private static bool CallerMethod1625(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.SetEntryPoint
		private static bool CallerMethod1626(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.SetEntryPoint
		private static bool CallerMethod1627(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute
		private static bool CallerMethod1628(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute
		private static bool CallerMethod1629(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.AssemblyBuilder.Save
		private static bool CallerMethod1630(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.String get_ImageRuntimeVersion(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1602), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.get_ImageRuntimeVersion()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Location(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1603), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.get_Location()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Reflection.ManifestResourceInfo GetManifestResourceInfo(HeatDotNet.MethodInterceptInfo methodIntercept, System.String resourceName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = resourceName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1604), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(String)", paramObjs, typeof(System.Reflection.ManifestResourceInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.ManifestResourceInfo)retValue;
		}

		public static System.String[] GetManifestResourceNames(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1605), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames()", paramObjs, typeof(System.String[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String[])retValue;
		}

		public static System.IO.FileStream[] GetFiles(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean getResourceModules)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = getResourceModules;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1606), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.GetFiles(Boolean)", paramObjs, typeof(System.IO.FileStream[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileStream[])retValue;
		}

		public static System.IO.FileStream GetFile(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1607), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.GetFile(String)", paramObjs, typeof(System.IO.FileStream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.FileStream)retValue;
		}

		public static System.IO.Stream GetManifestResourceStream(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1608), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(String)", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static System.IO.Stream GetManifestResourceStream(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type type, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			paramObjs[2] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1609), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(Type, String)", paramObjs, typeof(System.IO.Stream), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.IO.Stream)retValue;
		}

		public static System.Type[] GetExportedTypes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1610), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.GetExportedTypes()", paramObjs, typeof(System.Type[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type[])retValue;
		}

		public static System.Reflection.MethodInfo get_EntryPoint(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1611), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.get_EntryPoint()", paramObjs, typeof(System.Reflection.MethodInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodInfo)retValue;
		}

		public static System.String get_CodeBase(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1612), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.get_CodeBase()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Reflection.Emit.ModuleBuilder DefineDynamicModule(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1613), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(String)", paramObjs, typeof(System.Reflection.Emit.ModuleBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.ModuleBuilder)retValue;
		}

		public static System.Reflection.Emit.ModuleBuilder DefineDynamicModule(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Boolean emitSymbolInfo)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = emitSymbolInfo;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1614), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(String, Boolean)", paramObjs, typeof(System.Reflection.Emit.ModuleBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.ModuleBuilder)retValue;
		}

		public static System.Reflection.Emit.ModuleBuilder DefineDynamicModule(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String fileName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = fileName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1615), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(String, String)", paramObjs, typeof(System.Reflection.Emit.ModuleBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.ModuleBuilder)retValue;
		}

		public static System.Reflection.Emit.ModuleBuilder DefineDynamicModule(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String fileName, System.Boolean emitSymbolInfo)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = fileName;
			paramObjs[3] = emitSymbolInfo;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1616), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(String, String, Boolean)", paramObjs, typeof(System.Reflection.Emit.ModuleBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.ModuleBuilder)retValue;
		}

		public static System.Resources.IResourceWriter DefineResource(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String description, System.String fileName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = description;
			paramObjs[3] = fileName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1617), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.DefineResource(String, String, String)", paramObjs, typeof(System.Resources.IResourceWriter), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Resources.IResourceWriter)retValue;
		}

		public static System.Resources.IResourceWriter DefineResource(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String description, System.String fileName, System.Reflection.ResourceAttributes attribute)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = description;
			paramObjs[3] = fileName;
			paramObjs[4] = attribute;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1618), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.DefineResource(String, String, String, ResourceAttributes)", paramObjs, typeof(System.Resources.IResourceWriter), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Resources.IResourceWriter)retValue;
		}

		public static void AddResourceFile(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String fileName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = fileName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1619), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.AddResourceFile(String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddResourceFile(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String fileName, System.Reflection.ResourceAttributes attribute)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = fileName;
			paramObjs[3] = attribute;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1620), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.AddResourceFile(String, String, ResourceAttributes)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void DefineVersionInfoResource(HeatDotNet.MethodInterceptInfo methodIntercept, System.String product, System.String productVersion, System.String company, System.String copyright, System.String trademark)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = product;
			paramObjs[2] = productVersion;
			paramObjs[3] = company;
			paramObjs[4] = copyright;
			paramObjs[5] = trademark;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1621), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource(String, String, String, String, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void DefineVersionInfoResource(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1622), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void DefineUnmanagedResource(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] resource)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = resource;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1623), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void DefineUnmanagedResource(HeatDotNet.MethodInterceptInfo methodIntercept, System.String resourceFileName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = resourceFileName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1624), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Reflection.Emit.ModuleBuilder GetDynamicModule(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1625), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(String)", paramObjs, typeof(System.Reflection.Emit.ModuleBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.ModuleBuilder)retValue;
		}

		public static void SetEntryPoint(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.MethodInfo entryMethod)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = entryMethod;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1626), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.SetEntryPoint(MethodInfo)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetEntryPoint(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.MethodInfo entryMethod, System.Reflection.Emit.PEFileKinds fileKind)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = entryMethod;
			paramObjs[2] = fileKind;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1627), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.SetEntryPoint(MethodInfo, PEFileKinds)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.ConstructorInfo con, System.Byte[] binaryAttribute)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = con;
			paramObjs[2] = binaryAttribute;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1628), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(ConstructorInfo, Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.CustomAttributeBuilder customBuilder)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = customBuilder;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1629), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(CustomAttributeBuilder)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Save(HeatDotNet.MethodInterceptInfo methodIntercept, System.String assemblyFileName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = assemblyFileName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1630), "LIBRARY", "System.Reflection.Emit.AssemblyBuilder.Save(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.Emit.ConstructorBuilder")]
	public class HandlerClass139
	{
		// System.Reflection.Emit.ConstructorBuilder.Invoke
		private static bool CallerMethod1631(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.Invoke
		private static bool CallerMethod1632(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.get_Attributes
		private static bool CallerMethod1633(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.get_MethodHandle
		private static bool CallerMethod1634(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags
		private static bool CallerMethod1635(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.GetParameters
		private static bool CallerMethod1636(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.IsDefined
		private static bool CallerMethod1637(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes
		private static bool CallerMethod1638(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes
		private static bool CallerMethod1639(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.get_ReflectedType
		private static bool CallerMethod1640(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.get_DeclaringType
		private static bool CallerMethod1641(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.get_Name
		private static bool CallerMethod1642(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.ToString
		private static bool CallerMethod1643(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.GetToken
		private static bool CallerMethod1644(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.DefineParameter
		private static bool CallerMethod1645(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.SetSymCustomAttribute
		private static bool CallerMethod1646(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.GetILGenerator
		private static bool CallerMethod1647(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity
		private static bool CallerMethod1648(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.GetModule
		private static bool CallerMethod1649(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.get_ReturnType
		private static bool CallerMethod1650(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.get_Signature
		private static bool CallerMethod1651(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute
		private static bool CallerMethod1652(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute
		private static bool CallerMethod1653(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags
		private static bool CallerMethod1654(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.get_InitLocals
		private static bool CallerMethod1655(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ConstructorBuilder.set_InitLocals
		private static bool CallerMethod1656(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Object Invoke(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = invokeAttr;
			paramObjs[2] = binder;
			paramObjs[3] = parameters;
			paramObjs[4] = culture;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1631), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.Invoke(BindingFlags, Binder, Object[], CultureInfo)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object Invoke(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			paramObjs[2] = invokeAttr;
			paramObjs[3] = binder;
			paramObjs[4] = parameters;
			paramObjs[5] = culture;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1632), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Reflection.MethodAttributes get_Attributes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1633), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.get_Attributes()", paramObjs, typeof(System.Reflection.MethodAttributes), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodAttributes)retValue;
		}

		public static System.RuntimeMethodHandle get_MethodHandle(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1634), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.get_MethodHandle()", paramObjs, typeof(System.RuntimeMethodHandle), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.RuntimeMethodHandle)retValue;
		}

		public static System.Reflection.MethodImplAttributes GetMethodImplementationFlags(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1635), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags()", paramObjs, typeof(System.Reflection.MethodImplAttributes), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodImplAttributes)retValue;
		}

		public static System.Reflection.ParameterInfo[] GetParameters(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1636), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.GetParameters()", paramObjs, typeof(System.Reflection.ParameterInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.ParameterInfo[])retValue;
		}

		public static System.Boolean IsDefined(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type attributeType, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeType;
			paramObjs[2] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1637), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.IsDefined(Type, Boolean)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Object[] GetCustomAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1638), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(Boolean)", paramObjs, typeof(System.Object[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object[])retValue;
		}

		public static System.Object[] GetCustomAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type attributeType, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeType;
			paramObjs[2] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1639), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(Type, Boolean)", paramObjs, typeof(System.Object[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object[])retValue;
		}

		public static System.Type get_ReflectedType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1640), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.get_ReflectedType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Type get_DeclaringType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1641), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.get_DeclaringType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1642), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1643), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Reflection.Emit.MethodToken GetToken(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1644), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.GetToken()", paramObjs, typeof(System.Reflection.Emit.MethodToken), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.MethodToken)retValue;
		}

		public static System.Reflection.Emit.ParameterBuilder DefineParameter(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 iSequence, System.Reflection.ParameterAttributes attributes, System.String strParamName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = iSequence;
			paramObjs[2] = attributes;
			paramObjs[3] = strParamName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1645), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.DefineParameter(Int32, ParameterAttributes, String)", paramObjs, typeof(System.Reflection.Emit.ParameterBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.ParameterBuilder)retValue;
		}

		public static void SetSymCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Byte[] data)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = data;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1646), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.SetSymCustomAttribute(String, Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Reflection.Emit.ILGenerator GetILGenerator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1647), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.GetILGenerator()", paramObjs, typeof(System.Reflection.Emit.ILGenerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.ILGenerator)retValue;
		}

		public static void AddDeclarativeSecurity(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = action;
			paramObjs[2] = pset;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1648), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity(SecurityAction, PermissionSet)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Reflection.Module GetModule(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1649), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.GetModule()", paramObjs, typeof(System.Reflection.Module), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Module)retValue;
		}

		public static System.Type get_ReturnType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1650), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.get_ReturnType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.String get_Signature(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1651), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.get_Signature()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void SetCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.ConstructorInfo con, System.Byte[] binaryAttribute)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = con;
			paramObjs[2] = binaryAttribute;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1652), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(ConstructorInfo, Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.CustomAttributeBuilder customBuilder)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = customBuilder;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1653), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(CustomAttributeBuilder)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetImplementationFlags(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.MethodImplAttributes attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1654), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(MethodImplAttributes)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_InitLocals(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1655), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.get_InitLocals()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_InitLocals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1656), "LIBRARY", "System.Reflection.Emit.ConstructorBuilder.set_InitLocals(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.Emit.EventBuilder")]
	public class HandlerClass140
	{
		// System.Reflection.Emit.EventBuilder.GetEventToken
		private static bool CallerMethod1657(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EventBuilder.SetAddOnMethod
		private static bool CallerMethod1658(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EventBuilder.SetRemoveOnMethod
		private static bool CallerMethod1659(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EventBuilder.SetRaiseMethod
		private static bool CallerMethod1660(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EventBuilder.AddOtherMethod
		private static bool CallerMethod1661(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EventBuilder.SetCustomAttribute
		private static bool CallerMethod1662(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EventBuilder.SetCustomAttribute
		private static bool CallerMethod1663(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Reflection.Emit.EventToken GetEventToken(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1657), "LIBRARY", "System.Reflection.Emit.EventBuilder.GetEventToken()", paramObjs, typeof(System.Reflection.Emit.EventToken), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.EventToken)retValue;
		}

		public static void SetAddOnMethod(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.MethodBuilder mdBuilder)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = mdBuilder;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1658), "LIBRARY", "System.Reflection.Emit.EventBuilder.SetAddOnMethod(MethodBuilder)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetRemoveOnMethod(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.MethodBuilder mdBuilder)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = mdBuilder;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1659), "LIBRARY", "System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(MethodBuilder)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetRaiseMethod(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.MethodBuilder mdBuilder)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = mdBuilder;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1660), "LIBRARY", "System.Reflection.Emit.EventBuilder.SetRaiseMethod(MethodBuilder)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddOtherMethod(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.MethodBuilder mdBuilder)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = mdBuilder;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1661), "LIBRARY", "System.Reflection.Emit.EventBuilder.AddOtherMethod(MethodBuilder)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.ConstructorInfo con, System.Byte[] binaryAttribute)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = con;
			paramObjs[2] = binaryAttribute;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1662), "LIBRARY", "System.Reflection.Emit.EventBuilder.SetCustomAttribute(ConstructorInfo, Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.CustomAttributeBuilder customBuilder)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = customBuilder;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1663), "LIBRARY", "System.Reflection.Emit.EventBuilder.SetCustomAttribute(CustomAttributeBuilder)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.Emit.FieldBuilder")]
	public class HandlerClass141
	{
		// System.Reflection.Emit.FieldBuilder.get_Attributes
		private static bool CallerMethod1664(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.FieldBuilder.get_FieldHandle
		private static bool CallerMethod1665(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.FieldBuilder.SetValue
		private static bool CallerMethod1666(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.FieldBuilder.GetValue
		private static bool CallerMethod1667(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.FieldBuilder.get_FieldType
		private static bool CallerMethod1668(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.FieldBuilder.IsDefined
		private static bool CallerMethod1669(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.FieldBuilder.GetCustomAttributes
		private static bool CallerMethod1670(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.FieldBuilder.GetCustomAttributes
		private static bool CallerMethod1671(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.FieldBuilder.get_ReflectedType
		private static bool CallerMethod1672(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.FieldBuilder.get_DeclaringType
		private static bool CallerMethod1673(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.FieldBuilder.get_Name
		private static bool CallerMethod1674(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.FieldBuilder.GetToken
		private static bool CallerMethod1675(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.FieldBuilder.SetOffset
		private static bool CallerMethod1676(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.FieldBuilder.SetMarshal
		private static bool CallerMethod1677(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.FieldBuilder.SetConstant
		private static bool CallerMethod1678(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.FieldBuilder.SetCustomAttribute
		private static bool CallerMethod1679(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.FieldBuilder.SetCustomAttribute
		private static bool CallerMethod1680(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Reflection.FieldAttributes get_Attributes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1664), "LIBRARY", "System.Reflection.Emit.FieldBuilder.get_Attributes()", paramObjs, typeof(System.Reflection.FieldAttributes), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.FieldAttributes)retValue;
		}

		public static System.RuntimeFieldHandle get_FieldHandle(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1665), "LIBRARY", "System.Reflection.Emit.FieldBuilder.get_FieldHandle()", paramObjs, typeof(System.RuntimeFieldHandle), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.RuntimeFieldHandle)retValue;
		}

		public static void SetValue(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj, System.Object val, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			paramObjs[2] = val;
			paramObjs[3] = invokeAttr;
			paramObjs[4] = binder;
			paramObjs[5] = culture;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1666), "LIBRARY", "System.Reflection.Emit.FieldBuilder.SetValue(Object, Object, BindingFlags, Binder, CultureInfo)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Object GetValue(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1667), "LIBRARY", "System.Reflection.Emit.FieldBuilder.GetValue(Object)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Type get_FieldType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1668), "LIBRARY", "System.Reflection.Emit.FieldBuilder.get_FieldType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Boolean IsDefined(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type attributeType, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeType;
			paramObjs[2] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1669), "LIBRARY", "System.Reflection.Emit.FieldBuilder.IsDefined(Type, Boolean)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Object[] GetCustomAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1670), "LIBRARY", "System.Reflection.Emit.FieldBuilder.GetCustomAttributes(Boolean)", paramObjs, typeof(System.Object[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object[])retValue;
		}

		public static System.Object[] GetCustomAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type attributeType, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeType;
			paramObjs[2] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1671), "LIBRARY", "System.Reflection.Emit.FieldBuilder.GetCustomAttributes(Type, Boolean)", paramObjs, typeof(System.Object[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object[])retValue;
		}

		public static System.Type get_ReflectedType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1672), "LIBRARY", "System.Reflection.Emit.FieldBuilder.get_ReflectedType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Type get_DeclaringType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1673), "LIBRARY", "System.Reflection.Emit.FieldBuilder.get_DeclaringType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1674), "LIBRARY", "System.Reflection.Emit.FieldBuilder.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Reflection.Emit.FieldToken GetToken(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1675), "LIBRARY", "System.Reflection.Emit.FieldBuilder.GetToken()", paramObjs, typeof(System.Reflection.Emit.FieldToken), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.FieldToken)retValue;
		}

		public static void SetOffset(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 iOffset)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = iOffset;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1676), "LIBRARY", "System.Reflection.Emit.FieldBuilder.SetOffset(Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetMarshal(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.UnmanagedMarshal unmanagedMarshal)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = unmanagedMarshal;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1677), "LIBRARY", "System.Reflection.Emit.FieldBuilder.SetMarshal(UnmanagedMarshal)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetConstant(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object defaultValue)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = defaultValue;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1678), "LIBRARY", "System.Reflection.Emit.FieldBuilder.SetConstant(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.ConstructorInfo con, System.Byte[] binaryAttribute)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = con;
			paramObjs[2] = binaryAttribute;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1679), "LIBRARY", "System.Reflection.Emit.FieldBuilder.SetCustomAttribute(ConstructorInfo, Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.CustomAttributeBuilder customBuilder)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = customBuilder;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1680), "LIBRARY", "System.Reflection.Emit.FieldBuilder.SetCustomAttribute(CustomAttributeBuilder)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.Emit.ILGenerator")]
	public class HandlerClass142
	{
		// System.Reflection.Emit.ILGenerator.EndScope
		private static bool CallerMethod1681(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.BeginScope
		private static bool CallerMethod1682(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.MarkSequencePoint
		private static bool CallerMethod1683(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.EmitWriteLine
		private static bool CallerMethod1684(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.EmitWriteLine
		private static bool CallerMethod1685(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.EmitWriteLine
		private static bool CallerMethod1686(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.ThrowException
		private static bool CallerMethod1687(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.MarkLabel
		private static bool CallerMethod1688(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.DefineLabel
		private static bool CallerMethod1689(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.BeginFinallyBlock
		private static bool CallerMethod1690(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.BeginFaultBlock
		private static bool CallerMethod1691(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.BeginCatchBlock
		private static bool CallerMethod1692(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock
		private static bool CallerMethod1693(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.EndExceptionBlock
		private static bool CallerMethod1694(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.BeginExceptionBlock
		private static bool CallerMethod1695(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.Emit
		private static bool CallerMethod1696(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.Emit
		private static bool CallerMethod1697(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.Emit
		private static bool CallerMethod1698(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.Emit
		private static bool CallerMethod1699(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.Emit
		private static bool CallerMethod1700(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.Emit
		private static bool CallerMethod1701(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.Emit
		private static bool CallerMethod1702(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.Emit
		private static bool CallerMethod1703(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.Emit
		private static bool CallerMethod1704(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.Emit
		private static bool CallerMethod1705(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.Emit
		private static bool CallerMethod1706(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.Emit
		private static bool CallerMethod1707(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.Emit
		private static bool CallerMethod1708(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.Emit
		private static bool CallerMethod1709(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.Emit
		private static bool CallerMethod1710(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.Emit
		private static bool CallerMethod1711(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.Emit
		private static bool CallerMethod1712(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.EmitCalli
		private static bool CallerMethod1713(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.EmitCalli
		private static bool CallerMethod1714(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.EmitCall
		private static bool CallerMethod1715(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.DeclareLocal
		private static bool CallerMethod1716(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ILGenerator.UsingNamespace
		private static bool CallerMethod1717(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void EndScope(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1681), "LIBRARY", "System.Reflection.Emit.ILGenerator.EndScope()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void BeginScope(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1682), "LIBRARY", "System.Reflection.Emit.ILGenerator.BeginScope()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void MarkSequencePoint(HeatDotNet.MethodInterceptInfo methodIntercept, System.Diagnostics.SymbolStore.ISymbolDocumentWriter document, System.Int32 startLine, System.Int32 startColumn, System.Int32 endLine, System.Int32 endColumn)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = document;
			paramObjs[2] = startLine;
			paramObjs[3] = startColumn;
			paramObjs[4] = endLine;
			paramObjs[5] = endColumn;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1683), "LIBRARY", "System.Reflection.Emit.ILGenerator.MarkSequencePoint(ISymbolDocumentWriter, Int32, Int32, Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void EmitWriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.FieldInfo fld)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = fld;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1684), "LIBRARY", "System.Reflection.Emit.ILGenerator.EmitWriteLine(FieldInfo)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void EmitWriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.LocalBuilder localBuilder)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localBuilder;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1685), "LIBRARY", "System.Reflection.Emit.ILGenerator.EmitWriteLine(LocalBuilder)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void EmitWriteLine(HeatDotNet.MethodInterceptInfo methodIntercept, System.String value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1686), "LIBRARY", "System.Reflection.Emit.ILGenerator.EmitWriteLine(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ThrowException(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type excType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = excType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1687), "LIBRARY", "System.Reflection.Emit.ILGenerator.ThrowException(Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void MarkLabel(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.Label loc)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = loc;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1688), "LIBRARY", "System.Reflection.Emit.ILGenerator.MarkLabel(Label)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Reflection.Emit.Label DefineLabel(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1689), "LIBRARY", "System.Reflection.Emit.ILGenerator.DefineLabel()", paramObjs, typeof(System.Reflection.Emit.Label), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.Label)retValue;
		}

		public static void BeginFinallyBlock(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1690), "LIBRARY", "System.Reflection.Emit.ILGenerator.BeginFinallyBlock()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void BeginFaultBlock(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1691), "LIBRARY", "System.Reflection.Emit.ILGenerator.BeginFaultBlock()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void BeginCatchBlock(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type exceptionType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = exceptionType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1692), "LIBRARY", "System.Reflection.Emit.ILGenerator.BeginCatchBlock(Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void BeginExceptFilterBlock(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1693), "LIBRARY", "System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void EndExceptionBlock(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1694), "LIBRARY", "System.Reflection.Emit.ILGenerator.EndExceptionBlock()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Reflection.Emit.Label BeginExceptionBlock(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1695), "LIBRARY", "System.Reflection.Emit.ILGenerator.BeginExceptionBlock()", paramObjs, typeof(System.Reflection.Emit.Label), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.Label)retValue;
		}

		public static void Emit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.LocalBuilder local)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = opcode;
			paramObjs[2] = local;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1696), "LIBRARY", "System.Reflection.Emit.ILGenerator.Emit(OpCode, LocalBuilder)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Emit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.OpCode opcode, System.String str)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = opcode;
			paramObjs[2] = str;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1697), "LIBRARY", "System.Reflection.Emit.ILGenerator.Emit(OpCode, String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Emit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.OpCode opcode, System.Reflection.FieldInfo field)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = opcode;
			paramObjs[2] = field;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1698), "LIBRARY", "System.Reflection.Emit.ILGenerator.Emit(OpCode, FieldInfo)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Emit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label[] labels)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = opcode;
			paramObjs[2] = labels;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1699), "LIBRARY", "System.Reflection.Emit.ILGenerator.Emit(OpCode, Label[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Emit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label label)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = opcode;
			paramObjs[2] = label;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1700), "LIBRARY", "System.Reflection.Emit.ILGenerator.Emit(OpCode, Label)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Emit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.OpCode opcode, System.Double arg)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = opcode;
			paramObjs[2] = arg;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1701), "LIBRARY", "System.Reflection.Emit.ILGenerator.Emit(OpCode, Double)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Emit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.OpCode opcode, System.Single arg)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = opcode;
			paramObjs[2] = arg;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1702), "LIBRARY", "System.Reflection.Emit.ILGenerator.Emit(OpCode, Single)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Emit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.OpCode opcode, System.Int64 arg)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = opcode;
			paramObjs[2] = arg;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1703), "LIBRARY", "System.Reflection.Emit.ILGenerator.Emit(OpCode, Int64)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Emit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.OpCode opcode, System.Type cls)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = opcode;
			paramObjs[2] = cls;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1704), "LIBRARY", "System.Reflection.Emit.ILGenerator.Emit(OpCode, Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Emit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.OpCode opcode, System.Reflection.ConstructorInfo con)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = opcode;
			paramObjs[2] = con;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1705), "LIBRARY", "System.Reflection.Emit.ILGenerator.Emit(OpCode, ConstructorInfo)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Emit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.SignatureHelper signature)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = opcode;
			paramObjs[2] = signature;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1706), "LIBRARY", "System.Reflection.Emit.ILGenerator.Emit(OpCode, SignatureHelper)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Emit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.OpCode opcode, System.Reflection.MethodInfo meth)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = opcode;
			paramObjs[2] = meth;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1707), "LIBRARY", "System.Reflection.Emit.ILGenerator.Emit(OpCode, MethodInfo)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Emit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.OpCode opcode, System.Int32 arg)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = opcode;
			paramObjs[2] = arg;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1708), "LIBRARY", "System.Reflection.Emit.ILGenerator.Emit(OpCode, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Emit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.OpCode opcode, System.Int16 arg)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = opcode;
			paramObjs[2] = arg;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1709), "LIBRARY", "System.Reflection.Emit.ILGenerator.Emit(OpCode, Int16)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Emit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.OpCode opcode, System.Byte arg)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = opcode;
			paramObjs[2] = arg;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1710), "LIBRARY", "System.Reflection.Emit.ILGenerator.Emit(OpCode, Byte)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Emit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.OpCode opcode)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = opcode;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1711), "LIBRARY", "System.Reflection.Emit.ILGenerator.Emit(OpCode)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void Emit(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.OpCode opcode, System.SByte arg)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = opcode;
			paramObjs[2] = arg;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1712), "LIBRARY", "System.Reflection.Emit.ILGenerator.Emit(OpCode, SByte)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void EmitCalli(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.OpCode opcode, System.Reflection.CallingConventions callingConvention, System.Type returnType, System.Type[] parameterTypes, System.Type[] optionalParameterTypes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = opcode;
			paramObjs[2] = callingConvention;
			paramObjs[3] = returnType;
			paramObjs[4] = parameterTypes;
			paramObjs[5] = optionalParameterTypes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1713), "LIBRARY", "System.Reflection.Emit.ILGenerator.EmitCalli(OpCode, CallingConventions, Type, Type[], Type[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void EmitCalli(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.OpCode opcode, System.Runtime.InteropServices.CallingConvention unmanagedCallConv, System.Type returnType, System.Type[] parameterTypes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = opcode;
			paramObjs[2] = unmanagedCallConv;
			paramObjs[3] = returnType;
			paramObjs[4] = parameterTypes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1714), "LIBRARY", "System.Reflection.Emit.ILGenerator.EmitCalli(OpCode, CallingConvention, Type, Type[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void EmitCall(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.OpCode opcode, System.Reflection.MethodInfo methodInfo, System.Type[] optionalParameterTypes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = opcode;
			paramObjs[2] = methodInfo;
			paramObjs[3] = optionalParameterTypes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1715), "LIBRARY", "System.Reflection.Emit.ILGenerator.EmitCall(OpCode, MethodInfo, Type[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Reflection.Emit.LocalBuilder DeclareLocal(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type localType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = localType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1716), "LIBRARY", "System.Reflection.Emit.ILGenerator.DeclareLocal(Type)", paramObjs, typeof(System.Reflection.Emit.LocalBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.LocalBuilder)retValue;
		}

		public static void UsingNamespace(HeatDotNet.MethodInterceptInfo methodIntercept, System.String usingNamespace)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = usingNamespace;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1717), "LIBRARY", "System.Reflection.Emit.ILGenerator.UsingNamespace(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.Emit.LocalBuilder")]
	public class HandlerClass143
	{
		// System.Reflection.Emit.LocalBuilder.SetLocalSymInfo
		private static bool CallerMethod1718(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.LocalBuilder.SetLocalSymInfo
		private static bool CallerMethod1719(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.LocalBuilder.get_LocalType
		private static bool CallerMethod1720(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void SetLocalSymInfo(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1718), "LIBRARY", "System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetLocalSymInfo(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Int32 startOffset, System.Int32 endOffset)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = startOffset;
			paramObjs[3] = endOffset;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1719), "LIBRARY", "System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String, Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Type get_LocalType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1720), "LIBRARY", "System.Reflection.Emit.LocalBuilder.get_LocalType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.Emit.MethodBuilder")]
	public class HandlerClass144
	{
		// System.Reflection.Emit.MethodBuilder.GetBaseDefinition
		private static bool CallerMethod1721(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.get_ReturnTypeCustomAttributes
		private static bool CallerMethod1722(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.get_ReturnType
		private static bool CallerMethod1723(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.Invoke
		private static bool CallerMethod1724(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.get_CallingConvention
		private static bool CallerMethod1725(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.get_Attributes
		private static bool CallerMethod1726(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.get_MethodHandle
		private static bool CallerMethod1727(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags
		private static bool CallerMethod1728(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.GetParameters
		private static bool CallerMethod1729(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.IsDefined
		private static bool CallerMethod1730(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.GetCustomAttributes
		private static bool CallerMethod1731(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.GetCustomAttributes
		private static bool CallerMethod1732(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.get_ReflectedType
		private static bool CallerMethod1733(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.get_DeclaringType
		private static bool CallerMethod1734(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.get_Name
		private static bool CallerMethod1735(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.GetHashCode
		private static bool CallerMethod1736(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.Equals
		private static bool CallerMethod1737(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.ToString
		private static bool CallerMethod1738(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.GetToken
		private static bool CallerMethod1739(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.DefineParameter
		private static bool CallerMethod1740(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.SetMarshal
		private static bool CallerMethod1741(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute
		private static bool CallerMethod1742(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity
		private static bool CallerMethod1743(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.CreateMethodBody
		private static bool CallerMethod1744(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.SetImplementationFlags
		private static bool CallerMethod1745(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.GetILGenerator
		private static bool CallerMethod1746(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.GetILGenerator
		private static bool CallerMethod1747(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.get_InitLocals
		private static bool CallerMethod1748(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.set_InitLocals
		private static bool CallerMethod1749(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.GetModule
		private static bool CallerMethod1750(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.get_Signature
		private static bool CallerMethod1751(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.SetCustomAttribute
		private static bool CallerMethod1752(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.MethodBuilder.SetCustomAttribute
		private static bool CallerMethod1753(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Reflection.MethodInfo GetBaseDefinition(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1721), "LIBRARY", "System.Reflection.Emit.MethodBuilder.GetBaseDefinition()", paramObjs, typeof(System.Reflection.MethodInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodInfo)retValue;
		}

		public static System.Reflection.ICustomAttributeProvider get_ReturnTypeCustomAttributes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1722), "LIBRARY", "System.Reflection.Emit.MethodBuilder.get_ReturnTypeCustomAttributes()", paramObjs, typeof(System.Reflection.ICustomAttributeProvider), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.ICustomAttributeProvider)retValue;
		}

		public static System.Type get_ReturnType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1723), "LIBRARY", "System.Reflection.Emit.MethodBuilder.get_ReturnType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Object Invoke(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			paramObjs[2] = invokeAttr;
			paramObjs[3] = binder;
			paramObjs[4] = parameters;
			paramObjs[5] = culture;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1724), "LIBRARY", "System.Reflection.Emit.MethodBuilder.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Reflection.CallingConventions get_CallingConvention(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1725), "LIBRARY", "System.Reflection.Emit.MethodBuilder.get_CallingConvention()", paramObjs, typeof(System.Reflection.CallingConventions), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.CallingConventions)retValue;
		}

		public static System.Reflection.MethodAttributes get_Attributes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1726), "LIBRARY", "System.Reflection.Emit.MethodBuilder.get_Attributes()", paramObjs, typeof(System.Reflection.MethodAttributes), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodAttributes)retValue;
		}

		public static System.RuntimeMethodHandle get_MethodHandle(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1727), "LIBRARY", "System.Reflection.Emit.MethodBuilder.get_MethodHandle()", paramObjs, typeof(System.RuntimeMethodHandle), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.RuntimeMethodHandle)retValue;
		}

		public static System.Reflection.MethodImplAttributes GetMethodImplementationFlags(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1728), "LIBRARY", "System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags()", paramObjs, typeof(System.Reflection.MethodImplAttributes), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodImplAttributes)retValue;
		}

		public static System.Reflection.ParameterInfo[] GetParameters(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1729), "LIBRARY", "System.Reflection.Emit.MethodBuilder.GetParameters()", paramObjs, typeof(System.Reflection.ParameterInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.ParameterInfo[])retValue;
		}

		public static System.Boolean IsDefined(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type attributeType, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeType;
			paramObjs[2] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1730), "LIBRARY", "System.Reflection.Emit.MethodBuilder.IsDefined(Type, Boolean)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Object[] GetCustomAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1731), "LIBRARY", "System.Reflection.Emit.MethodBuilder.GetCustomAttributes(Boolean)", paramObjs, typeof(System.Object[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object[])retValue;
		}

		public static System.Object[] GetCustomAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type attributeType, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeType;
			paramObjs[2] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1732), "LIBRARY", "System.Reflection.Emit.MethodBuilder.GetCustomAttributes(Type, Boolean)", paramObjs, typeof(System.Object[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object[])retValue;
		}

		public static System.Type get_ReflectedType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1733), "LIBRARY", "System.Reflection.Emit.MethodBuilder.get_ReflectedType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Type get_DeclaringType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1734), "LIBRARY", "System.Reflection.Emit.MethodBuilder.get_DeclaringType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1735), "LIBRARY", "System.Reflection.Emit.MethodBuilder.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1736), "LIBRARY", "System.Reflection.Emit.MethodBuilder.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1737), "LIBRARY", "System.Reflection.Emit.MethodBuilder.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1738), "LIBRARY", "System.Reflection.Emit.MethodBuilder.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Reflection.Emit.MethodToken GetToken(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1739), "LIBRARY", "System.Reflection.Emit.MethodBuilder.GetToken()", paramObjs, typeof(System.Reflection.Emit.MethodToken), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.MethodToken)retValue;
		}

		public static System.Reflection.Emit.ParameterBuilder DefineParameter(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 position, System.Reflection.ParameterAttributes attributes, System.String strParamName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = position;
			paramObjs[2] = attributes;
			paramObjs[3] = strParamName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1740), "LIBRARY", "System.Reflection.Emit.MethodBuilder.DefineParameter(Int32, ParameterAttributes, String)", paramObjs, typeof(System.Reflection.Emit.ParameterBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.ParameterBuilder)retValue;
		}

		public static void SetMarshal(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.UnmanagedMarshal unmanagedMarshal)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = unmanagedMarshal;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1741), "LIBRARY", "System.Reflection.Emit.MethodBuilder.SetMarshal(UnmanagedMarshal)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetSymCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Byte[] data)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = data;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1742), "LIBRARY", "System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(String, Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddDeclarativeSecurity(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = action;
			paramObjs[2] = pset;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1743), "LIBRARY", "System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(SecurityAction, PermissionSet)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void CreateMethodBody(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] il, System.Int32 count)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = il;
			paramObjs[2] = count;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1744), "LIBRARY", "System.Reflection.Emit.MethodBuilder.CreateMethodBody(Byte[], Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetImplementationFlags(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.MethodImplAttributes attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1745), "LIBRARY", "System.Reflection.Emit.MethodBuilder.SetImplementationFlags(MethodImplAttributes)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Reflection.Emit.ILGenerator GetILGenerator(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1746), "LIBRARY", "System.Reflection.Emit.MethodBuilder.GetILGenerator()", paramObjs, typeof(System.Reflection.Emit.ILGenerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.ILGenerator)retValue;
		}

		public static System.Reflection.Emit.ILGenerator GetILGenerator(HeatDotNet.MethodInterceptInfo methodIntercept, System.Int32 size)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = size;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1747), "LIBRARY", "System.Reflection.Emit.MethodBuilder.GetILGenerator(Int32)", paramObjs, typeof(System.Reflection.Emit.ILGenerator), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.ILGenerator)retValue;
		}

		public static System.Boolean get_InitLocals(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1748), "LIBRARY", "System.Reflection.Emit.MethodBuilder.get_InitLocals()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void set_InitLocals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean value)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = value;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1749), "LIBRARY", "System.Reflection.Emit.MethodBuilder.set_InitLocals(Boolean)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Reflection.Module GetModule(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1750), "LIBRARY", "System.Reflection.Emit.MethodBuilder.GetModule()", paramObjs, typeof(System.Reflection.Module), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Module)retValue;
		}

		public static System.String get_Signature(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1751), "LIBRARY", "System.Reflection.Emit.MethodBuilder.get_Signature()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void SetCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.ConstructorInfo con, System.Byte[] binaryAttribute)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = con;
			paramObjs[2] = binaryAttribute;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1752), "LIBRARY", "System.Reflection.Emit.MethodBuilder.SetCustomAttribute(ConstructorInfo, Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.CustomAttributeBuilder customBuilder)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = customBuilder;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1753), "LIBRARY", "System.Reflection.Emit.MethodBuilder.SetCustomAttribute(CustomAttributeBuilder)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.Emit.CustomAttributeBuilder")]
	public class HandlerClass145
	{
		// System.Reflection.Emit.CustomAttributeBuilder..ctor
		private static bool CallerMethod1754(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.CustomAttributeBuilder..ctor
		private static bool CallerMethod1755(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.CustomAttributeBuilder..ctor
		private static bool CallerMethod1756(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.CustomAttributeBuilder..ctor
		private static bool CallerMethod1757(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 7) return false;
			Object[] constructorParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, constructorParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(constructorParams);
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Reflection.ConstructorInfo con, System.Object[] constructorArgs)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = con;
			paramObjs[2] = constructorArgs;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1754), "LIBRARY", "System.Reflection.Emit.CustomAttributeBuilder.ctor(ConstructorInfo, Object[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Reflection.ConstructorInfo con, System.Object[] constructorArgs, System.Reflection.PropertyInfo[] namedProperties, System.Object[] propertyValues)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = con;
			paramObjs[2] = constructorArgs;
			paramObjs[3] = namedProperties;
			paramObjs[4] = propertyValues;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1755), "LIBRARY", "System.Reflection.Emit.CustomAttributeBuilder.ctor(ConstructorInfo, Object[], PropertyInfo[], Object[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Reflection.ConstructorInfo con, System.Object[] constructorArgs, System.Reflection.FieldInfo[] namedFields, System.Object[] fieldValues)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = con;
			paramObjs[2] = constructorArgs;
			paramObjs[3] = namedFields;
			paramObjs[4] = fieldValues;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1756), "LIBRARY", "System.Reflection.Emit.CustomAttributeBuilder.ctor(ConstructorInfo, Object[], FieldInfo[], Object[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void ctor(HeatDotNet.MethodInterceptInfo constructorIntercept, System.Reflection.ConstructorInfo con, System.Object[] constructorArgs, System.Reflection.PropertyInfo[] namedProperties, System.Object[] propertyValues, System.Reflection.FieldInfo[] namedFields, System.Object[] fieldValues)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[7];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = constructorIntercept;
			paramObjs[1] = con;
			paramObjs[2] = constructorArgs;
			paramObjs[3] = namedProperties;
			paramObjs[4] = propertyValues;
			paramObjs[5] = namedFields;
			paramObjs[6] = fieldValues;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1757), "LIBRARY", "System.Reflection.Emit.CustomAttributeBuilder.ctor(ConstructorInfo, Object[], PropertyInfo[], Object[], FieldInfo[], Object[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.Emit.MethodRental")]
	public class HandlerClass146
	{
		// System.Reflection.Emit.MethodRental.SwapMethodBody
		private static bool CallerMethod1758(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static void SwapMethodBody(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type cls, System.Int32 methodtoken, System.IntPtr rgIL, System.Int32 methodSize, System.Int32 flags)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = cls;
			paramObjs[2] = methodtoken;
			paramObjs[3] = rgIL;
			paramObjs[4] = methodSize;
			paramObjs[5] = flags;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1758), "LIBRARY", "System.Reflection.Emit.MethodRental.SwapMethodBody(Type, Int32, IntPtr, Int32, Int32)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.Emit.ModuleBuilder")]
	public class HandlerClass147
	{
		// System.Reflection.Emit.ModuleBuilder.GetTypes
		private static bool CallerMethod1759(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.get_FullyQualifiedName
		private static bool CallerMethod1760(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.GetType
		private static bool CallerMethod1761(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.GetType
		private static bool CallerMethod1762(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.GetType
		private static bool CallerMethod1763(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.DefineType
		private static bool CallerMethod1764(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.DefineType
		private static bool CallerMethod1765(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.DefineType
		private static bool CallerMethod1766(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.DefineType
		private static bool CallerMethod1767(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.DefineType
		private static bool CallerMethod1768(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.DefineType
		private static bool CallerMethod1769(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.DefineType
		private static bool CallerMethod1770(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.DefineEnum
		private static bool CallerMethod1771(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.DefineResource
		private static bool CallerMethod1772(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.DefineResource
		private static bool CallerMethod1773(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod
		private static bool CallerMethod1774(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod
		private static bool CallerMethod1775(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.DefineInitializedData
		private static bool CallerMethod1776(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.DefineUninitializedData
		private static bool CallerMethod1777(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.GetTypeToken
		private static bool CallerMethod1778(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.GetTypeToken
		private static bool CallerMethod1779(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.GetMethodToken
		private static bool CallerMethod1780(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken
		private static bool CallerMethod1781(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.GetArrayMethod
		private static bool CallerMethod1782(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.GetFieldToken
		private static bool CallerMethod1783(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.GetStringConstant
		private static bool CallerMethod1784(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.SetCustomAttribute
		private static bool CallerMethod1785(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.SetCustomAttribute
		private static bool CallerMethod1786(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.GetSignatureToken
		private static bool CallerMethod1787(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.GetSignatureToken
		private static bool CallerMethod1788(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.GetConstructorToken
		private static bool CallerMethod1789(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.GetSymWriter
		private static bool CallerMethod1790(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.SetUserEntryPoint
		private static bool CallerMethod1791(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.DefineDocument
		private static bool CallerMethod1792(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.SetSymCustomAttribute
		private static bool CallerMethod1793(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod
		private static bool CallerMethod1794(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 9) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod
		private static bool CallerMethod1795(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 10) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions
		private static bool CallerMethod1796(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.IsTransient
		private static bool CallerMethod1797(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource
		private static bool CallerMethod1798(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource
		private static bool CallerMethod1799(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Type[] GetTypes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1759), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.GetTypes()", paramObjs, typeof(System.Type[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type[])retValue;
		}

		public static System.String get_FullyQualifiedName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1760), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.get_FullyQualifiedName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Type GetType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String className, System.Boolean throwOnError, System.Boolean ignoreCase)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = className;
			paramObjs[2] = throwOnError;
			paramObjs[3] = ignoreCase;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1761), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.GetType(String, Boolean, Boolean)", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Type GetType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String className)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = className;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1762), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.GetType(String)", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Type GetType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String className, System.Boolean ignoreCase)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = className;
			paramObjs[2] = ignoreCase;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1763), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.GetType(String, Boolean)", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Reflection.Emit.TypeBuilder DefineType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1764), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.DefineType(String)", paramObjs, typeof(System.Reflection.Emit.TypeBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.TypeBuilder)retValue;
		}

		public static System.Reflection.Emit.TypeBuilder DefineType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.TypeAttributes attr, System.Type parent, System.Type[] interfaces)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = attr;
			paramObjs[3] = parent;
			paramObjs[4] = interfaces;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1765), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.DefineType(String, TypeAttributes, Type, Type[])", paramObjs, typeof(System.Reflection.Emit.TypeBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.TypeBuilder)retValue;
		}

		public static System.Reflection.Emit.TypeBuilder DefineType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.TypeAttributes attr, System.Type parent)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = attr;
			paramObjs[3] = parent;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1766), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.DefineType(String, TypeAttributes, Type)", paramObjs, typeof(System.Reflection.Emit.TypeBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.TypeBuilder)retValue;
		}

		public static System.Reflection.Emit.TypeBuilder DefineType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.TypeAttributes attr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = attr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1767), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.DefineType(String, TypeAttributes)", paramObjs, typeof(System.Reflection.Emit.TypeBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.TypeBuilder)retValue;
		}

		public static System.Reflection.Emit.TypeBuilder DefineType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.TypeAttributes attr, System.Type parent, System.Reflection.Emit.PackingSize packingSize, System.Int32 typesize)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = attr;
			paramObjs[3] = parent;
			paramObjs[4] = packingSize;
			paramObjs[5] = typesize;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1768), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.DefineType(String, TypeAttributes, Type, PackingSize, Int32)", paramObjs, typeof(System.Reflection.Emit.TypeBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.TypeBuilder)retValue;
		}

		public static System.Reflection.Emit.TypeBuilder DefineType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.TypeAttributes attr, System.Type parent, System.Int32 typesize)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = attr;
			paramObjs[3] = parent;
			paramObjs[4] = typesize;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1769), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.DefineType(String, TypeAttributes, Type, Int32)", paramObjs, typeof(System.Reflection.Emit.TypeBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.TypeBuilder)retValue;
		}

		public static System.Reflection.Emit.TypeBuilder DefineType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.TypeAttributes attr, System.Type parent, System.Reflection.Emit.PackingSize packsize)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = attr;
			paramObjs[3] = parent;
			paramObjs[4] = packsize;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1770), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.DefineType(String, TypeAttributes, Type, PackingSize)", paramObjs, typeof(System.Reflection.Emit.TypeBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.TypeBuilder)retValue;
		}

		public static System.Reflection.Emit.EnumBuilder DefineEnum(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.TypeAttributes visibility, System.Type underlyingType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = visibility;
			paramObjs[3] = underlyingType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1771), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.DefineEnum(String, TypeAttributes, Type)", paramObjs, typeof(System.Reflection.Emit.EnumBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.EnumBuilder)retValue;
		}

		public static System.Resources.IResourceWriter DefineResource(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String description)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = description;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1772), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.DefineResource(String, String)", paramObjs, typeof(System.Resources.IResourceWriter), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Resources.IResourceWriter)retValue;
		}

		public static System.Resources.IResourceWriter DefineResource(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String description, System.Reflection.ResourceAttributes attribute)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = description;
			paramObjs[3] = attribute;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1773), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.DefineResource(String, String, ResourceAttributes)", paramObjs, typeof(System.Resources.IResourceWriter), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Resources.IResourceWriter)retValue;
		}

		public static System.Reflection.Emit.MethodBuilder DefineGlobalMethod(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.MethodAttributes attributes, System.Type returnType, System.Type[] parameterTypes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = attributes;
			paramObjs[3] = returnType;
			paramObjs[4] = parameterTypes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1774), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(String, MethodAttributes, Type, Type[])", paramObjs, typeof(System.Reflection.Emit.MethodBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.MethodBuilder)retValue;
		}

		public static System.Reflection.Emit.MethodBuilder DefineGlobalMethod(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, System.Type returnType, System.Type[] parameterTypes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = attributes;
			paramObjs[3] = callingConvention;
			paramObjs[4] = returnType;
			paramObjs[5] = parameterTypes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1775), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(String, MethodAttributes, CallingConventions, Type, Type[])", paramObjs, typeof(System.Reflection.Emit.MethodBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.MethodBuilder)retValue;
		}

		public static System.Reflection.Emit.FieldBuilder DefineInitializedData(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Byte[] data, System.Reflection.FieldAttributes attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = data;
			paramObjs[3] = attributes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1776), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.DefineInitializedData(String, Byte[], FieldAttributes)", paramObjs, typeof(System.Reflection.Emit.FieldBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.FieldBuilder)retValue;
		}

		public static System.Reflection.Emit.FieldBuilder DefineUninitializedData(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Int32 size, System.Reflection.FieldAttributes attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = size;
			paramObjs[3] = attributes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1777), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(String, Int32, FieldAttributes)", paramObjs, typeof(System.Reflection.Emit.FieldBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.FieldBuilder)retValue;
		}

		public static System.Reflection.Emit.TypeToken GetTypeToken(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type type)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = type;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1778), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.GetTypeToken(Type)", paramObjs, typeof(System.Reflection.Emit.TypeToken), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.TypeToken)retValue;
		}

		public static System.Reflection.Emit.TypeToken GetTypeToken(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1779), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.GetTypeToken(String)", paramObjs, typeof(System.Reflection.Emit.TypeToken), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.TypeToken)retValue;
		}

		public static System.Reflection.Emit.MethodToken GetMethodToken(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.MethodInfo method)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = method;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1780), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.GetMethodToken(MethodInfo)", paramObjs, typeof(System.Reflection.Emit.MethodToken), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.MethodToken)retValue;
		}

		public static System.Reflection.Emit.MethodToken GetArrayMethodToken(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type arrayClass, System.String methodName, System.Reflection.CallingConventions callingConvention, System.Type returnType, System.Type[] parameterTypes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = arrayClass;
			paramObjs[2] = methodName;
			paramObjs[3] = callingConvention;
			paramObjs[4] = returnType;
			paramObjs[5] = parameterTypes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1781), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(Type, String, CallingConventions, Type, Type[])", paramObjs, typeof(System.Reflection.Emit.MethodToken), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.MethodToken)retValue;
		}

		public static System.Reflection.MethodInfo GetArrayMethod(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type arrayClass, System.String methodName, System.Reflection.CallingConventions callingConvention, System.Type returnType, System.Type[] parameterTypes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = arrayClass;
			paramObjs[2] = methodName;
			paramObjs[3] = callingConvention;
			paramObjs[4] = returnType;
			paramObjs[5] = parameterTypes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1782), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.GetArrayMethod(Type, String, CallingConventions, Type, Type[])", paramObjs, typeof(System.Reflection.MethodInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodInfo)retValue;
		}

		public static System.Reflection.Emit.FieldToken GetFieldToken(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.FieldInfo field)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = field;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1783), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.GetFieldToken(FieldInfo)", paramObjs, typeof(System.Reflection.Emit.FieldToken), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.FieldToken)retValue;
		}

		public static System.Reflection.Emit.StringToken GetStringConstant(HeatDotNet.MethodInterceptInfo methodIntercept, System.String str)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = str;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1784), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.GetStringConstant(String)", paramObjs, typeof(System.Reflection.Emit.StringToken), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.StringToken)retValue;
		}

		public static void SetCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.ConstructorInfo con, System.Byte[] binaryAttribute)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = con;
			paramObjs[2] = binaryAttribute;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1785), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(ConstructorInfo, Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.CustomAttributeBuilder customBuilder)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = customBuilder;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1786), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(CustomAttributeBuilder)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Reflection.Emit.SignatureToken GetSignatureToken(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.SignatureHelper sigHelper)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = sigHelper;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1787), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.GetSignatureToken(SignatureHelper)", paramObjs, typeof(System.Reflection.Emit.SignatureToken), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.SignatureToken)retValue;
		}

		public static System.Reflection.Emit.SignatureToken GetSignatureToken(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] sigBytes, System.Int32 sigLength)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = sigBytes;
			paramObjs[2] = sigLength;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1788), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.GetSignatureToken(Byte[], Int32)", paramObjs, typeof(System.Reflection.Emit.SignatureToken), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.SignatureToken)retValue;
		}

		public static System.Reflection.Emit.MethodToken GetConstructorToken(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.ConstructorInfo con)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = con;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1789), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.GetConstructorToken(ConstructorInfo)", paramObjs, typeof(System.Reflection.Emit.MethodToken), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.MethodToken)retValue;
		}

		public static System.Diagnostics.SymbolStore.ISymbolWriter GetSymWriter(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1790), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.GetSymWriter()", paramObjs, typeof(System.Diagnostics.SymbolStore.ISymbolWriter), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.SymbolStore.ISymbolWriter)retValue;
		}

		public static void SetUserEntryPoint(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.MethodInfo entryPoint)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = entryPoint;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1791), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.SetUserEntryPoint(MethodInfo)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Diagnostics.SymbolStore.ISymbolDocumentWriter DefineDocument(HeatDotNet.MethodInterceptInfo methodIntercept, System.String url, System.Guid language, System.Guid languageVendor, System.Guid documentType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = url;
			paramObjs[2] = language;
			paramObjs[3] = languageVendor;
			paramObjs[4] = documentType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1792), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.DefineDocument(String, Guid, Guid, Guid)", paramObjs, typeof(System.Diagnostics.SymbolStore.ISymbolDocumentWriter), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Diagnostics.SymbolStore.ISymbolDocumentWriter)retValue;
		}

		public static void SetSymCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Byte[] data)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = data;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1793), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.SetSymCustomAttribute(String, Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String dllName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, System.Type returnType, System.Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[9];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = dllName;
			paramObjs[3] = attributes;
			paramObjs[4] = callingConvention;
			paramObjs[5] = returnType;
			paramObjs[6] = parameterTypes;
			paramObjs[7] = nativeCallConv;
			paramObjs[8] = nativeCharSet;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1794), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(String, String, MethodAttributes, CallingConventions, Type, Type[], CallingConvention, CharSet)", paramObjs, typeof(System.Reflection.Emit.MethodBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.MethodBuilder)retValue;
		}

		public static System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String dllName, System.String entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, System.Type returnType, System.Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[10];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = dllName;
			paramObjs[3] = entryName;
			paramObjs[4] = attributes;
			paramObjs[5] = callingConvention;
			paramObjs[6] = returnType;
			paramObjs[7] = parameterTypes;
			paramObjs[8] = nativeCallConv;
			paramObjs[9] = nativeCharSet;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1795), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(String, String, String, MethodAttributes, CallingConventions, Type, Type[], CallingConvention, CharSet)", paramObjs, typeof(System.Reflection.Emit.MethodBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.MethodBuilder)retValue;
		}

		public static void CreateGlobalFunctions(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1796), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean IsTransient(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1797), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.IsTransient()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static void DefineUnmanagedResource(HeatDotNet.MethodInterceptInfo methodIntercept, System.Byte[] resource)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = resource;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1798), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void DefineUnmanagedResource(HeatDotNet.MethodInterceptInfo methodIntercept, System.String resourceFileName)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = resourceFileName;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1799), "LIBRARY", "System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(String)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.Emit.OpCodes")]
	public class HandlerClass148
	{
		// System.Reflection.Emit.OpCodes.TakesSingleByteArgument
		private static bool CallerMethod1800(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean TakesSingleByteArgument(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.OpCode inst)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inst;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1800), "LIBRARY", "System.Reflection.Emit.OpCodes.TakesSingleByteArgument(OpCode)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.Emit.ParameterBuilder")]
	public class HandlerClass149
	{
		// System.Reflection.Emit.ParameterBuilder.get_Attributes
		private static bool CallerMethod1801(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ParameterBuilder.get_Position
		private static bool CallerMethod1802(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ParameterBuilder.get_Name
		private static bool CallerMethod1803(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ParameterBuilder.GetToken
		private static bool CallerMethod1804(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ParameterBuilder.SetConstant
		private static bool CallerMethod1805(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ParameterBuilder.SetMarshal
		private static bool CallerMethod1806(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ParameterBuilder.SetCustomAttribute
		private static bool CallerMethod1807(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ParameterBuilder.SetCustomAttribute
		private static bool CallerMethod1808(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ParameterBuilder.get_IsIn
		private static bool CallerMethod1809(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ParameterBuilder.get_IsOut
		private static bool CallerMethod1810(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.ParameterBuilder.get_IsOptional
		private static bool CallerMethod1811(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 get_Attributes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1801), "LIBRARY", "System.Reflection.Emit.ParameterBuilder.get_Attributes()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Int32 get_Position(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1802), "LIBRARY", "System.Reflection.Emit.ParameterBuilder.get_Position()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1803), "LIBRARY", "System.Reflection.Emit.ParameterBuilder.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Reflection.Emit.ParameterToken GetToken(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1804), "LIBRARY", "System.Reflection.Emit.ParameterBuilder.GetToken()", paramObjs, typeof(System.Reflection.Emit.ParameterToken), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.ParameterToken)retValue;
		}

		public static void SetConstant(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object defaultValue)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = defaultValue;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1805), "LIBRARY", "System.Reflection.Emit.ParameterBuilder.SetConstant(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetMarshal(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.UnmanagedMarshal unmanagedMarshal)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = unmanagedMarshal;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1806), "LIBRARY", "System.Reflection.Emit.ParameterBuilder.SetMarshal(UnmanagedMarshal)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.ConstructorInfo con, System.Byte[] binaryAttribute)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = con;
			paramObjs[2] = binaryAttribute;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1807), "LIBRARY", "System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(ConstructorInfo, Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.CustomAttributeBuilder customBuilder)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = customBuilder;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1808), "LIBRARY", "System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(CustomAttributeBuilder)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Boolean get_IsIn(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1809), "LIBRARY", "System.Reflection.Emit.ParameterBuilder.get_IsIn()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsOut(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1810), "LIBRARY", "System.Reflection.Emit.ParameterBuilder.get_IsOut()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_IsOptional(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1811), "LIBRARY", "System.Reflection.Emit.ParameterBuilder.get_IsOptional()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.Emit.PropertyBuilder")]
	public class HandlerClass150
	{
		// System.Reflection.Emit.PropertyBuilder.get_CanWrite
		private static bool CallerMethod1812(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.get_CanRead
		private static bool CallerMethod1813(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.get_Attributes
		private static bool CallerMethod1814(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.GetIndexParameters
		private static bool CallerMethod1815(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.GetSetMethod
		private static bool CallerMethod1816(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.GetGetMethod
		private static bool CallerMethod1817(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.GetAccessors
		private static bool CallerMethod1818(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.SetValue
		private static bool CallerMethod1819(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 7) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.SetValue
		private static bool CallerMethod1820(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.GetValue
		private static bool CallerMethod1821(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.GetValue
		private static bool CallerMethod1822(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.get_PropertyType
		private static bool CallerMethod1823(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.IsDefined
		private static bool CallerMethod1824(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.GetCustomAttributes
		private static bool CallerMethod1825(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.GetCustomAttributes
		private static bool CallerMethod1826(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.get_ReflectedType
		private static bool CallerMethod1827(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.get_DeclaringType
		private static bool CallerMethod1828(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.get_Name
		private static bool CallerMethod1829(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.SetConstant
		private static bool CallerMethod1830(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.get_PropertyToken
		private static bool CallerMethod1831(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.SetGetMethod
		private static bool CallerMethod1832(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.SetSetMethod
		private static bool CallerMethod1833(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.AddOtherMethod
		private static bool CallerMethod1834(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.SetCustomAttribute
		private static bool CallerMethod1835(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.PropertyBuilder.SetCustomAttribute
		private static bool CallerMethod1836(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Boolean get_CanWrite(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1812), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.get_CanWrite()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean get_CanRead(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1813), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.get_CanRead()", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Reflection.PropertyAttributes get_Attributes(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1814), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.get_Attributes()", paramObjs, typeof(System.Reflection.PropertyAttributes), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.PropertyAttributes)retValue;
		}

		public static System.Reflection.ParameterInfo[] GetIndexParameters(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1815), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.GetIndexParameters()", paramObjs, typeof(System.Reflection.ParameterInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.ParameterInfo[])retValue;
		}

		public static System.Reflection.MethodInfo GetSetMethod(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean nonPublic)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = nonPublic;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1816), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.GetSetMethod(Boolean)", paramObjs, typeof(System.Reflection.MethodInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodInfo)retValue;
		}

		public static System.Reflection.MethodInfo GetGetMethod(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean nonPublic)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = nonPublic;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1817), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.GetGetMethod(Boolean)", paramObjs, typeof(System.Reflection.MethodInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodInfo)retValue;
		}

		public static System.Reflection.MethodInfo[] GetAccessors(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean nonPublic)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = nonPublic;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1818), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.GetAccessors(Boolean)", paramObjs, typeof(System.Reflection.MethodInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodInfo[])retValue;
		}

		public static void SetValue(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj, System.Object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] index, System.Globalization.CultureInfo culture)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[7];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			paramObjs[2] = value;
			paramObjs[3] = invokeAttr;
			paramObjs[4] = binder;
			paramObjs[5] = index;
			paramObjs[6] = culture;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1819), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.SetValue(Object, Object, BindingFlags, Binder, Object[], CultureInfo)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetValue(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj, System.Object value, System.Object[] index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			paramObjs[2] = value;
			paramObjs[3] = index;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1820), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.SetValue(Object, Object, Object[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Object GetValue(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] index, System.Globalization.CultureInfo culture)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			paramObjs[2] = invokeAttr;
			paramObjs[3] = binder;
			paramObjs[4] = index;
			paramObjs[5] = culture;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1821), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.GetValue(Object, BindingFlags, Binder, Object[], CultureInfo)", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Object GetValue(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj, System.Object[] index)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			paramObjs[2] = index;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1822), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.GetValue(Object, Object[])", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Type get_PropertyType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1823), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.get_PropertyType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Boolean IsDefined(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type attributeType, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeType;
			paramObjs[2] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1824), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.IsDefined(Type, Boolean)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Object[] GetCustomAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1825), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(Boolean)", paramObjs, typeof(System.Object[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object[])retValue;
		}

		public static System.Object[] GetCustomAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type attributeType, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeType;
			paramObjs[2] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1826), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(Type, Boolean)", paramObjs, typeof(System.Object[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object[])retValue;
		}

		public static System.Type get_ReflectedType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1827), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.get_ReflectedType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Type get_DeclaringType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1828), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.get_DeclaringType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1829), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void SetConstant(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object defaultValue)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = defaultValue;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1830), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.SetConstant(Object)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Reflection.Emit.PropertyToken get_PropertyToken(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1831), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.get_PropertyToken()", paramObjs, typeof(System.Reflection.Emit.PropertyToken), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.PropertyToken)retValue;
		}

		public static void SetGetMethod(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.MethodBuilder mdBuilder)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = mdBuilder;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1832), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.SetGetMethod(MethodBuilder)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetSetMethod(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.MethodBuilder mdBuilder)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = mdBuilder;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1833), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.SetSetMethod(MethodBuilder)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddOtherMethod(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.MethodBuilder mdBuilder)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = mdBuilder;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1834), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.AddOtherMethod(MethodBuilder)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.ConstructorInfo con, System.Byte[] binaryAttribute)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = con;
			paramObjs[2] = binaryAttribute;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1835), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(ConstructorInfo, Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.CustomAttributeBuilder customBuilder)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = customBuilder;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1836), "LIBRARY", "System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(CustomAttributeBuilder)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.Emit.SignatureHelper")]
	public class HandlerClass151
	{
		// System.Reflection.Emit.SignatureHelper.GetHashCode
		private static bool CallerMethod1837(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.SignatureHelper.Equals
		private static bool CallerMethod1838(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.SignatureHelper.ToString
		private static bool CallerMethod1839(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.SignatureHelper.AddArgument
		private static bool CallerMethod1840(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.SignatureHelper.AddSentinel
		private static bool CallerMethod1841(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.SignatureHelper.GetSignature
		private static bool CallerMethod1842(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.SignatureHelper.GetMethodSigHelper
		private static bool CallerMethod1843(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper
		private static bool CallerMethod1844(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.SignatureHelper.GetFieldSigHelper
		private static bool CallerMethod1845(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.SignatureHelper.GetMethodSigHelper
		private static bool CallerMethod1846(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.SignatureHelper.GetMethodSigHelper
		private static bool CallerMethod1847(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.SignatureHelper.GetPropertySigHelper
		private static bool CallerMethod1848(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Int32 GetHashCode(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1837), "LIBRARY", "System.Reflection.Emit.SignatureHelper.GetHashCode()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Boolean Equals(HeatDotNet.MethodInterceptInfo methodIntercept, System.Object obj)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = obj;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1838), "LIBRARY", "System.Reflection.Emit.SignatureHelper.Equals(Object)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1839), "LIBRARY", "System.Reflection.Emit.SignatureHelper.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static void AddArgument(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type clsArgument)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = clsArgument;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1840), "LIBRARY", "System.Reflection.Emit.SignatureHelper.AddArgument(Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddSentinel(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1841), "LIBRARY", "System.Reflection.Emit.SignatureHelper.AddSentinel()", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Byte[] GetSignature(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1842), "LIBRARY", "System.Reflection.Emit.SignatureHelper.GetSignature()", paramObjs, typeof(System.Byte[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Byte[])retValue;
		}

		public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Module mod, System.Runtime.InteropServices.CallingConvention unmanagedCallConv, System.Type returnType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = mod;
			paramObjs[2] = unmanagedCallConv;
			paramObjs[3] = returnType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1843), "LIBRARY", "System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(Module, CallingConvention, Type)", paramObjs, typeof(System.Reflection.Emit.SignatureHelper), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.SignatureHelper)retValue;
		}

		public static System.Reflection.Emit.SignatureHelper GetLocalVarSigHelper(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Module mod)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = mod;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1844), "LIBRARY", "System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(Module)", paramObjs, typeof(System.Reflection.Emit.SignatureHelper), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.SignatureHelper)retValue;
		}

		public static System.Reflection.Emit.SignatureHelper GetFieldSigHelper(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Module mod)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = mod;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1845), "LIBRARY", "System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(Module)", paramObjs, typeof(System.Reflection.Emit.SignatureHelper), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.SignatureHelper)retValue;
		}

		public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Module mod, System.Reflection.CallingConventions callingConvention, System.Type returnType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = mod;
			paramObjs[2] = callingConvention;
			paramObjs[3] = returnType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1846), "LIBRARY", "System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(Module, CallingConventions, Type)", paramObjs, typeof(System.Reflection.Emit.SignatureHelper), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.SignatureHelper)retValue;
		}

		public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Module mod, System.Type returnType, System.Type[] parameterTypes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = mod;
			paramObjs[2] = returnType;
			paramObjs[3] = parameterTypes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1847), "LIBRARY", "System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(Module, Type, Type[])", paramObjs, typeof(System.Reflection.Emit.SignatureHelper), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.SignatureHelper)retValue;
		}

		public static System.Reflection.Emit.SignatureHelper GetPropertySigHelper(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Module mod, System.Type returnType, System.Type[] parameterTypes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = mod;
			paramObjs[2] = returnType;
			paramObjs[3] = parameterTypes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1848), "LIBRARY", "System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(Module, Type, Type[])", paramObjs, typeof(System.Reflection.Emit.SignatureHelper), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.SignatureHelper)retValue;
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.Emit.TypeBuilder")]
	public class HandlerClass152
	{
		// System.Reflection.Emit.TypeBuilder.get_UnderlyingSystemType
		private static bool CallerMethod1849(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.InvokeMember
		private static bool CallerMethod1850(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 9) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.GetMembers
		private static bool CallerMethod1851(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.GetProperties
		private static bool CallerMethod1852(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.GetFields
		private static bool CallerMethod1853(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.GetField
		private static bool CallerMethod1854(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.GetMethods
		private static bool CallerMethod1855(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.GetInterfaceMap
		private static bool CallerMethod1856(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.IsAssignableFrom
		private static bool CallerMethod1857(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.IsSubclassOf
		private static bool CallerMethod1858(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.GetElementType
		private static bool CallerMethod1859(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.GetMember
		private static bool CallerMethod1860(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.GetNestedType
		private static bool CallerMethod1861(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.GetNestedTypes
		private static bool CallerMethod1862(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.GetEvents
		private static bool CallerMethod1863(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.GetEvents
		private static bool CallerMethod1864(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.GetEvent
		private static bool CallerMethod1865(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.GetInterfaces
		private static bool CallerMethod1866(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.GetInterface
		private static bool CallerMethod1867(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.GetConstructors
		private static bool CallerMethod1868(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.get_BaseType
		private static bool CallerMethod1869(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.get_AssemblyQualifiedName
		private static bool CallerMethod1870(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.get_Namespace
		private static bool CallerMethod1871(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.get_FullName
		private static bool CallerMethod1872(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.get_TypeHandle
		private static bool CallerMethod1873(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.get_Assembly
		private static bool CallerMethod1874(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.get_Module
		private static bool CallerMethod1875(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.get_GUID
		private static bool CallerMethod1876(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.IsDefined
		private static bool CallerMethod1877(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.GetCustomAttributes
		private static bool CallerMethod1878(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.GetCustomAttributes
		private static bool CallerMethod1879(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.get_ReflectedType
		private static bool CallerMethod1880(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.get_DeclaringType
		private static bool CallerMethod1881(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.get_Name
		private static bool CallerMethod1882(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.ToString
		private static bool CallerMethod1883(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.get_Size
		private static bool CallerMethod1884(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.get_PackingSize
		private static bool CallerMethod1885(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.SetParent
		private static bool CallerMethod1886(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation
		private static bool CallerMethod1887(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.DefineMethod
		private static bool CallerMethod1888(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.DefineMethod
		private static bool CallerMethod1889(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 6) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.DefineProperty
		private static bool CallerMethod1890(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.DefineEvent
		private static bool CallerMethod1891(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod
		private static bool CallerMethod1892(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 9) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod
		private static bool CallerMethod1893(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 10) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.DefineTypeInitializer
		private static bool CallerMethod1894(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.DefineConstructor
		private static bool CallerMethod1895(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor
		private static bool CallerMethod1896(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.CreateType
		private static bool CallerMethod1897(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.DefineMethodOverride
		private static bool CallerMethod1898(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.DefineField
		private static bool CallerMethod1899(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.DefineInitializedData
		private static bool CallerMethod1900(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.DefineUninitializedData
		private static bool CallerMethod1901(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.DefineNestedType
		private static bool CallerMethod1902(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.DefineNestedType
		private static bool CallerMethod1903(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.DefineNestedType
		private static bool CallerMethod1904(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.DefineNestedType
		private static bool CallerMethod1905(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.DefineNestedType
		private static bool CallerMethod1906(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.DefineNestedType
		private static bool CallerMethod1907(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 5) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.AddDeclarativeSecurity
		private static bool CallerMethod1908(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.get_TypeToken
		private static bool CallerMethod1909(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.SetCustomAttribute
		private static bool CallerMethod1910(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.TypeBuilder.SetCustomAttribute
		private static bool CallerMethod1911(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Type get_UnderlyingSystemType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1849), "LIBRARY", "System.Reflection.Emit.TypeBuilder.get_UnderlyingSystemType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Object InvokeMember(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object target, System.Object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, System.String[] namedParameters)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[9];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = invokeAttr;
			paramObjs[3] = binder;
			paramObjs[4] = target;
			paramObjs[5] = args;
			paramObjs[6] = modifiers;
			paramObjs[7] = culture;
			paramObjs[8] = namedParameters;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1850), "LIBRARY", "System.Reflection.Emit.TypeBuilder.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Reflection.MemberInfo[] GetMembers(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1851), "LIBRARY", "System.Reflection.Emit.TypeBuilder.GetMembers(BindingFlags)", paramObjs, typeof(System.Reflection.MemberInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MemberInfo[])retValue;
		}

		public static System.Reflection.PropertyInfo[] GetProperties(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1852), "LIBRARY", "System.Reflection.Emit.TypeBuilder.GetProperties(BindingFlags)", paramObjs, typeof(System.Reflection.PropertyInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.PropertyInfo[])retValue;
		}

		public static System.Reflection.FieldInfo[] GetFields(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1853), "LIBRARY", "System.Reflection.Emit.TypeBuilder.GetFields(BindingFlags)", paramObjs, typeof(System.Reflection.FieldInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.FieldInfo[])retValue;
		}

		public static System.Reflection.FieldInfo GetField(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1854), "LIBRARY", "System.Reflection.Emit.TypeBuilder.GetField(String, BindingFlags)", paramObjs, typeof(System.Reflection.FieldInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.FieldInfo)retValue;
		}

		public static System.Reflection.MethodInfo[] GetMethods(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1855), "LIBRARY", "System.Reflection.Emit.TypeBuilder.GetMethods(BindingFlags)", paramObjs, typeof(System.Reflection.MethodInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodInfo[])retValue;
		}

		public static System.Reflection.InterfaceMapping GetInterfaceMap(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type interfaceType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = interfaceType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1856), "LIBRARY", "System.Reflection.Emit.TypeBuilder.GetInterfaceMap(Type)", paramObjs, typeof(System.Reflection.InterfaceMapping), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.InterfaceMapping)retValue;
		}

		public static System.Boolean IsAssignableFrom(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type c)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = c;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1857), "LIBRARY", "System.Reflection.Emit.TypeBuilder.IsAssignableFrom(Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Boolean IsSubclassOf(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type c)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = c;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1858), "LIBRARY", "System.Reflection.Emit.TypeBuilder.IsSubclassOf(Type)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Type GetElementType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1859), "LIBRARY", "System.Reflection.Emit.TypeBuilder.GetElementType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Reflection.MemberInfo[] GetMember(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = type;
			paramObjs[3] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1860), "LIBRARY", "System.Reflection.Emit.TypeBuilder.GetMember(String, MemberTypes, BindingFlags)", paramObjs, typeof(System.Reflection.MemberInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MemberInfo[])retValue;
		}

		public static System.Type GetNestedType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1861), "LIBRARY", "System.Reflection.Emit.TypeBuilder.GetNestedType(String, BindingFlags)", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Type[] GetNestedTypes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1862), "LIBRARY", "System.Reflection.Emit.TypeBuilder.GetNestedTypes(BindingFlags)", paramObjs, typeof(System.Type[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type[])retValue;
		}

		public static System.Reflection.EventInfo[] GetEvents(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1863), "LIBRARY", "System.Reflection.Emit.TypeBuilder.GetEvents(BindingFlags)", paramObjs, typeof(System.Reflection.EventInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.EventInfo[])retValue;
		}

		public static System.Reflection.EventInfo[] GetEvents(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1864), "LIBRARY", "System.Reflection.Emit.TypeBuilder.GetEvents()", paramObjs, typeof(System.Reflection.EventInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.EventInfo[])retValue;
		}

		public static System.Reflection.EventInfo GetEvent(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1865), "LIBRARY", "System.Reflection.Emit.TypeBuilder.GetEvent(String, BindingFlags)", paramObjs, typeof(System.Reflection.EventInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.EventInfo)retValue;
		}

		public static System.Type[] GetInterfaces(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1866), "LIBRARY", "System.Reflection.Emit.TypeBuilder.GetInterfaces()", paramObjs, typeof(System.Type[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type[])retValue;
		}

		public static System.Type GetInterface(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Boolean ignoreCase)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = ignoreCase;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1867), "LIBRARY", "System.Reflection.Emit.TypeBuilder.GetInterface(String, Boolean)", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Reflection.ConstructorInfo[] GetConstructors(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1868), "LIBRARY", "System.Reflection.Emit.TypeBuilder.GetConstructors(BindingFlags)", paramObjs, typeof(System.Reflection.ConstructorInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.ConstructorInfo[])retValue;
		}

		public static System.Type get_BaseType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1869), "LIBRARY", "System.Reflection.Emit.TypeBuilder.get_BaseType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.String get_AssemblyQualifiedName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1870), "LIBRARY", "System.Reflection.Emit.TypeBuilder.get_AssemblyQualifiedName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Namespace(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1871), "LIBRARY", "System.Reflection.Emit.TypeBuilder.get_Namespace()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_FullName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1872), "LIBRARY", "System.Reflection.Emit.TypeBuilder.get_FullName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.RuntimeTypeHandle get_TypeHandle(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1873), "LIBRARY", "System.Reflection.Emit.TypeBuilder.get_TypeHandle()", paramObjs, typeof(System.RuntimeTypeHandle), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.RuntimeTypeHandle)retValue;
		}

		public static System.Reflection.Assembly get_Assembly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1874), "LIBRARY", "System.Reflection.Emit.TypeBuilder.get_Assembly()", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

		public static System.Reflection.Module get_Module(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1875), "LIBRARY", "System.Reflection.Emit.TypeBuilder.get_Module()", paramObjs, typeof(System.Reflection.Module), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Module)retValue;
		}

		public static System.Guid get_GUID(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1876), "LIBRARY", "System.Reflection.Emit.TypeBuilder.get_GUID()", paramObjs, typeof(System.Guid), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Guid)retValue;
		}

		public static System.Boolean IsDefined(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type attributeType, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeType;
			paramObjs[2] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1877), "LIBRARY", "System.Reflection.Emit.TypeBuilder.IsDefined(Type, Boolean)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Object[] GetCustomAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1878), "LIBRARY", "System.Reflection.Emit.TypeBuilder.GetCustomAttributes(Boolean)", paramObjs, typeof(System.Object[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object[])retValue;
		}

		public static System.Object[] GetCustomAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type attributeType, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeType;
			paramObjs[2] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1879), "LIBRARY", "System.Reflection.Emit.TypeBuilder.GetCustomAttributes(Type, Boolean)", paramObjs, typeof(System.Object[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object[])retValue;
		}

		public static System.Type get_ReflectedType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1880), "LIBRARY", "System.Reflection.Emit.TypeBuilder.get_ReflectedType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Type get_DeclaringType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1881), "LIBRARY", "System.Reflection.Emit.TypeBuilder.get_DeclaringType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1882), "LIBRARY", "System.Reflection.Emit.TypeBuilder.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String ToString(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1883), "LIBRARY", "System.Reflection.Emit.TypeBuilder.ToString()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Int32 get_Size(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1884), "LIBRARY", "System.Reflection.Emit.TypeBuilder.get_Size()", paramObjs, typeof(System.Int32), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Int32)retValue;
		}

		public static System.Reflection.Emit.PackingSize get_PackingSize(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1885), "LIBRARY", "System.Reflection.Emit.TypeBuilder.get_PackingSize()", paramObjs, typeof(System.Reflection.Emit.PackingSize), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.PackingSize)retValue;
		}

		public static void SetParent(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type parent)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = parent;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1886), "LIBRARY", "System.Reflection.Emit.TypeBuilder.SetParent(Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void AddInterfaceImplementation(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type interfaceType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = interfaceType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1887), "LIBRARY", "System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(Type)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Reflection.Emit.MethodBuilder DefineMethod(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.MethodAttributes attributes, System.Type returnType, System.Type[] parameterTypes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = attributes;
			paramObjs[3] = returnType;
			paramObjs[4] = parameterTypes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1888), "LIBRARY", "System.Reflection.Emit.TypeBuilder.DefineMethod(String, MethodAttributes, Type, Type[])", paramObjs, typeof(System.Reflection.Emit.MethodBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.MethodBuilder)retValue;
		}

		public static System.Reflection.Emit.MethodBuilder DefineMethod(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, System.Type returnType, System.Type[] parameterTypes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[6];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = attributes;
			paramObjs[3] = callingConvention;
			paramObjs[4] = returnType;
			paramObjs[5] = parameterTypes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1889), "LIBRARY", "System.Reflection.Emit.TypeBuilder.DefineMethod(String, MethodAttributes, CallingConventions, Type, Type[])", paramObjs, typeof(System.Reflection.Emit.MethodBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.MethodBuilder)retValue;
		}

		public static System.Reflection.Emit.PropertyBuilder DefineProperty(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.PropertyAttributes attributes, System.Type returnType, System.Type[] parameterTypes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = attributes;
			paramObjs[3] = returnType;
			paramObjs[4] = parameterTypes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1890), "LIBRARY", "System.Reflection.Emit.TypeBuilder.DefineProperty(String, PropertyAttributes, Type, Type[])", paramObjs, typeof(System.Reflection.Emit.PropertyBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.PropertyBuilder)retValue;
		}

		public static System.Reflection.Emit.EventBuilder DefineEvent(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.EventAttributes attributes, System.Type eventtype)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = attributes;
			paramObjs[3] = eventtype;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1891), "LIBRARY", "System.Reflection.Emit.TypeBuilder.DefineEvent(String, EventAttributes, Type)", paramObjs, typeof(System.Reflection.Emit.EventBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.EventBuilder)retValue;
		}

		public static System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String dllName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, System.Type returnType, System.Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[9];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = dllName;
			paramObjs[3] = attributes;
			paramObjs[4] = callingConvention;
			paramObjs[5] = returnType;
			paramObjs[6] = parameterTypes;
			paramObjs[7] = nativeCallConv;
			paramObjs[8] = nativeCharSet;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1892), "LIBRARY", "System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(String, String, MethodAttributes, CallingConventions, Type, Type[], CallingConvention, CharSet)", paramObjs, typeof(System.Reflection.Emit.MethodBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.MethodBuilder)retValue;
		}

		public static System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.String dllName, System.String entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, System.Type returnType, System.Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[10];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = dllName;
			paramObjs[3] = entryName;
			paramObjs[4] = attributes;
			paramObjs[5] = callingConvention;
			paramObjs[6] = returnType;
			paramObjs[7] = parameterTypes;
			paramObjs[8] = nativeCallConv;
			paramObjs[9] = nativeCharSet;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1893), "LIBRARY", "System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(String, String, String, MethodAttributes, CallingConventions, Type, Type[], CallingConvention, CharSet)", paramObjs, typeof(System.Reflection.Emit.MethodBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.MethodBuilder)retValue;
		}

		public static System.Reflection.Emit.ConstructorBuilder DefineTypeInitializer(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1894), "LIBRARY", "System.Reflection.Emit.TypeBuilder.DefineTypeInitializer()", paramObjs, typeof(System.Reflection.Emit.ConstructorBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.ConstructorBuilder)retValue;
		}

		public static System.Reflection.Emit.ConstructorBuilder DefineConstructor(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, System.Type[] parameterTypes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributes;
			paramObjs[2] = callingConvention;
			paramObjs[3] = parameterTypes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1895), "LIBRARY", "System.Reflection.Emit.TypeBuilder.DefineConstructor(MethodAttributes, CallingConventions, Type[])", paramObjs, typeof(System.Reflection.Emit.ConstructorBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.ConstructorBuilder)retValue;
		}

		public static System.Reflection.Emit.ConstructorBuilder DefineDefaultConstructor(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.MethodAttributes attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1896), "LIBRARY", "System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(MethodAttributes)", paramObjs, typeof(System.Reflection.Emit.ConstructorBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.ConstructorBuilder)retValue;
		}

		public static System.Type CreateType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1897), "LIBRARY", "System.Reflection.Emit.TypeBuilder.CreateType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static void DefineMethodOverride(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.MethodInfo methodInfoBody, System.Reflection.MethodInfo methodInfoDeclaration)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = methodInfoBody;
			paramObjs[2] = methodInfoDeclaration;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1898), "LIBRARY", "System.Reflection.Emit.TypeBuilder.DefineMethodOverride(MethodInfo, MethodInfo)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Reflection.Emit.FieldBuilder DefineField(HeatDotNet.MethodInterceptInfo methodIntercept, System.String fieldName, System.Type type, System.Reflection.FieldAttributes attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = fieldName;
			paramObjs[2] = type;
			paramObjs[3] = attributes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1899), "LIBRARY", "System.Reflection.Emit.TypeBuilder.DefineField(String, Type, FieldAttributes)", paramObjs, typeof(System.Reflection.Emit.FieldBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.FieldBuilder)retValue;
		}

		public static System.Reflection.Emit.FieldBuilder DefineInitializedData(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Byte[] data, System.Reflection.FieldAttributes attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = data;
			paramObjs[3] = attributes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1900), "LIBRARY", "System.Reflection.Emit.TypeBuilder.DefineInitializedData(String, Byte[], FieldAttributes)", paramObjs, typeof(System.Reflection.Emit.FieldBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.FieldBuilder)retValue;
		}

		public static System.Reflection.Emit.FieldBuilder DefineUninitializedData(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Int32 size, System.Reflection.FieldAttributes attributes)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = size;
			paramObjs[3] = attributes;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1901), "LIBRARY", "System.Reflection.Emit.TypeBuilder.DefineUninitializedData(String, Int32, FieldAttributes)", paramObjs, typeof(System.Reflection.Emit.FieldBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.FieldBuilder)retValue;
		}

		public static System.Reflection.Emit.TypeBuilder DefineNestedType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1902), "LIBRARY", "System.Reflection.Emit.TypeBuilder.DefineNestedType(String)", paramObjs, typeof(System.Reflection.Emit.TypeBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.TypeBuilder)retValue;
		}

		public static System.Reflection.Emit.TypeBuilder DefineNestedType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.TypeAttributes attr, System.Type parent, System.Type[] interfaces)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = attr;
			paramObjs[3] = parent;
			paramObjs[4] = interfaces;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1903), "LIBRARY", "System.Reflection.Emit.TypeBuilder.DefineNestedType(String, TypeAttributes, Type, Type[])", paramObjs, typeof(System.Reflection.Emit.TypeBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.TypeBuilder)retValue;
		}

		public static System.Reflection.Emit.TypeBuilder DefineNestedType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.TypeAttributes attr, System.Type parent)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = attr;
			paramObjs[3] = parent;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1904), "LIBRARY", "System.Reflection.Emit.TypeBuilder.DefineNestedType(String, TypeAttributes, Type)", paramObjs, typeof(System.Reflection.Emit.TypeBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.TypeBuilder)retValue;
		}

		public static System.Reflection.Emit.TypeBuilder DefineNestedType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.TypeAttributes attr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = attr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1905), "LIBRARY", "System.Reflection.Emit.TypeBuilder.DefineNestedType(String, TypeAttributes)", paramObjs, typeof(System.Reflection.Emit.TypeBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.TypeBuilder)retValue;
		}

		public static System.Reflection.Emit.TypeBuilder DefineNestedType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.TypeAttributes attr, System.Type parent, System.Int32 typeSize)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = attr;
			paramObjs[3] = parent;
			paramObjs[4] = typeSize;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1906), "LIBRARY", "System.Reflection.Emit.TypeBuilder.DefineNestedType(String, TypeAttributes, Type, Int32)", paramObjs, typeof(System.Reflection.Emit.TypeBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.TypeBuilder)retValue;
		}

		public static System.Reflection.Emit.TypeBuilder DefineNestedType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.TypeAttributes attr, System.Type parent, System.Reflection.Emit.PackingSize packSize)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[5];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = attr;
			paramObjs[3] = parent;
			paramObjs[4] = packSize;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1907), "LIBRARY", "System.Reflection.Emit.TypeBuilder.DefineNestedType(String, TypeAttributes, Type, PackingSize)", paramObjs, typeof(System.Reflection.Emit.TypeBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.TypeBuilder)retValue;
		}

		public static void AddDeclarativeSecurity(HeatDotNet.MethodInterceptInfo methodIntercept, System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = action;
			paramObjs[2] = pset;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1908), "LIBRARY", "System.Reflection.Emit.TypeBuilder.AddDeclarativeSecurity(SecurityAction, PermissionSet)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static System.Reflection.Emit.TypeToken get_TypeToken(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1909), "LIBRARY", "System.Reflection.Emit.TypeBuilder.get_TypeToken()", paramObjs, typeof(System.Reflection.Emit.TypeToken), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.TypeToken)retValue;
		}

		public static void SetCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.ConstructorInfo con, System.Byte[] binaryAttribute)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = con;
			paramObjs[2] = binaryAttribute;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1910), "LIBRARY", "System.Reflection.Emit.TypeBuilder.SetCustomAttribute(ConstructorInfo, Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.CustomAttributeBuilder customBuilder)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = customBuilder;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1911), "LIBRARY", "System.Reflection.Emit.TypeBuilder.SetCustomAttribute(CustomAttributeBuilder)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

	[HeatDotNet.InterceptTypeName("System.Reflection.Emit.EnumBuilder")]
	public class HandlerClass153
	{
		// System.Reflection.Emit.EnumBuilder.get_UnderlyingSystemType
		private static bool CallerMethod1912(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.InvokeMember
		private static bool CallerMethod1913(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 9) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.GetMembers
		private static bool CallerMethod1914(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.GetProperties
		private static bool CallerMethod1915(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.GetFields
		private static bool CallerMethod1916(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.GetField
		private static bool CallerMethod1917(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.GetMethods
		private static bool CallerMethod1918(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.GetInterfaceMap
		private static bool CallerMethod1919(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.GetElementType
		private static bool CallerMethod1920(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.GetMember
		private static bool CallerMethod1921(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 4) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.GetNestedType
		private static bool CallerMethod1922(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.GetNestedTypes
		private static bool CallerMethod1923(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.GetEvents
		private static bool CallerMethod1924(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.GetEvents
		private static bool CallerMethod1925(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.GetEvent
		private static bool CallerMethod1926(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.GetInterfaces
		private static bool CallerMethod1927(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.GetInterface
		private static bool CallerMethod1928(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.GetConstructors
		private static bool CallerMethod1929(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.get_BaseType
		private static bool CallerMethod1930(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.get_AssemblyQualifiedName
		private static bool CallerMethod1931(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.get_Namespace
		private static bool CallerMethod1932(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.get_FullName
		private static bool CallerMethod1933(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.get_TypeHandle
		private static bool CallerMethod1934(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.get_Assembly
		private static bool CallerMethod1935(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.get_Module
		private static bool CallerMethod1936(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.get_GUID
		private static bool CallerMethod1937(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.IsDefined
		private static bool CallerMethod1938(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.GetCustomAttributes
		private static bool CallerMethod1939(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.GetCustomAttributes
		private static bool CallerMethod1940(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.get_ReflectedType
		private static bool CallerMethod1941(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.get_DeclaringType
		private static bool CallerMethod1942(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.get_Name
		private static bool CallerMethod1943(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.DefineLiteral
		private static bool CallerMethod1944(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.CreateType
		private static bool CallerMethod1945(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.get_TypeToken
		private static bool CallerMethod1946(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.get_UnderlyingField
		private static bool CallerMethod1947(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 1) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				retValue = ((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.SetCustomAttribute
		private static bool CallerMethod1948(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 3) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		// System.Reflection.Emit.EnumBuilder.SetCustomAttribute
		private static bool CallerMethod1949(Object[] paramObjs, ref Object retValue, ref Exception exception)
		{
			if (paramObjs.Length != 2) return false;
			Object[] methodParams = new Object[paramObjs.Length - 1];
			Array.Copy(paramObjs, 1, methodParams, 0, paramObjs.Length - 1);
			try
			{
				DotNetReplacementLibrary.EnableNativeInterception();
				HeatDotNet.Interception.EnableInterceptionInCurrentThread();
				HeatDotNet.Interception.BeginForceOriginalCode();
				((HeatDotNet.MethodInterceptInfo)paramObjs[0]).Invoke(methodParams);
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
				retValue = null;
				exception = null;
			}
			catch (Exception e)
			{
				retValue = null;
				exception = e;
				HeatDotNet.Interception.DisableInterceptionInCurrentThread();
				DotNetReplacementLibrary.DisableNativeInterception();
			}
			return true;
		}

		public static System.Type get_UnderlyingSystemType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1912), "LIBRARY", "System.Reflection.Emit.EnumBuilder.get_UnderlyingSystemType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Object InvokeMember(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object target, System.Object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, System.String[] namedParameters)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[9];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = invokeAttr;
			paramObjs[3] = binder;
			paramObjs[4] = target;
			paramObjs[5] = args;
			paramObjs[6] = modifiers;
			paramObjs[7] = culture;
			paramObjs[8] = namedParameters;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1913), "LIBRARY", "System.Reflection.Emit.EnumBuilder.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])", paramObjs, typeof(System.Object), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object)retValue;
		}

		public static System.Reflection.MemberInfo[] GetMembers(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1914), "LIBRARY", "System.Reflection.Emit.EnumBuilder.GetMembers(BindingFlags)", paramObjs, typeof(System.Reflection.MemberInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MemberInfo[])retValue;
		}

		public static System.Reflection.PropertyInfo[] GetProperties(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1915), "LIBRARY", "System.Reflection.Emit.EnumBuilder.GetProperties(BindingFlags)", paramObjs, typeof(System.Reflection.PropertyInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.PropertyInfo[])retValue;
		}

		public static System.Reflection.FieldInfo[] GetFields(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1916), "LIBRARY", "System.Reflection.Emit.EnumBuilder.GetFields(BindingFlags)", paramObjs, typeof(System.Reflection.FieldInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.FieldInfo[])retValue;
		}

		public static System.Reflection.FieldInfo GetField(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1917), "LIBRARY", "System.Reflection.Emit.EnumBuilder.GetField(String, BindingFlags)", paramObjs, typeof(System.Reflection.FieldInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.FieldInfo)retValue;
		}

		public static System.Reflection.MethodInfo[] GetMethods(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1918), "LIBRARY", "System.Reflection.Emit.EnumBuilder.GetMethods(BindingFlags)", paramObjs, typeof(System.Reflection.MethodInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MethodInfo[])retValue;
		}

		public static System.Reflection.InterfaceMapping GetInterfaceMap(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type interfaceType)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = interfaceType;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1919), "LIBRARY", "System.Reflection.Emit.EnumBuilder.GetInterfaceMap(Type)", paramObjs, typeof(System.Reflection.InterfaceMapping), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.InterfaceMapping)retValue;
		}

		public static System.Type GetElementType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1920), "LIBRARY", "System.Reflection.Emit.EnumBuilder.GetElementType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Reflection.MemberInfo[] GetMember(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[4];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = type;
			paramObjs[3] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1921), "LIBRARY", "System.Reflection.Emit.EnumBuilder.GetMember(String, MemberTypes, BindingFlags)", paramObjs, typeof(System.Reflection.MemberInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.MemberInfo[])retValue;
		}

		public static System.Type GetNestedType(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1922), "LIBRARY", "System.Reflection.Emit.EnumBuilder.GetNestedType(String, BindingFlags)", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Type[] GetNestedTypes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1923), "LIBRARY", "System.Reflection.Emit.EnumBuilder.GetNestedTypes(BindingFlags)", paramObjs, typeof(System.Type[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type[])retValue;
		}

		public static System.Reflection.EventInfo[] GetEvents(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1924), "LIBRARY", "System.Reflection.Emit.EnumBuilder.GetEvents(BindingFlags)", paramObjs, typeof(System.Reflection.EventInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.EventInfo[])retValue;
		}

		public static System.Reflection.EventInfo[] GetEvents(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1925), "LIBRARY", "System.Reflection.Emit.EnumBuilder.GetEvents()", paramObjs, typeof(System.Reflection.EventInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.EventInfo[])retValue;
		}

		public static System.Reflection.EventInfo GetEvent(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1926), "LIBRARY", "System.Reflection.Emit.EnumBuilder.GetEvent(String, BindingFlags)", paramObjs, typeof(System.Reflection.EventInfo), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.EventInfo)retValue;
		}

		public static System.Type[] GetInterfaces(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1927), "LIBRARY", "System.Reflection.Emit.EnumBuilder.GetInterfaces()", paramObjs, typeof(System.Type[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type[])retValue;
		}

		public static System.Type GetInterface(HeatDotNet.MethodInterceptInfo methodIntercept, System.String name, System.Boolean ignoreCase)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = name;
			paramObjs[2] = ignoreCase;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1928), "LIBRARY", "System.Reflection.Emit.EnumBuilder.GetInterface(String, Boolean)", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Reflection.ConstructorInfo[] GetConstructors(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.BindingFlags bindingAttr)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = bindingAttr;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1929), "LIBRARY", "System.Reflection.Emit.EnumBuilder.GetConstructors(BindingFlags)", paramObjs, typeof(System.Reflection.ConstructorInfo[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.ConstructorInfo[])retValue;
		}

		public static System.Type get_BaseType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1930), "LIBRARY", "System.Reflection.Emit.EnumBuilder.get_BaseType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.String get_AssemblyQualifiedName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1931), "LIBRARY", "System.Reflection.Emit.EnumBuilder.get_AssemblyQualifiedName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_Namespace(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1932), "LIBRARY", "System.Reflection.Emit.EnumBuilder.get_Namespace()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.String get_FullName(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1933), "LIBRARY", "System.Reflection.Emit.EnumBuilder.get_FullName()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.RuntimeTypeHandle get_TypeHandle(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1934), "LIBRARY", "System.Reflection.Emit.EnumBuilder.get_TypeHandle()", paramObjs, typeof(System.RuntimeTypeHandle), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.RuntimeTypeHandle)retValue;
		}

		public static System.Reflection.Assembly get_Assembly(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1935), "LIBRARY", "System.Reflection.Emit.EnumBuilder.get_Assembly()", paramObjs, typeof(System.Reflection.Assembly), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Assembly)retValue;
		}

		public static System.Reflection.Module get_Module(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1936), "LIBRARY", "System.Reflection.Emit.EnumBuilder.get_Module()", paramObjs, typeof(System.Reflection.Module), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Module)retValue;
		}

		public static System.Guid get_GUID(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1937), "LIBRARY", "System.Reflection.Emit.EnumBuilder.get_GUID()", paramObjs, typeof(System.Guid), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Guid)retValue;
		}

		public static System.Boolean IsDefined(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type attributeType, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeType;
			paramObjs[2] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1938), "LIBRARY", "System.Reflection.Emit.EnumBuilder.IsDefined(Type, Boolean)", paramObjs, typeof(System.Boolean), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Boolean)retValue;
		}

		public static System.Object[] GetCustomAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1939), "LIBRARY", "System.Reflection.Emit.EnumBuilder.GetCustomAttributes(Boolean)", paramObjs, typeof(System.Object[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object[])retValue;
		}

		public static System.Object[] GetCustomAttributes(HeatDotNet.MethodInterceptInfo methodIntercept, System.Type attributeType, System.Boolean inherit)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = attributeType;
			paramObjs[2] = inherit;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1940), "LIBRARY", "System.Reflection.Emit.EnumBuilder.GetCustomAttributes(Type, Boolean)", paramObjs, typeof(System.Object[]), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Object[])retValue;
		}

		public static System.Type get_ReflectedType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1941), "LIBRARY", "System.Reflection.Emit.EnumBuilder.get_ReflectedType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Type get_DeclaringType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1942), "LIBRARY", "System.Reflection.Emit.EnumBuilder.get_DeclaringType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.String get_Name(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1943), "LIBRARY", "System.Reflection.Emit.EnumBuilder.get_Name()", paramObjs, typeof(System.String), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.String)retValue;
		}

		public static System.Reflection.Emit.FieldBuilder DefineLiteral(HeatDotNet.MethodInterceptInfo methodIntercept, System.String literalName, System.Object literalValue)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = literalName;
			paramObjs[2] = literalValue;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1944), "LIBRARY", "System.Reflection.Emit.EnumBuilder.DefineLiteral(String, Object)", paramObjs, typeof(System.Reflection.Emit.FieldBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.FieldBuilder)retValue;
		}

		public static System.Type CreateType(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1945), "LIBRARY", "System.Reflection.Emit.EnumBuilder.CreateType()", paramObjs, typeof(System.Type), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Type)retValue;
		}

		public static System.Reflection.Emit.TypeToken get_TypeToken(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1946), "LIBRARY", "System.Reflection.Emit.EnumBuilder.get_TypeToken()", paramObjs, typeof(System.Reflection.Emit.TypeToken), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.TypeToken)retValue;
		}

		public static System.Reflection.Emit.FieldBuilder get_UnderlyingField(HeatDotNet.MethodInterceptInfo methodIntercept)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[1];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1947), "LIBRARY", "System.Reflection.Emit.EnumBuilder.get_UnderlyingField()", paramObjs, typeof(System.Reflection.Emit.FieldBuilder), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
			return (System.Reflection.Emit.FieldBuilder)retValue;
		}

		public static void SetCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.ConstructorInfo con, System.Byte[] binaryAttribute)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[3];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = con;
			paramObjs[2] = binaryAttribute;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1948), "LIBRARY", "System.Reflection.Emit.EnumBuilder.SetCustomAttribute(ConstructorInfo, Byte[])", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

		public static void SetCustomAttribute(HeatDotNet.MethodInterceptInfo methodIntercept, System.Reflection.Emit.CustomAttributeBuilder customBuilder)
		{
			DotNetReplacementLibrary.DisableNativeInterception();
			Object[] paramObjs = new Object[2];
			Object retValue = null;
			Exception exception = null;
			paramObjs[0] = methodIntercept;
			paramObjs[1] = customBuilder;
			MSCorLibReplacementLibrary.ReplacementLibrary.RunStandardTestsAndGetResults(new OriginalMethodCaller(CallerMethod1949), "LIBRARY", "System.Reflection.Emit.EnumBuilder.SetCustomAttribute(CustomAttributeBuilder)", paramObjs, typeof(void), ref retValue, ref exception);
			DotNetReplacementLibrary.EnableNativeInterception();
			if (exception != null) HeatDotNet.Interception.ThrowException(exception);
		}

	};

}
