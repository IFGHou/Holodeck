/*
	$USER_PROJECT_NAME$.cs
	Code file for the test executable
	Generated by Holodeck Custom Intercept Project Generator
*/

using System;
using System.IO;
using HolodeckLib;
using Microsoft.Win32;
using FunctionDatabase;
using System.Collections;
using System.Windows.Forms;

namespace $USER_PROJECT_NAME$
{
	class $USER_PROJECT_NAME$
	{
		//************************************************************************
		// Method Name: Main
		// Description: Entry point for the program
		//
		// Params: None
		//
		// Return Value: None
		//************************************************************************		
		[STAThread]
		static void Main(string[] args)
		{
			//Get the full path to the interception library
			String replacementLibrary = LocateReplacementLibrary();
			if (replacementLibrary == null)
				return;

			//Declare and initialize the HolodeckLibrary object
			HolodeckLib.TestApplication testApp = new HolodeckLib.TestApplication ();

			//Perform the .NET Interception Cache update
			if (!DotNetCacheUpdate(replacementLibrary))
				return;

			//Perform Native interception which enables .NET interception and FaultInjection
			if (!PerformRequiredNativeInterception(testApp, replacementLibrary))
				return;

			//Launch or Attach to the application to be tested
			@CSHARP_ATTACH_OR_LAUNCH

			Console.WriteLine ("Press ENTER to terminate and exit.\n");
			Console.Read ();
			testApp.TerminateApplication();
		}

		//************************************************************************
		// Method Name: LocateReplacementLibrary
		// Description: Locates the binary for the companion replacement library
		//
		// Params: None
		//
		// Return Value: A full path to the companion DLL, null if not found
		//************************************************************************	
		static String LocateReplacementLibrary()
		{
			String replLib = System.Environment.CurrentDirectory + Path.DirectorySeparatorChar + "$USER_PROJECT_NAME$Dll.dll";

			if (!File.Exists (replLib))
				replLib = System.Environment.CurrentDirectory + Path.DirectorySeparatorChar + "Output" + Path.DirectorySeparatorChar + "$USER_PROJECT_NAME$Dll.dll";
			if (!File.Exists (replLib))
			{
				MessageBox.Show ("$USER_PROJECT_NAME$Dll.dll not found! Please run $USER_PROJECT_NAME$.exe from the directory which contains $USER_PROJECT_NAME$Dll.dll");
				return null;
			}
			
			return Path.GetFullPath (replLib);
		}

		//************************************************************************
		// Method Name: DotNetCacheUpdate
		// Description: Updates the cache for intercepted .NET modules
		//
		// Params:
		//	replacementLibrary - the path to the companion replacement library
		//
		// Return Value: true if successful, false otherwise
		//************************************************************************	
		static bool DotNetCacheUpdate(String replacementLibrary)
		{
			//Locate the the DotNetCacheGen executable
			RegistryKey regKey = Registry.LocalMachine.OpenSubKey (@"Software\Security Innovation\Holodeck Enterprise Edition");
			if (regKey == null)
				return false;
			String exePath = regKey.GetValue ("InstallPath") as String;
			if (exePath == null)
				return false;
			exePath = exePath + Path.DirectorySeparatorChar.ToString() + "DotNetCacheGen.exe";

			if (!File.Exists (exePath))
			{
				MessageBox.Show ("Could not locate DotNetCacheGen.exe. Tried looking for it at:\n\n" + Path.GetDirectoryName (exePath) + "\n\nHolodeck registry may be corrupt");
				return false;
			}

			System.Diagnostics.Process dotNetUpdateProcess = new System.Diagnostics.Process();
			dotNetUpdateProcess.StartInfo.FileName = exePath;
			dotNetUpdateProcess.StartInfo.Arguments = replacementLibrary;
			dotNetUpdateProcess.Start();
			dotNetUpdateProcess.WaitForExit();

			return true;
		}

		//************************************************************************
		// Method Name: PerformRequiredNativeInterception
		// Description: Intercepts some native methods required to hook .NET
		//				modules. May also contain interception calls for native
		//				methods required for fault injection.
		//
		// Params:
		//	testApp - the HolodeckLibrary object being used for interception
		//	replacementLibrary - the path to the companion replacement library
		//
		// Return Value: true if successful, false otherwise
		//************************************************************************			
		static bool PerformRequiredNativeInterception(HolodeckLib.TestApplication testApp, String replacementLibrary)
		{
			//Set our interception library name in the registry for Kernel32ReplacementLibrary to read
			//and perform some .NET cache work
			ArrayList libList = new ArrayList();
			libList.Add (replacementLibrary);
			testApp.SetDotNetLibraryInitList (libList);

			//Locate Kernel32ReplacementLibrary
			RegistryKey regKey = Registry.LocalMachine.OpenSubKey (@"Software\Security Innovation\Holodeck Enterprise Edition");
			if (regKey == null)
				return false;
			
			String installPath = regKey.GetValue ("InstallPath") as String;
			if (installPath == null)
				return false;

			String replacementDir = regKey.GetValue("ReplacementLibraryFolder") as String;
			if (replacementDir == null)
				return false;

			String kernelReplacementPath = Path.Combine (installPath, replacementDir) + Path.DirectorySeparatorChar.ToString() + "Kernel32ReplacementLibrary.dll";
			if (!File.Exists (kernelReplacementPath))
			{
				MessageBox.Show ("Could not locate Kernel32ReplacementLibrary.dll. Tried looking for it at:\n\n" + Path.GetDirectoryName (kernelReplacementPath) + "\n\nHolodeck registry may be corrupt!");
				return false;
			}
				
			testApp.InterceptFunction ("CreateFileA" , "CreateFileAReplacement",  kernelReplacementPath);
			testApp.InterceptFunction ("CreateFileW" , "CreateFileWReplacement",  kernelReplacementPath);
			testApp.InterceptFunction ("LoadLibraryA" , "LoadLibraryAReplacement",  kernelReplacementPath);
			testApp.InterceptFunction ("LoadLibraryExA" , "LoadLibraryExAReplacement",  kernelReplacementPath);
			testApp.InterceptFunction ("LoadLibraryExW" , "LoadLibraryExWReplacement",  kernelReplacementPath);
			testApp.InterceptFunction ("LoadLibraryW" , "LoadLibraryWReplacement",  kernelReplacementPath);

			return true;
		}
	}
}
